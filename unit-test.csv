LANGUAGEID,WORKSPACE,FIXTURE,STRATEGY,FILEPATH,REVISION,MULTILINE,COMPLETION_INTENT,AUTOCOMPLETE_KIND,RANGE_START_LINE,RANGE_START_CHARACTER,RANGE_END_LINE,RANGE_END_CHARACTER,RESULT_TIMEOUT,RESULT_ERROR,RESULT_EMPTY,RESULT_EXACT,RESULT_TYPECHECKS,RESULT_PARSES,RESULT_TEXT,RESULT_CHAR_COUNT,RESULT_NON_INSERT_PATCH,EDIT_DIFF,CHAT_REPLY,FIX_AFTER_DIAGNOSTIC,FIX_BEFORE_DIAGNOSTIC,LLM_JUDGE_SCORE,LLM_JUDGE_REASONING,PROVIDER_IDENTIFIER,PROVIDER_MODEL,STOP_REASON,CONTEXT_BFG_RETRIEVED_COUNT,CONTEXT_BFG_SUGGESTED_COUNT,CONTEXT_BFG_DURATION_MS,EVENT
typescript,unit-test,gpt-4o,unit-test,code_001/add.ts,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should correctly add two positive numbers', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should correctly add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
  })

  it('should correctly add two negative numbers', () => {
    expect(add(-2, -4)).to.equal(-6)
  })

  it('should return zero when adding zero to zero', () => {
    expect(add(0, 0)).to.equal(0)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })
})
",,,,,,,,,,,,,,,
typescript,unit-test,gpt-4o,unit-test,code_002/UniqueContext.ts,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should correctly add two positive numbers', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should correctly add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
  })

  it('should correctly add two negative numbers', () => {
    expect(add(-2, -4)).to.equal(-6)
  })

  it('should return zero when adding zero to zero', () => {
    expect(add(0, 0)).to.equal(0)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })
})
",,,,,,,,,,,,,,,
go,unit-test,gpt-4o,unit-test,code_003/quicksort.go,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should correctly add two positive numbers', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should correctly add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
  })

  it('should correctly add two negative numbers', () => {
    expect(add(-2, -4)).to.equal(-6)
  })

  it('should return zero when adding zero to zero', () => {
    expect(add(0, 0)).to.equal(0)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })
})
",,,,,,,,,,,,,,,
java,unit-test,gpt-4o,unit-test,code_004/Levenshtein.java,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should correctly add two positive numbers', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should correctly add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
  })

  it('should correctly add two negative numbers', () => {
    expect(add(-2, -4)).to.equal(-6)
  })

  it('should return zero when adding zero to zero', () => {
    expect(add(0, 0)).to.equal(0)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })
})
",,,,,,,,,,,,,,,
typescript,unit-test,claude-3.5-sonnet,unit-test,code_001/add.ts,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should add two positive numbers correctly', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should handle zero as an input', () => {
    expect(add(0, 5)).to.equal(5)
    expect(add(10, 0)).to.equal(10)
  })

  it('should add negative numbers correctly', () => {
    expect(add(-3, -7)).to.equal(-10)
  })

  it('should add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
    expect(add(-8, 3)).to.equal(-5)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })

  it('should return the same number when adding zero', () => {
    expect(add(100, 0)).to.equal(100)
    expect(add(0, 100)).to.equal(100)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })
})
",,,,,,,,,,,,,,,
typescript,unit-test,claude-3.5-sonnet,unit-test,code_002/UniqueContext.ts,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should add two positive numbers correctly', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should handle zero as an input', () => {
    expect(add(0, 5)).to.equal(5)
    expect(add(10, 0)).to.equal(10)
  })

  it('should add negative numbers correctly', () => {
    expect(add(-3, -7)).to.equal(-10)
  })

  it('should add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
    expect(add(-8, 3)).to.equal(-5)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })

  it('should return the same number when adding zero', () => {
    expect(add(100, 0)).to.equal(100)
    expect(add(0, 100)).to.equal(100)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })
})
",,,,,,,,,,,,,,,
go,unit-test,claude-3.5-sonnet,unit-test,code_003/quicksort.go,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should add two positive numbers correctly', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should handle zero as an input', () => {
    expect(add(0, 5)).to.equal(5)
    expect(add(10, 0)).to.equal(10)
  })

  it('should add negative numbers correctly', () => {
    expect(add(-3, -7)).to.equal(-10)
  })

  it('should add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
    expect(add(-8, 3)).to.equal(-5)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })

  it('should return the same number when adding zero', () => {
    expect(add(100, 0)).to.equal(100)
    expect(add(0, 100)).to.equal(100)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })
})
",,,,,,,,,,,,,,,
java,unit-test,claude-3.5-sonnet,unit-test,code_004/Levenshtein.java,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,false,,,,"import { expect } from 'chai'
import { add } from './add'

describe('add function', () => {
  it('should add two positive numbers correctly', () => {
    expect(add(2, 3)).to.equal(5)
  })

  it('should handle zero as an input', () => {
    expect(add(0, 5)).to.equal(5)
    expect(add(10, 0)).to.equal(10)
  })

  it('should add negative numbers correctly', () => {
    expect(add(-3, -7)).to.equal(-10)
  })

  it('should add a positive and a negative number', () => {
    expect(add(5, -3)).to.equal(2)
    expect(add(-8, 3)).to.equal(-5)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.7)).to.be.closeTo(4.2, 0.0001)
  })

  it('should return the same number when adding zero', () => {
    expect(add(100, 0)).to.equal(100)
    expect(add(0, 100)).to.equal(100)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).to.equal(3000000)
  })
})
",,,,,,,,,,,,,,,
