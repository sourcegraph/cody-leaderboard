LANGUAGEID,WORKSPACE,FIXTURE,STRATEGY,FILEPATH,REVISION,MULTILINE,COMPLETION_INTENT,AUTOCOMPLETE_KIND,RANGE_START_LINE,RANGE_START_CHARACTER,RANGE_END_LINE,RANGE_END_CHARACTER,RESULT_TIMEOUT,RESULT_ERROR,RESULT_EMPTY,RESULT_EXACT,RESULT_TYPECHECKS,RESULT_PARSES,RESULT_TEXT,RESULT_CHAR_COUNT,RESULT_NON_INSERT_PATCH,EDIT_DIFF,CHAT_REPLY,CHAT_QUESTION,QUESTION_CLASS,FIX_AFTER_DIAGNOSTIC,FIX_BEFORE_DIAGNOSTIC,LLM_JUDGE_SCORE,LLM_JUDGE_REASONING,CONCISENESS_SCORE,HEDGES,PROVIDER_IDENTIFIER,PROVIDER_MODEL,STOP_REASON,CONTEXT_BFG_RETRIEVED_COUNT,CONTEXT_BFG_SUGGESTED_COUNT,CONTEXT_BFG_DURATION_MS,EVENT,TEST_FILENAME,TEST_EXPECTED_FILENAME,TEST_GENERATED,TEST_HAS_TYPESCRIPT_ERRORS,TEST_USED_EXPECTED_TEST_FRAMEWORK,TEST_USED_CORRECT_APPEND_OPERATION,TEST_INPUT_FILENAME,TEST_LANGUAGE,TEST_NAME,TEST_DIAGNOSTICS
yaml,code_002,gpt-4o,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/UniqueContext.test.ts,src/UniqueContext.test.ts,"import { ContextItem, RangeData } from '@sourcegraph/cody-shared'

describe('UniqueContext', () => {
  test('should import ContextItem and RangeData types', () => {
    expect(ContextItem).toBeDefined()
    expect(RangeData).toBeDefined()
  })

  test('ContextItem should have expected properties', () => {
    const contextItem: ContextItem = {
      title: 'Test Context',
      description: 'This is a test context item',
      url: 'https://example.com',
      ranges: [],
    }

    expect(contextItem).toHaveProperty('title')
    expect(contextItem).toHaveProperty('description')
    expect(contextItem).toHaveProperty('url')
    expect(contextItem).toHaveProperty('ranges')
  })

  test('RangeData should have expected properties', () => {
    const rangeData: RangeData = {
      start: { line: 1, character: 0 },
      end: { line: 2, character: 10 },
      text: 'Test range',
    }

    expect(rangeData).toHaveProperty('start')
    expect(rangeData).toHaveProperty('end')
    expect(rangeData).toHaveProperty('text')
  })
})
",true,false,,src/UniqueContext.ts,typescript,Unique Context,"/src/UniqueContext.test.ts:1:39 2307 Cannot find module '@sourcegraph/cody-shared' or its corresponding type declarations.

/src/UniqueContext.test.ts:3:0 2582 Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.

/src/UniqueContext.test.ts:4:2 2582 Cannot find name 'test'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.

/src/UniqueContext.test.ts:5:4 2304 Cannot find name 'expect'."
yaml,code_004,gpt-4o,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/test/java/LevenshteinTest.java,src/test/java/LevenshteinTest.java,"import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

class LevenshteinTest {

    @Test
    void testEmptyStrings() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate("""", """");
        assertEquals(0, distance);
    }

    @Test
    void testIdenticalStrings() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""hello"");
        assertEquals(0, distance);
    }

    @Test
    void testDifferentLengths() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""world"");
        assertEquals(4, distance);
    }

    @Test
    void testSingleCharacterDifference() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""hallo"");
        assertEquals(1, distance);
    }

    @Test
    void testMultipleCharacterDifferences() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""kitten"", ""sitting"");
        assertEquals(3, distance);
    }

    @Test
    void testEmptyString() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate("""", ""hello"");
        assertEquals(5, distance);
    }

    @Test
    void testNullString() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(null, ""hello"");
        assertEquals(5, distance);
    }
}
",false,true,,src/main/java/Levenshtein.java,java,Levenshtein Distance,
yaml,code_003,gpt-4o,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,quicksort_test.go,quicksort_test.go,"package main

import (
	""reflect""
	""testing""
)

func TestQuickSort(t *testing.T) {
	tests := []struct {
		name     string
		input    []int
		expected []int
	}{
		{
			name:     ""Empty slice"",
			input:    []int{},
			expected: []int{},
		},
		{
			name:     ""Single element"",
			input:    []int{5},
			expected: []int{5},
		},
		{
			name:     ""Sorted slice"",
			input:    []int{1, 2, 3, 4, 5},
			expected: []int{1, 2, 3, 4, 5},
		},
		{
			name:     ""Reverse sorted slice"",
			input:    []int{5, 4, 3, 2, 1},
			expected: []int{1, 2, 3, 4, 5},
		},
		{
			name:     ""Duplicates"",
			input:    []int{3, 1, 4, 1, 5, 9, 2, 6, 5},
			expected: []int{1, 1, 2, 3, 4, 5, 5, 6, 9},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := quickSort(test.input)
			if !reflect.DeepEqual(result, test.expected) {
				t.Errorf(""quickSort(%v) = %v, expected %v"", test.input, result, test.expected)
			}
		})
	}
}
",false,true,,quicksort.go,go,Quicksort,
yaml,code_008,gpt-4o,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/rockskip/search_test.go,src/rockskip/search_test.go,"func TestSearchTimeout(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	state := map[string][]string{}
	gitAdd(t, repoDir, state, ""a.txt"", ""sym1a/n"")

	out, err := gitserver.CreateGitCommand(repoDir, ""git"", ""rev-parse"", ""HEAD"").CombinedOutput()
	require.NoError(t, err, string(out))
	commit := string(bytes.TrimSpace(out))

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Millisecond)
	defer cancel()

	_, err = s.Search(ctx, search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(commit),
		Query:    ""sym"",
		Timeout:  time.Second,
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""Processing symbols is taking a while, try again later"")
}

func TestSearchIndexingInProgress(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	state := map[string][]string{}
	gitAdd(t, repoDir, state, ""a.txt"", ""sym1a/n"")

	out, err := gitserver.CreateGitCommand(repoDir, ""git"", ""rev-parse"", ""HEAD"").CombinedOutput()
	require.NoError(t, err, string(out))
	commit := string(bytes.TrimSpace(out))

	s.status.threadIdToThreadStatus[""indexing""] = &observation.ThreadStatus{
		Name: fmt.Sprintf(""indexing %s"", repo),
		Remaining: func() string {
			return ""10 minutes""
		},
	}

	_, err = s.Search(context.Background(), search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(commit),
		Query:    ""sym"",
		Timeout:  time.Second,
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""Still processing symbols"")
	require.Contains(t, err.Error(), ""Estimated completion: 10 minutes"")
}

func TestSearchRepoLocked(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	state := map[string][]string{}
	gitAdd(t, repoDir, state, ""a.txt"", ""sym1a/n"")

	out, err := gitserver.CreateGitCommand(repoDir, ""git"", ""rev-parse"", ""HEAD"").CombinedOutput()
	require.NoError(t, err, string(out))
	commit := string(bytes.TrimSpace(out))

	_, err = s.db.Exec(""LOCK TABLE rockskip_repos IN ACCESS EXCLUSIVE MODE"")
	require.NoError(t, err)

	_, err = s.Search(context.Background(), search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(commit),
		Query:    ""sym"",
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""deletion in progress"")
}
",false,true,true,src/rockskip/search.go,go,Rockskip search,
yaml,code_006,gpt-4o,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/add.test.ts,src/add.test.ts,"import { add } from './add'
import { describe, it, expect } from 'vitest'

describe('add', () => {
  it('should add two positive numbers', () => {
    expect(add(2, 3)).toBe(5)
  })

  it('should add two negative numbers', () => {
    expect(add(-2, -3)).toBe(-5)
  })

  it('should add a positive and a negative number', () => {
    expect(add(2, -3)).toBe(-1)
  })

  it('should add zero to a number', () => {
    expect(add(0, 5)).toBe(5)
    expect(add(5, 0)).toBe(5)
  })

  it('should handle large numbers', () => {
    expect(add(Number.MAX_SAFE_INTEGER, 1)).toBe(Number.MAX_SAFE_INTEGER + 1)
  })
})
",false,true,,src/add.ts,typescript,Adder with sub context,
yaml,code_001,gpt-4o,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/add.test.ts,src/__tests__/add.test.ts,"import { add } from './add'

describe('add', () => {
  it('should add two positive numbers', () => {
    expect(add(2, 3)).toBe(5)
  })

  it('should add a positive and a negative number', () => {
    expect(add(5, -3)).toBe(2)
  })

  it('should add two negative numbers', () => {
    expect(add(-2, -4)).toBe(-6)
  })

  it('should add zero to a number', () => {
    expect(add(0, 7)).toBe(7)
    expect(add(7, 0)).toBe(7)
  })
})
",true,false,,src/add.ts,typescript,Adder,/src/add.test.ts:5:4 2304 Cannot find name 'expect'.
yaml,code_007,gpt-4o,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/rockskip/server_test.go,src/rockskip/server_test.go,"func TestRuler(t *testing.T) {
	tests := []struct {
		name     string
		n        int
		expected int
	}{
		{
			name:     ""zero"",
			n:        0,
			expected: 0,
		},
		{
			name:     ""negative"",
			n:        -5,
			expected: 0,
		},
		{
			name:     ""positive"",
			n:        10,
			expected: 4,
		},
		{
			name:     ""large"",
			n:        1000000,
			expected: 5,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			actual := ruler(tc.n)
			if actual != tc.expected {
				t.Errorf(""ruler(%d) = %d, expected %d"", tc.n, actual, tc.expected)
			}
		})
	}
}
",false,true,,src/rockskip/server.go,go,Rockskip ruler function,
yaml,code_002,claude-3-opus,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/UniqueContext.test.ts,src/UniqueContext.test.ts,"import { ContextItem, RangeData } from '@sourcegraph/cody-shared'

describe('UniqueContext', () => {
  test('should import ContextItem and RangeData types', () => {
    expect(ContextItem).toBeDefined()
    expect(RangeData).toBeDefined()
  })

  test('should have correct type definitions', () => {
    const contextItem: ContextItem = {
      title: 'Test Context',
      kind: 'function',
      ranges: [
        {
          start: { line: 1, character: 0 },
          end: { line: 1, character: 10 },
        },
      ],
    }

    const rangeData: RangeData = {
      start: { line: 1, character: 0 },
      end: { line: 1, character: 10 },
    }

    expect(typeof contextItem.title).toBe('string')
    expect(typeof contextItem.kind).toBe('string')
    expect(Array.isArray(contextItem.ranges)).toBe(true)
    expect(typeof rangeData.start.line).toBe('number')
    expect(typeof rangeData.start.character).toBe('number')
    expect(typeof rangeData.end.line).toBe('number')
    expect(typeof rangeData.end.character).toBe('number')
  })
})
",true,false,,src/UniqueContext.ts,typescript,Unique Context,"/src/UniqueContext.test.ts:1:39 2307 Cannot find module '@sourcegraph/cody-shared' or its corresponding type declarations.

/src/UniqueContext.test.ts:3:0 2582 Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.

/src/UniqueContext.test.ts:4:2 2582 Cannot find name 'test'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.

/src/UniqueContext.test.ts:5:4 2304 Cannot find name 'expect'."
yaml,code_004,claude-3-opus,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/test/java/LevenshteinTest.java,src/test/java/LevenshteinTest.java,"import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LevenshteinTest {

    @Test
    void testEmptyStrings() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate("""", """");
        assertEquals(0, distance);
    }

    @Test
    void testSameStrings() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""hello"");
        assertEquals(0, distance);
    }

    @Test
    void testDifferentStrings() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""world"");
        assertEquals(4, distance);
    }

    @Test
    void testLongerString() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""helloooo"");
        assertEquals(3, distance);
    }

    @Test
    void testShorterString() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""helloooo"", ""hello"");
        assertEquals(3, distance);
    }

    @Test
    void testNullString() {
        Levenshtein levenshtein = new Levenshtein();
        assertThrows(NullPointerException.class, () -> levenshtein.calculate(null, ""hello""));
        assertThrows(NullPointerException.class, () -> levenshtein.calculate(""hello"", null));
    }
}
",false,true,,src/main/java/Levenshtein.java,java,Levenshtein Distance,
yaml,code_003,claude-3-opus,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,quicksort_test.go,quicksort_test.go,"package main

import (
	""reflect""
	""testing""
)

func TestQuickSort(t *testing.T) {
	tests := []struct {
		name     string
		input    []int
		expected []int
	}{
		{
			name:     ""Empty slice"",
			input:    []int{},
			expected: []int{},
		},
		{
			name:     ""Single element"",
			input:    []int{5},
			expected: []int{5},
		},
		{
			name:     ""Sorted slice"",
			input:    []int{1, 2, 3, 4, 5},
			expected: []int{1, 2, 3, 4, 5},
		},
		{
			name:     ""Reverse sorted slice"",
			input:    []int{5, 4, 3, 2, 1},
			expected: []int{1, 2, 3, 4, 5},
		},
		{
			name:     ""Duplicates"",
			input:    []int{3, 1, 4, 1, 5, 9, 2, 6, 5},
			expected: []int{1, 1, 2, 3, 4, 5, 5, 6, 9},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := quickSort(test.input)
			if !reflect.DeepEqual(result, test.expected) {
				t.Errorf(""quickSort(%v) = %v, expected %v"", test.input, result, test.expected)
			}
		})
	}
}
",false,true,,quicksort.go,go,Quicksort,
yaml,code_008,claude-3-opus,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/rockskip/search_test.go,src/rockskip/search_test.go,"func TestSearchTimeout(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	state := map[string][]string{}
	gitAdd(t, repoDir, state, ""a.txt"", ""sym1a/n"")

	out, err := gitserver.CreateGitCommand(repoDir, ""git"", ""rev-parse"", ""HEAD"").CombinedOutput()
	require.NoError(t, err, string(out))
	commit := string(bytes.TrimSpace(out))

	ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)
	defer cancel()

	_, err = s.Search(ctx, search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(commit),
		Query:    ""sym"",
		Timeout:  time.Second,
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""Processing symbols is taking a while, try again later"")
}

func TestSearchRepoLocked(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	_, err = s.Search(context.Background(), search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(""deadbeef""),
		Query:    ""sym"",
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""deletion in progress"")
}

func TestSearchInvalidCommit(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	_, err = s.Search(context.Background(), search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(""deadbeef""),
		Query:    ""sym"",
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""indexing failed, check server logs"")
}
",false,true,true,src/rockskip/search.go,go,Rockskip search,
yaml,code_006,claude-3-opus,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/add.test.ts,src/add.test.ts,"import { add } from './add'
import { describe, it, expect } from 'vitest'

describe('add', () => {
  it('should add two positive numbers', () => {
    expect(add(2, 3)).toBe(5)
  })

  it('should add two negative numbers', () => {
    expect(add(-2, -3)).toBe(-5)
  })

  it('should add a positive and a negative number', () => {
    expect(add(2, -3)).toBe(-1)
  })

  it('should add zero to a number', () => {
    expect(add(0, 5)).toBe(5)
    expect(add(5, 0)).toBe(5)
  })
})
",false,true,,src/add.ts,typescript,Adder with sub context,
yaml,code_001,claude-3-opus,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/add.test.ts,src/__tests__/add.test.ts,"import { add } from './add'

describe('add', () => {
  it('should add two positive numbers', () => {
    expect(add(2, 3)).toBe(5)
  })

  it('should add two negative numbers', () => {
    expect(add(-2, -3)).toBe(-5)
  })

  it('should add a positive and a negative number', () => {
    expect(add(2, -3)).toBe(-1)
  })

  it('should add zero to a number', () => {
    expect(add(0, 5)).toBe(5)
    expect(add(5, 0)).toBe(5)
  })

  it('should handle large numbers', () => {
    expect(add(Number.MAX_SAFE_INTEGER, 1)).toBe(Number.MAX_SAFE_INTEGER + 1)
  })
})
",true,false,,src/add.ts,typescript,Adder,/src/add.test.ts:5:4 2304 Cannot find name 'expect'.
yaml,code_007,claude-3-opus,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/rockskip/server_test.go,src/rockskip/server_test.go,"func TestRuler(t *testing.T) {
	tests := []struct {
		name     string
		input    int
		expected int
	}{
		{
			name:     ""zero"",
			input:    0,
			expected: 0,
		},
		{
			name:     ""negative"",
			input:    -5,
			expected: 0,
		},
		{
			name:     ""positive_even"",
			input:    8,
			expected: 3,
		},
		{
			name:     ""positive_odd"",
			input:    7,
			expected: 0,
		},
		{
			name:     ""max_int"",
			input:    int(^uint(0) >> 1),
			expected: 0,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			actual := ruler(test.input)
			if actual != test.expected {
				t.Errorf(""ruler(%d) = %d, expected %d"", test.input, actual, test.expected)
			}
		})
	}
}
",false,true,,src/rockskip/server.go,go,Rockskip ruler function,
yaml,code_002,claude-3.5-sonnet,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/UniqueContext.test.ts,src/UniqueContext.test.ts,"import { ContextItem, RangeData } from '@sourcegraph/cody-shared'

describe('UniqueContext', () => {
  test('should import ContextItem and RangeData types', () => {
    expect(ContextItem).toBeDefined()
    expect(RangeData).toBeDefined()
  })

  test('ContextItem should have expected properties', () => {
    const contextItem: ContextItem = {
      title: 'Test Context',
      description: 'This is a test context item',
      url: 'https://example.com',
      ranges: [
        {
          start: { line: 1, character: 0 },
          end: { line: 1, character: 10 },
        },
      ],
    }

    expect(contextItem).toHaveProperty('title', 'Test Context')
    expect(contextItem).toHaveProperty('description', 'This is a test context item')
    expect(contextItem).toHaveProperty('url', 'https://example.com')
    expect(contextItem.ranges).toHaveLength(1)
    expect(contextItem.ranges[0]).toMatchObject({
      start: { line: 1, character: 0 },
      end: { line: 1, character: 10 },
    })
  })

  test('RangeData should have expected properties', () => {
    const rangeData: RangeData = {
      start: { line: 2, character: 5 },
      end: { line: 3, character: 10 },
    }

    expect(rangeData).toHaveProperty('start')
    expect(rangeData.start).toMatchObject({ line: 2, character: 5 })
    expect(rangeData).toHaveProperty('end')
    expect(rangeData.end).toMatchObject({ line: 3, character: 10 })
  })
})
",true,false,,src/UniqueContext.ts,typescript,Unique Context,"/src/UniqueContext.test.ts:1:39 2307 Cannot find module '@sourcegraph/cody-shared' or its corresponding type declarations.

/src/UniqueContext.test.ts:3:0 2582 Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.

/src/UniqueContext.test.ts:4:2 2582 Cannot find name 'test'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.

/src/UniqueContext.test.ts:5:4 2304 Cannot find name 'expect'."
yaml,code_004,claude-3.5-sonnet,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/test/java/LevenshteinTest.java,src/test/java/LevenshteinTest.java,"import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LevenshteinTest {

    @Test
    void testEmptyStrings() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate("""", """");
        assertEquals(0, distance);
    }

    @Test
    void testIdenticalStrings() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""hello"");
        assertEquals(0, distance);
    }

    @Test
    void testDifferentLengths() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""world"");
        assertEquals(4, distance);
    }

    @Test
    void testSingleCharacterDifference() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""hello"", ""hallo"");
        assertEquals(1, distance);
    }

    @Test
    void testMultipleCharacterDifferences() {
        Levenshtein levenshtein = new Levenshtein();
        int distance = levenshtein.calculate(""kitten"", ""sitting"");
        assertEquals(3, distance);
    }

    @Test
    void testNullInput() {
        Levenshtein levenshtein = new Levenshtein();
        assertThrows(NullPointerException.class, () -> levenshtein.calculate(null, ""hello""));
        assertThrows(NullPointerException.class, () -> levenshtein.calculate(""hello"", null));
    }
}
",false,true,,src/main/java/Levenshtein.java,java,Levenshtein Distance,
yaml,code_003,claude-3.5-sonnet,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,quicksort_test.go,quicksort_test.go,"package main

import (
    ""reflect""
    ""testing""
)

func TestQuickSort(t *testing.T) {
    tests := []struct {
        name     string
        input    []int
        expected []int
    }{
        {""Empty slice"", []int{}, []int{}},
        {""Single element"", []int{1}, []int{1}},
        {""Sorted slice"", []int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4, 5}},
        {""Reverse sorted"", []int{5, 4, 3, 2, 1}, []int{1, 2, 3, 4, 5}},
        {""Duplicates"", []int{3, 1, 4, 1, 5, 9, 2, 6, 5}, []int{1, 1, 2, 3, 4, 5, 5, 6, 9}},
    }

    for _, test := range tests {
        t.Run(test.name, func(t *testing.T) {
            result := QuickSort(test.input)
            if !reflect.DeepEqual(result, test.expected) {
                t.Errorf(""QuickSort(%v) = %v, expected %v"", test.input, result, test.expected)
            }
        })
    }
}
",false,true,,quicksort.go,go,Quicksort,
yaml,code_008,claude-3.5-sonnet,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/rockskip/search_test.go,src/rockskip/search_test.go,"func TestSearchTimeout(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	state := map[string][]string{}
	gitAdd(t, repoDir, state, ""a.txt"", ""sym1a/n"")

	out, err := gitserver.CreateGitCommand(repoDir, ""git"", ""rev-parse"", ""HEAD"").CombinedOutput()
	require.NoError(t, err, string(out))
	commit := string(bytes.TrimSpace(out))

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Millisecond)
	defer cancel()

	_, err = s.Search(ctx, search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(commit),
		Query:    ""sym"",
		Timeout:  time.Second,
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""Processing symbols is taking a while, try again later"")
}

func TestSearchIndexingInProgress(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	state := map[string][]string{}
	gitAdd(t, repoDir, state, ""a.txt"", ""sym1a/n"")

	out, err := gitserver.CreateGitCommand(repoDir, ""git"", ""rev-parse"", ""HEAD"").CombinedOutput()
	require.NoError(t, err, string(out))
	commit := string(bytes.TrimSpace(out))

	s.status.threadIdToThreadStatus[""indexing""] = &observation.ThreadStatus{
		Name:     ""indexing "" + repo,
		Estimate: 10 * time.Minute,
		Start:    time.Now(),
	}

	_, err = s.Search(context.Background(), search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(commit),
		Query:    ""sym"",
		Timeout:  time.Second,
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""Still processing symbols"")
}

func TestSearchRepoLocked(t *testing.T) {
	repo, repoDir := gitserver.MakeGitRepositoryAndReturnDir(t)
	gitRun(t, repoDir, ""config"", ""user.email"", ""test@sourcegraph.com"")

	git, err := newSubprocessGit(t, repoDir)
	require.NoError(t, err)
	defer git.Close()

	db, s := mockService(t, git)
	defer db.Close()

	state := map[string][]string{}
	gitAdd(t, repoDir, state, ""a.txt"", ""sym1a/n"")

	out, err := gitserver.CreateGitCommand(repoDir, ""git"", ""rev-parse"", ""HEAD"").CombinedOutput()
	require.NoError(t, err, string(out))
	commit := string(bytes.TrimSpace(out))

	_, err = db.Exec(""LOCK TABLE rockskip_repos IN ACCESS EXCLUSIVE MODE"")
	require.NoError(t, err)

	_, err = s.Search(context.Background(), search.SymbolsParameters{
		Repo:     repo,
		CommitID: api.CommitID(commit),
		Query:    ""sym"",
	})
	require.Error(t, err)
	require.Contains(t, err.Error(), ""deletion in progress"")
}
",false,true,true,src/rockskip/search.go,go,Rockskip search,
yaml,code_006,claude-3.5-sonnet,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/add.test.ts,src/add.test.ts,"import { add } from './add'
import { describe, it, expect } from 'vitest'

describe('add', () => {
  it('should add two positive numbers', () => {
    expect(add(2, 3)).toBe(5)
  })

  it('should add two negative numbers', () => {
    expect(add(-2, -3)).toBe(-5)
  })

  it('should add a positive and a negative number', () => {
    expect(add(2, -3)).toBe(-1)
  })

  it('should add zero to a number', () => {
    expect(add(0, 5)).toBe(5)
    expect(add(5, 0)).toBe(5)
  })

  it('should handle large numbers', () => {
    expect(add(Number.MAX_SAFE_INTEGER, 1)).toBe(Number.MAX_SAFE_INTEGER + 1)
  })
})
",false,true,,src/add.ts,typescript,Adder with sub context,
yaml,code_001,claude-3.5-sonnet,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/add.test.ts,src/__tests__/add.test.ts,"import { add } from './add'

describe('add', () => {
  it('should add two positive numbers', () => {
    expect(add(2, 3)).toBe(5)
  })

  it('should add two negative numbers', () => {
    expect(add(-2, -3)).toBe(-5)
  })

  it('should add a positive and a negative number', () => {
    expect(add(2, -3)).toBe(-1)
  })

  it('should add zero to a number', () => {
    expect(add(0, 5)).toBe(5)
    expect(add(5, 0)).toBe(5)
  })

  it('should handle large numbers', () => {
    expect(add(Number.MAX_SAFE_INTEGER, 1)).toBe(Number.MAX_SAFE_INTEGER + 1)
  })
})
",true,false,,src/add.ts,typescript,Adder,/src/add.test.ts:5:4 2304 Cannot find name 'expect'.
yaml,code_007,claude-3.5-sonnet,unit-test,test.yaml,57d54daef0c32f970b93ce7ee99eb890e2ac12c8,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,src/rockskip/server_test.go,src/rockskip/server_test.go,"func TestRuler(t *testing.T) {
	tests := []struct {
		name     string
		input    int
		expected int
	}{
		{
			name:     ""zero"",
			input:    0,
			expected: 0,
		},
		{
			name:     ""negative"",
			input:    -5,
			expected: 0,
		},
		{
			name:     ""positive_even"",
			input:    8,
			expected: 3,
		},
		{
			name:     ""positive_odd"",
			input:    7,
			expected: 0,
		},
		{
			name:     ""max_int"",
			input:    int(^uint(0) >> 1),
			expected: 0,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			actual := ruler(test.input)
			if actual != test.expected {
				t.Errorf(""ruler(%d) = %d, expected %d"", test.input, actual, test.expected)
			}
		})
	}
}
",false,true,,src/rockskip/server.go,go,Rockskip ruler function,
