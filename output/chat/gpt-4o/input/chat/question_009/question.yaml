 question: describe my code
# CHAT
# CHAT_QUESTION describe my code

# CHAT_REPLY Your codebase appears to be a sophisticated search engine designed for source code, named Zoekt. Hereâ€™s a high-level overview:
# CHAT_REPLY 
# CHAT_REPLY ### Purpose
# CHAT_REPLY Zoekt is a fast text search engine optimized for searching through source code. It supports indexing and searching across various repositories and provides both a web interface and a JSON API for querying.
# CHAT_REPLY 
# CHAT_REPLY ### Key Components
# CHAT_REPLY 
# CHAT_REPLY 1. **Indexing**:
# CHAT_REPLY    - **Directory Indexing**: Indexes files in a directory.
# CHAT_REPLY    - **Git Repository Indexing**: Indexes branches of a Git repository.
# CHAT_REPLY    - **Repo Repositories Indexing**: Indexes repositories mirrored from a source like Gitiles.
# CHAT_REPLY 
# CHAT_REPLY 2. **Searching**:
# CHAT_REPLY    - **Web Interface**: A web server that provides a user-friendly interface for searching.
# CHAT_REPLY    - **JSON API**: Allows programmatic access to search results via HTTP GET requests.
# CHAT_REPLY    - **CLI**: Command-line interface for performing searches directly from the terminal.
# CHAT_REPLY 
# CHAT_REPLY 3. **Search Service**:
# CHAT_REPLY    - Manages the mirroring and indexing of repositories.
# CHAT_REPLY    - Handles fetching new data and cleaning up log files.
# CHAT_REPLY 
# CHAT_REPLY 4. **Symbol Search**:
# CHAT_REPLY    - Integration with Universal Ctags to improve search ranking and support for symbol regex queries.
# CHAT_REPLY 
# CHAT_REPLY ### Code Structure
# CHAT_REPLY 
# CHAT_REPLY 1. **eval.go**:
# CHAT_REPLY    - Contains the core logic for evaluating and simplifying search queries.
# CHAT_REPLY    - Implements the main search function that processes queries, matches documents, and gathers results.
# CHAT_REPLY 
# CHAT_REPLY 2. **limit.go**:
# CHAT_REPLY    - Provides functionality to sort and truncate search results based on specified limits.
# CHAT_REPLY    - Implements mechanisms to enforce document and match display limits.
# CHAT_REPLY 
# CHAT_REPLY 3. **external-services.ts**:
# CHAT_REPLY    - Appears to be part of a VSCode extension or integration, possibly for interacting with external services.
# CHAT_REPLY 
# CHAT_REPLY ### Fork Details
# CHAT_REPLY This version of Zoekt is a fork maintained by Sourcegraph, with several enhancements over the original Google version, including:
# CHAT_REPLY - Sourcegraph-specific indexing commands.
# CHAT_REPLY - API exposure via a custom RPC framework.
# CHAT_REPLY - Improved query primitives and support for symbol data in search results.
# CHAT_REPLY 
# CHAT_REPLY ### Usage
# CHAT_REPLY - **Installation**: Instructions for installing the necessary binaries using `go get` and `go install`.
# CHAT_REPLY - **Configuration**: Examples of systemd unit files for running the web server as a service.
# CHAT_REPLY - **Execution**: Commands for indexing directories, Git repositories, and mirrored repositories, as well as starting the web server and search service.
# CHAT_REPLY 
# CHAT_REPLY ### Acknowledgements
# CHAT_REPLY The project credits Han-Wen Nienhuys for creating Zoekt and acknowledges contributions from others in developing and maintaining the tool.
# CHAT_REPLY 
# CHAT_REPLY This overview should give you a good understanding of the structure and functionality of your codebase. If you need more detailed guidance on specific parts, feel free to ask!

 class: codebase onboarding
 files:
   - ../mocked/codebase_context/README.md
   - ../mocked/codebase_context/eval.go
   - ../mocked/codebase_context/limit.go
   - ../mocked/enhanced_context/vscode/src/external-services.ts
 
