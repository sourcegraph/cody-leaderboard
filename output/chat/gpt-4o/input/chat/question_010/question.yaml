 question: \@zoekt describe my code.
# CHAT
# CHAT_QUESTION \@zoekt describe my code.

# CHAT_REPLY Your codebase includes various components related to code intelligence, rate limiting, and an agent for interacting with Cody. Here's a brief overview:
# CHAT_REPLY 
# CHAT_REPLY 1. **TypeScript Interfaces**:
# CHAT_REPLY    - `CodeIntelligence`: Represents code intelligence data with a list of symbols.
# CHAT_REPLY    - `Squirrel`: An interface for a code intelligence API that provides symbol information for a given file.
# CHAT_REPLY    - `Animal`: Represents an animal with a name and age.
# CHAT_REPLY 
# CHAT_REPLY 2. **Go Packages**:
# CHAT_REPLY    - `agent`: Contains the definition for an `Agent`.
# CHAT_REPLY    - `actor` (in `limit.go`): Implements rate limiting functionality, including concurrency limits and rate limit evaluation. It includes structures and methods for managing rate limits, concurrency limits, and handling errors related to rate limits.
# CHAT_REPLY 
# CHAT_REPLY 3. **README**:
# CHAT_REPLY    - Describes the `@sourcegraph/cody-agent` package, which implements a JSON-RPC server to interact with Cody via stdout/stdin. This package is intended for use by non-ECMAScript clients such as JetBrains and NeoVim plugins.
# CHAT_REPLY 
# CHAT_REPLY Overall, your codebase integrates code intelligence features, rate limiting mechanisms, and an agent for Cody interactions, providing a robust foundation for managing and interacting with code intelligence data and enforcing rate limits.

 class: codebase onboarding
 files:
   - ../mocked/enhanced_context/squirrel.ts
   - ../mocked/enhanced_context/animal.ts
   - ../mocked/enhanced_context/agent.go
   - ../mocked/enhanced_context/limit.go
   - ../mocked/enhanced_context/README.md
 
