 question: \@zoekt describe my code.
# CHAT
# CHAT_QUESTION \@zoekt describe my code.

# CHAT_REPLY Your codebase includes several components related to code intelligence, rate limiting, and an agent for interacting with Cody. Here's a high-level overview:
# CHAT_REPLY 
# CHAT_REPLY 1. **TypeScript Interfaces**:
# CHAT_REPLY    - `squirrel.ts` defines interfaces for code intelligence, including `CodeIntelligence` and `Squirrel`, which provide symbol information for files.
# CHAT_REPLY    - `animal.ts` defines a basic `Animal` interface with properties for name and age.
# CHAT_REPLY 
# CHAT_REPLY 2. **Go Packages**:
# CHAT_REPLY    - `agent.go` introduces an `Agent` package, likely related to the Cody Agent mentioned in the README.
# CHAT_REPLY    - `limit.go` in the `actor` package includes detailed rate limiting logic, such as defining rate limits, concurrency limits, and handling rate limit errors.
# CHAT_REPLY 
# CHAT_REPLY 3. **README**:
# CHAT_REPLY    - The `README.md` provides an overview of the `@sourcegraph/cody-agent` package, which implements a JSON-RPC server for interacting with Cody, intended for use by non-ECMAScript clients like JetBrains and NeoVim plugins.
# CHAT_REPLY 
# CHAT_REPLY Overall, your codebase is well-structured to support code intelligence features, rate limiting mechanisms, and integration with Cody through a JSON-RPC server.

 class: codebase onboarding
 files:
   - ../mocked/enhanced_context/squirrel.ts
   - ../mocked/enhanced_context/animal.ts
   - ../mocked/enhanced_context/agent.go
   - ../mocked/enhanced_context/limit.go
   - ../mocked/enhanced_context/README.md
 
