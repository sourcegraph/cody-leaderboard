 question: what does @limit.go do?
# CHAT
# CHAT_REPLY The `limit.go` file defines structures and functions related to rate limiting and concurrency control for actors in the context of Cody Gateway. Here's a breakdown of its main components and functionality:
# CHAT_REPLY 
# CHAT_REPLY 1. **RateLimit Structure**:
# CHAT_REPLY    - Defines the rate limit configuration for an actor, including allowed models, limit, interval, and concurrency settings.
# CHAT_REPLY    - `NewRateLimitWithPercentageConcurrency`: A constructor function that creates a `RateLimit` instance with concurrency limits based on a percentage of the daily limit.
# CHAT_REPLY    - `IsValid`: A method to check if the rate limit configuration is valid.
# CHAT_REPLY    - `EvaluateAllowedModels`: A method to determine the intersection of a master allowlist and the actor's allowlist.
# CHAT_REPLY 
# CHAT_REPLY 2. **Concurrency Limiter**:
# CHAT_REPLY    - `concurrencyLimiter`: A structure that implements concurrency control using a Redis store.
# CHAT_REPLY    - `TryAcquire`: A method to attempt to acquire a concurrency slot. If the limit is exceeded, it returns an error with retry information.
# CHAT_REPLY    - `Usage`: A method to get the current usage of the concurrency limit.
# CHAT_REPLY 
# CHAT_REPLY 3. **Error Handling**:
# CHAT_REPLY    - `ErrConcurrencyLimitExceeded`: A custom error type for when the concurrency limit is exceeded. It includes methods to generate error messages and write HTTP responses.
# CHAT_REPLY 
# CHAT_REPLY 4. **Update on Error Limiter**:
# CHAT_REPLY    - `updateOnErrorLimiter`: A structure that wraps another limiter and attempts to update the actor's access if certain errors occur.
# CHAT_REPLY    - `TryAcquire`: A method that tries to acquire a slot and updates the actor's access if needed.
# CHAT_REPLY    - `Usage`: A method to get the current usage of the wrapped limiter.
# CHAT_REPLY 
# CHAT_REPLY Overall, the file provides mechanisms to enforce rate limits and concurrency controls, handle errors, and update actor access as needed.

 files:
   - ../mocked_context/limit.go
 
