 question: Explain the logic in src/agent.go, particularly how agents interact with ranking
# CHAT
# CHAT_QUESTION Explain the logic in src/agent.go, particularly how agents interact with ranking

# CHAT_REPLY ```go:src/agent.go
# CHAT_REPLY package main
# CHAT_REPLY 
# CHAT_REPLY import (
# CHAT_REPLY 	"context"
# CHAT_REPLY 	"fmt"
# CHAT_REPLY 	"io"
# CHAT_REPLY 	"log"
# CHAT_REPLY 	"net/http"
# CHAT_REPLY 	"net/url"
# CHAT_REPLY 	"os"
# CHAT_REPLY 	"os/signal"
# CHAT_REPLY 	"runtime"
# CHAT_REPLY 	"strings"
# CHAT_REPLY 	"sync"
# CHAT_REPLY 	"syscall"
# CHAT_REPLY 	"time"
# CHAT_REPLY 
# CHAT_REPLY 	"github.com/sourcegraph/zoekt/query"
# CHAT_REPLY 	"github.com/sourcegraph/zoekt/search"
# CHAT_REPLY 	"github.com/sourcegraph/zoekt/web"
# CHAT_REPLY 	"github.com/sourcegraph/zoekt/web/api"
# CHAT_REPLY )
# CHAT_REPLY 
# CHAT_REPLY // Agent is a single instance of a Zoekt search server.
# CHAT_REPLY type Agent struct {
# CHAT_REPLY 	// Index is the index to search.
# CHAT_REPLY 	Index *search.Index
# CHAT_REPLY 
# CHAT_REPLY 	// WebServer is the web server.
# CHAT_REPLY 	WebServer *web.Server
# CHAT_REPLY 
# CHAT_REPLY 	// Shutdown is a channel that is closed when the agent should shutdown.
# CHAT_REPLY 	Shutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// ShutdownWait is a channel that is closed when the agent has shut down.
# CHAT_REPLY 	ShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// Stats is a channel that receives stats from the agent.
# CHAT_REPLY 	Stats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// StatsMu protects the stats field.
# CHAT_REPLY 	StatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// Stats is a map of stats.
# CHAT_REPLY 	stats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// Ctx is the context for the agent.
# CHAT_REPLY 	Ctx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// Cancel is the cancel function for the agent's context.
# CHAT_REPLY 	Cancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorConfig is the configuration for the mirror.
# CHAT_REPLY 	MirrorConfig *MirrorConfig
# CHAT_REPLY 
# CHAT_REPLY 	// Mirror is the mirror.
# CHAT_REPLY 	Mirror *Mirror
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorMu protects the Mirror field.
# CHAT_REPLY 	MirrorMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdown is a channel that is closed when the mirror should shutdown.
# CHAT_REPLY 	MirrorShutdown chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorShutdownWait is a channel that is closed when the mirror has shut down.
# CHAT_REPLY 	MirrorShutdownWait chan struct{}
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a channel that receives stats from the mirror.
# CHAT_REPLY 	MirrorStats chan *api.Stats
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStatsMu protects the MirrorStats field.
# CHAT_REPLY 	MirrorStatsMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStats is a map of stats.
# CHAT_REPLY 	mirrorStats map[string]int64
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCtx is the context for the mirror.
# CHAT_REPLY 	MirrorCtx context.Context
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorCancel is the cancel function for the mirror's context.
# CHAT_REPLY 	MirrorCancel context.CancelFunc
# CHAT_REPLY 
# CHAT_REPLY 	// MirrorStarted is true if the mirror has been started.
# CHAT_REPLY 	MirrorStarted bool
# CHAT_REPLY 
# CHAT_REPLY 	//
# CHAT_REPLY ```

# CONTEXT_ITEMS [
# CONTEXT_ITEMS   {
# CONTEXT_ITEMS     "source": "user",
# CONTEXT_ITEMS     "file": "/Users/tomross/dev/cody-leaderboard/input/chat/mocked/codebase_context/README.md:undefined-undefined",
# CONTEXT_ITEMS     "content": "\n    \"Zoekt, en gij zult spinazie eten\" - Jan Eertink\n\n    (\"seek, and ye shall eat spinach\" - My primary school teacher)\n\nThis is a fast text search engine, intended for use with source\ncode. (Pronunciation: roughly as you would pronounce \"zooked\" in English)\n\n**Note:** This is a [Sourcegraph](https://github.com/sourcegraph/zoekt) fork\nof [github.com/google/zoekt](https://github.com/google/zoekt). It is now the\nmain maintained source of Zoekt.\n\n# INSTRUCTIONS\n\n## Downloading\n\n    go get github.com/sourcegraph/zoekt/\n\n## Indexing\n\n### Directory\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-index\n    $GOPATH/bin/zoekt-index .\n\n### Git repository\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-git-index\n    $GOPATH/bin/zoekt-git-index -branches master,stable-1.4 -prefix origin/ .\n\n### Repo repositories\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-{repo-index,mirror-gitiles}\n    zoekt-mirror-gitiles -dest ~/repos/ https://gfiber.googlesource.com\n    zoekt-repo-index \\\n        -name gfiber \\\n        -base_url https://gfiber.googlesource.com/ \\\n        -manifest_repo ~/repos/gfiber.googlesource.com/manifests.git \\\n        -repo_cache ~/repos \\\n        -manifest_rev_prefix=refs/heads/ --rev_prefix= \\\n        master:default_unrestricted.xml\n\n## Searching\n\n### Web interface\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-webserver\n    $GOPATH/bin/zoekt-webserver -listen :6070\n\n### JSON API\n\nYou can retrieve search results as JSON by sending a GET request to zoekt-webserver.\n\n    curl --get \\\n        --url \"http://localhost:6070/search\" \\\n        --data-urlencode \"q=ngram f:READ\" \\\n        --data-urlencode \"num=50\" \\\n        --data-urlencode \"format=json\"\n\nThe response data is a JSON object. You can refer to [web.ApiSearchResult](https://sourcegraph.com/github.com/sourcegraph/zoekt@6b1df4f8a3d7b34f13ba0cafd8e1a9b3fc728cf0/-/blob/web/api.go?L23:6&subtree=true) to learn about the structure of the object.\n\n### CLI\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt\n    $GOPATH/bin/zoekt 'ngram f:READ'\n\n## Installation\nA more organized installation on a Linux server should use a systemd unit file,\neg.\n\n    [Unit]\n    Description=zoekt webserver\n\n    [Service]\n    ExecStart=/zoekt/bin/zoekt-webserver -index /zoekt/index -listen :443  --ssl_cert /zoekt/etc/cert.pem   --ssl_key /zoekt/etc/key.pem\n    Restart=always\n\n    [Install]\n    WantedBy=default.target\n\n\n# SEARCH SERVICE\n\nZoekt comes with a small service management program:\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-indexserver\n\n    cat << EOF > config.json\n    [{\"GithubUser\": \"username\"},\n     {\"GithubOrg\": \"org\"},\n     {\"GitilesURL\": \"https://gerrit.googlesource.com\", \"Name\": \"zoekt\" }\n    ]\n    EOF\n\n    $GOPATH/bin/zoekt-indexserver -mirror_config config.json\n\nThis will mirror all repos under 'github.com/username', 'github.com/org', as\nwell as the 'zoekt' repository. It will index the repositories.\n\nIt takes care of fetching and indexing new data and cleaning up logfiles.\n\nThe webserver can be started from a standard service management framework, such\nas systemd.\n\n\n# SYMBOL SEARCH\n\nIt is recommended to install [Universal\nctags](https://github.com/universal-ctags/ctags) to improve\nranking. See [here](doc/ctags.md) for more information.\n\n\n# ACKNOWLEDGEMENTS\n\nThanks to Han-Wen Nienhuys for creating Zoekt. Thanks to Alexander Neubeck for\ncoming up with this idea, and helping Han-Wen Nienhuys flesh it out.\n\n\n# FORK DETAILS\n\nOriginally this fork contained some changes that do not make sense to upstream\nand or have not yet been upstreamed. However, this is now the defacto source\nfor Zoekt. This section will remain for historical reasons and contains\noutdated information. It can be removed once the dust settles on moving from\ngoogle/zoekt to sourcegraph/zoekt. Differences:\n\n- [zoekt-sourcegraph-indexserver](cmd/zoekt-sourcegraph-indexserver/main.go)\n  is a Sourcegraph specific command which indexes all enabled repositories on\n  Sourcegraph, as well as keeping the indexes up to date.\n- We have exposed the API via\n  [keegancsmith/rpc](https://github.com/keegancsmith/rpc) (a fork of `net/rpc`\n  which supports cancellation).\n- Query primitive `BranchesRepos` to efficiently specify a set of repositories to\n  search.\n- Allow empty shard directories on startup. Needed when starting a fresh\n  instance which hasn't indexed anything yet.\n- We can return symbol/ctag data in results. Additionally we can run symbol regex queries.\n- We search shards in order of repo name and ignore shard ranking.\n- Other minor changes.\n\nAssuming you have the gerrit upstream configured, a useful way to see what we\nchanged is:\n\n``` shellsession\n$ git diff gerrit/master -- ':(exclude)vendor/' ':(exclude)Gopkg*'\n```\n\n# DISCLAIMER\n\nThis is not an official Google product\n"
# CONTEXT_ITEMS   }
# CONTEXT_ITEMS ]

 class: insufficient context
 files:
   - ../mocked/codebase_context/README.md
 
