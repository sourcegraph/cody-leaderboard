 question: \@zoekt describe my code.
# CHAT
# CHAT_QUESTION \@zoekt describe my code.

# CHAT_REPLY The code you provided is part of the Sourcegraph Cody Agent, a JSON-RPC server that enables non-ECMAScript clients like JetBrains and NeoVim plugins to interact with Cody.
# CHAT_REPLY 
# CHAT_REPLY Here's a breakdown of the code:
# CHAT_REPLY 
# CHAT_REPLY **`agent.go`**
# CHAT_REPLY 
# CHAT_REPLY * Defines the `Agent` interface, which is likely the core interface for interacting with the Cody Agent.
# CHAT_REPLY * This file likely contains the implementation of the `Agent` interface, handling communication with Cody via stdout/stdin.
# CHAT_REPLY 
# CHAT_REPLY **`limit.go`**
# CHAT_REPLY 
# CHAT_REPLY * Defines a `RateLimit` struct, which represents a rate limit configuration for Cody requests.
# CHAT_REPLY * Includes methods for:
# CHAT_REPLY     * Creating a new `RateLimit` with concurrency limits.
# CHAT_REPLY     * Checking if a `RateLimit` is valid.
# CHAT_REPLY     * Evaluating allowed models based on a master allowlist and the actor's allowlist.
# CHAT_REPLY * Defines a `concurrencyLimiter` struct, which implements a concurrency limiter using Redis.
# CHAT_REPLY * Defines an `ErrConcurrencyLimitExceeded` error type, which is returned when the concurrency limit is exceeded.
# CHAT_REPLY * Defines an `updateOnErrorLimiter` struct, which updates the actor's information if a rate limit or access error occurs.
# CHAT_REPLY 
# CHAT_REPLY **`animal.ts`**
# CHAT_REPLY 
# CHAT_REPLY * Defines an `Animal` interface, which represents an animal with a name and age.
# CHAT_REPLY 
# CHAT_REPLY **`squirrel.ts`**
# CHAT_REPLY 
# CHAT_REPLY * Defines a `CodeIntelligence` interface, which likely represents code intelligence data.
# CHAT_REPLY * Defines a `Squirrel` interface, which represents a code intelligence API.
# CHAT_REPLY 
# CHAT_REPLY **`README.md`**
# CHAT_REPLY 
# CHAT_REPLY * Provides a brief overview of the Cody Agent package and its purpose.
# CHAT_REPLY 
# CHAT_REPLY **Overall, the codebase appears to be focused on:**
# CHAT_REPLY 
# CHAT_REPLY * Implementing a JSON-RPC server for Cody interaction.
# CHAT_REPLY * Enforcing rate limits and concurrency limits for Cody requests.
# CHAT_REPLY * Providing a way for non-ECMAScript clients to interact with Cody.
# CHAT_REPLY 
# CHAT_REPLY **Zoekt's Description:**
# CHAT_REPLY 
# CHAT_REPLY Zoekt is a code search engine, so it would likely focus on the code intelligence aspects of the codebase. It might describe the `CodeIntelligence` and `Squirrel` interfaces, and potentially highlight the use of Zoekt within the Cody Agent.
# CHAT_REPLY 
# CHAT_REPLY **Note:**
# CHAT_REPLY 
# CHAT_REPLY The codebase is incomplete, and there are likely other files and components involved in the Cody Agent. This analysis is based on the provided code snippets.

 class: codebase onboarding
 files:
   - ../mocked/enhanced_context/squirrel.ts
   - ../mocked/enhanced_context/animal.ts
   - ../mocked/enhanced_context/agent.go
   - ../mocked/enhanced_context/limit.go
   - ../mocked/enhanced_context/README.md
 
