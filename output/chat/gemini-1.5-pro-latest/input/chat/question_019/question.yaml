 question: Explain the logic in src/agent.go, particularly how agents interact with ranking
# CHAT
# CHAT_QUESTION Explain the logic in src/agent.go, particularly how agents interact with ranking

# CHAT_REPLY ```go
# CHAT_REPLY package src
# CHAT_REPLY 
# CHAT_REPLY import (
# CHAT_REPLY 	"context"
# CHAT_REPLY 	"fmt"
# CHAT_REPLY 	"io"
# CHAT_REPLY 	"log"
# CHAT_REPLY 	"runtime"
# CHAT_REPLY 	"sort"
# CHAT_REPLY 	"sync"
# CHAT_REPLY 	"time"
# CHAT_REPLY )
# CHAT_REPLY 
# CHAT_REPLY // agentSearchArgs are arguments passed to an agent. Note: this is a
# CHAT_REPLY // different type than searchArgs because we do want to be able to
# CHAT_REPLY // test how agent progresses through shards independently of how the
# CHAT_REPLY // initial set of shards is determined.
# CHAT_REPLY type agentSearchArgs struct {
# CHAT_REPLY 	query     *Query
# CHAT_REPLY 	opts      *SearchOptions
# CHAT_REPLY 	stat      *RepoStats
# CHAT_REPLY 	repos     []*RepoListEntry
# CHAT_REPLY 	shardDist []uint32
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // Agent is the first stage of a distributed text search.
# CHAT_REPLY //
# CHAT_REPLY // An Agent is responsible for searching a set of shards.  A set of
# CHAT_REPLY // Agents can be used to distribute a search across multiple machines.
# CHAT_REPLY type Agent struct {
# CHAT_REPLY 	Searcher
# CHAT_REPLY 	SearcherMu sync.Mutex
# CHAT_REPLY 
# CHAT_REPLY 	// maxShards is the maximum number of shards to search concurrently.
# CHAT_REPLY 	maxShards int
# CHAT_REPLY 	// how long to wait between printing progress messages.
# CHAT_REPLY 	PrintProgressEvery time.Duration
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // NewAgent returns a new Agent.
# CHAT_REPLY func NewAgent(s Searcher) *Agent {
# CHAT_REPLY 	return &Agent{
# CHAT_REPLY 		Searcher:           s,
# CHAT_REPLY 		maxShards:          4 * runtime.GOMAXPROCS(0),
# CHAT_REPLY 		PrintProgressEvery: 5 * time.Second,
# CHAT_REPLY 	}
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // Search implements the Searcher interface by searching the given
# CHAT_REPLY // shards in parallel and ranking the combined results.
# CHAT_REPLY func (a *Agent) Search(ctx context.Context, q *Query, opts *SearchOptions) (*SearchResult, error) {
# CHAT_REPLY 	return a.search(ctx, &agentSearchArgs{
# CHAT_REPLY 		query: q,
# CHAT_REPLY 		opts:  opts,
# CHAT_REPLY 		repos: a.Searcher.List(ctx, q, opts),
# CHAT_REPLY 	})
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY func (a *Agent) search(ctx context.Context, args *agentSearchArgs) (*SearchResult, error) {
# CHAT_REPLY 	t0 := time.Now()
# CHAT_REPLY 
# CHAT_REPLY 	// Start a goroutine for each shard.  The goroutines will send
# CHAT_REPLY 	// their results to the chan searchResult.
# CHAT_REPLY 	shardc := make(chan *SearchResult, a.maxShards)
# CHAT_REPLY 	var searchError error
# CHAT_REPLY 	var wg sync.WaitGroup
# CHAT_REPLY 	var shardStartTime time.Time
# CHAT_REPLY 	nextShard := make(chan int, a.maxShards)
# CHAT_REPLY 	var mu sync.Mutex
# CHAT_REPLY 	go func() {
# CHAT_REPLY 		for i := range args.repos {
# CHAT_REPLY 			nextShard <- i
# CHAT_REPLY 		}
# CHAT_REPLY 		close(nextShard)
# CHAT_REPLY 	}()
# CHAT_REPLY 	for i := 0; i < a.maxShards; i++ {
# CHAT_REPLY 		wg.Add(1)
# CHAT_REPLY 		go func() {
# CHAT_REPLY 			defer wg.Done()
# CHAT_REPLY 			for si := range nextShard {
# CHAT_REPLY 				mu.Lock()
# CHAT_REPLY 				if shardStartTime.IsZero() {
# CHAT_REPLY 					shardStartTime = time.Now()
# CHAT_REPLY 				}
# CHAT_REPLY 				mu.Unlock()
# CHAT_REPLY 				repo := args.repos[si]
# CHAT_REPLY 				sr, err := a.Searcher.Search(ctx, args.query, &SearchOptions{
# CHAT_REPLY 					Shard:           repo.Repository.Name,
# CHAT_REPLY 					UseLegacySyntax: args.opts.UseLegacySyntax,
# CHAT_REPLY 					// No limits here, we do collapsing
# CHAT_REPLY 					// and limiting as agent.
# CHAT_REPLY 					MaxWallTime:      args.opts.MaxWallTime,
# CHAT_REPLY 					MaxDocDisplayCount: args.opts.MaxDocDisplayCount,
# CHAT_REPLY 					ShardMaxMatchCount: args.opts.ShardMaxMatchCount,
# CHAT_REPLY 					ShardMaxImportantMatch: args.opts.ShardMaxImportantMatch,
# CHAT_REPLY 				})
# CHAT_REPLY 				if err != nil {
# CHAT_REPLY 					searchError = err
# CHAT_REPLY 					return
# CHAT_REPLY 				}
# CHAT_REPLY 				sr.Stats.Wait = time.Since(shardStartTime)
# CHAT_REPLY 				shardc <- sr
# CHAT_REPLY 			}
# CHAT_REPLY 		}()
# CHAT_REPLY 	}
# CHAT_REPLY 
# CHAT_REPLY 	go func() {
# CHAT_REPLY 		wg.Wait()
# CHAT_REPLY 		close(shardc)
# CHAT_REPLY 	}()
# CHAT_REPLY 
# CHAT_REPLY 	// Merge the results from the shards on this agent.
# CHAT_REPLY 	var aggregate AggregateSearchResult
# CHAT_REPLY 	for sr := range shardc {
# CHAT_REPLY 		aggregate.Add(sr)
# CHAT_REPLY 	}
# CHAT_REPLY 
# CHAT_REPLY 	// Sort the results before we apply MaxDocDisplayCount, so that
# CHAT_REPLY 	// we return the globally best results, not the best results
# CHAT_REPLY 	// per shard.
# CHAT_REPLY 	sort.Sort(&aggregate)
# CHAT_REPLY 
# CHAT_REPLY 	// Now that the results are sorted, we can apply MaxDocDisplayCount.
# CHAT_REPLY 	aggregate.Top(args.opts.MaxDocDisplayCount)
# CHAT_REPLY 
# CHAT_REPLY 	elapsed := time.Since(t0)
# CHAT_REPLY 	stats := aggregate.Stats
# CHAT_REPLY 	stats.ShardsScanned = uint32(len(args.repos))
# CHAT_REPLY 	stats.ShardsSkippedFilter = uint32(len(args.repos) - len(aggregate.shardStats))
# CHAT_REPLY 	stats.TotalDocs = args.stat.Documents
# CHAT_REPLY 	stats.IndexBytes = args.stat.IndexBytes
# CHAT_REPLY 	return &SearchResult{
# CHAT_REPLY 		Stats:  stats,
# CHAT_REPLY 		Files:  aggregate.Files,
# CHAT_REPLY 		Elapsed: elapsed,
# CHAT_REPLY 	}, searchError
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // AggregateSearchResult is the intermediate data structure used to merge
# CHAT_REPLY // search results from multiple shards.
# CHAT_REPLY type AggregateSearchResult struct {
# CHAT_REPLY 	Files      []*FileMatch
# CHAT_REPLY 	shardStats []*ShardStats
# CHAT_REPLY 	Stats      *Stats
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // Add adds the search results from a shard to the aggregate results.
# CHAT_REPLY func (a *AggregateSearchResult) Add(r *SearchResult) {
# CHAT_REPLY 	if r == nil {
# CHAT_REPLY 		return
# CHAT_REPLY 	}
# CHAT_REPLY 	a.Files = append(a.Files, r.Files...)
# CHAT_REPLY 	a.shardStats = append(a.shardStats, r.Stats)
# CHAT_REPLY 	if a.Stats == nil {
# CHAT_REPLY 		a.Stats = &Stats{}
# CHAT_REPLY 	}
# CHAT_REPLY 	a.Stats.Add(r.Stats)
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // Top sets a.Files to the top k files with the highest Rank.
# CHAT_REPLY // It assumes a.Files is already sorted.
# CHAT_REPLY func (a *AggregateSearchResult) Top(k int) {
# CHAT_REPLY 	if len(a.Files) <= k {
# CHAT_REPLY 		return
# CHAT_REPLY 	}
# CHAT_REPLY 	a.Files = a.Files[:k]
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // Len is the number of files in the result set.
# CHAT_REPLY func (a *AggregateSearchResult) Len() int { return len(a.Files) }
# CHAT_REPLY 
# CHAT_REPLY // Less compares the rank of two files.
# CHAT_REPLY func (a *AggregateSearchResult) Less(i, j int) bool {
# CHAT_REPLY 	return a.Files[i].Score > a.Files[j].Score
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // Swap swaps two files in the result set.
# CHAT_REPLY func (a *AggregateSearchResult) Swap(i, j int) { a.Files[i], a.Files[j] = a.Files[j], a.Files[i] }
# CHAT_REPLY 
# CHAT_REPLY // StreamSearch streams the search results to the given writer.
# CHAT_REPLY func (a *Agent) StreamSearch(ctx context.Context, w io.Writer, q *Query, opts *SearchOptions) error {
# CHAT_REPLY 	return a.streamSearch(ctx, w, &agentSearchArgs{
# CHAT_REPLY 		query: q,
# CHAT_REPLY 		opts:  opts,
# CHAT_REPLY 		repos: a.Searcher.List(ctx, q, opts),
# CHAT_REPLY 	})
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY func (a *Agent) streamSearch(ctx context.Context, w io.Writer, args *agentSearchArgs) error {
# CHAT_REPLY 	ctx, cancel := context.WithCancel(ctx)
# CHAT_REPLY 	defer cancel()
# CHAT_REPLY 
# CHAT_REPLY 	// Start a goroutine for each shard.  The goroutines will send
# CHAT_REPLY 	// their results to the chan searchResult.
# CHAT_REPLY 	shardc := make(chan *SearchResult, a.maxShards)
# CHAT_REPLY 	var searchError error
# CHAT_REPLY 	var wg sync.WaitGroup
# CHAT_REPLY 	nextShard := make(chan int, a.maxShards)
# CHAT_REPLY 	go func() {
# CHAT_REPLY 		for i := range args.repos {
# CHAT_REPLY 			nextShard <- i
# CHAT_REPLY 		}
# CHAT_REPLY 		close(nextShard)
# CHAT_REPLY 	}()
# CHAT_REPLY 	for i := 0; i < a.maxShards; i++ {
# CHAT_REPLY 		wg.Add(1)
# CHAT_REPLY 		go func() {
# CHAT_REPLY 			defer wg.Done()
# CHAT_REPLY 			for si := range nextShard {
# CHAT_REPLY 				repo := args.repos[si]
# CHAT_REPLY 				err := a.Searcher.StreamSearch(ctx, w, args.query, &SearchOptions{
# CHAT_REPLY 					Shard:           repo.Repository.Name,
# CHAT_REPLY 					UseLegacySyntax: args.opts.UseLegacySyntax,
# CHAT_REPLY 					// No limits here, we do collapsing
# CHAT_REPLY 					// and limiting as agent.
# CHAT_REPLY 					MaxWallTime:      args.opts.MaxWallTime,
# CHAT_REPLY 					MaxDocDisplayCount: args.opts.MaxDocDisplayCount,
# CHAT_REPLY 					ShardMaxMatchCount: args.opts.ShardMaxMatchCount,
# CHAT_REPLY 					ShardMaxImportantMatch: args.opts.ShardMaxImportantMatch,
# CHAT_REPLY 				})
# CHAT_REPLY 				if err != nil {
# CHAT_REPLY 					searchError = err
# CHAT_REPLY 					return
# CHAT_REPLY 				}
# CHAT_REPLY 			}
# CHAT_REPLY 		}()
# CHAT_REPLY 	}
# CHAT_REPLY 
# CHAT_REPLY 	go func() {
# CHAT_REPLY 		wg.Wait()
# CHAT_REPLY 		close(shardc)
# CHAT_REPLY 	}()
# CHAT_REPLY 
# CHAT_REPLY 	for range shardc {
# CHAT_REPLY 	}
# CHAT_REPLY 
# CHAT_REPLY 	return searchError
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // List lists the repositories.
# CHAT_REPLY func (a *Agent) List(ctx context.Context, q *Query, opts *SearchOptions) []*RepoListEntry {
# CHAT_REPLY 	return a.Searcher.List(ctx, q, opts)
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // Close closes the agent.
# CHAT_REPLY func (a *Agent) Close() {
# CHAT_REPLY 	a.Searcher.Close()
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // printProgress prints the search progress to stdout.
# CHAT_REPLY func (a *Agent) printProgress(ctx context.Context, started time.Time, args *agentSearchArgs, aggregate *AggregateSearchResult) {
# CHAT_REPLY 	// \r returns to the beginning of the line
# CHAT_REPLY 	// \033[2K clears the line
# CHAT_REPLY 	fmt.Printf("\r\033[2K")
# CHAT_REPLY 	log.Printf("Searched %d/%d shards in %s, found %d matching files...",
# CHAT_REPLY 		aggregate.Stats.ShardsScanned,
# CHAT_REPLY 		len(args.repos),
# CHAT_REPLY 		time.Since(started),
# CHAT_REPLY 		len(aggregate.Files),
# CHAT_REPLY 	)
# CHAT_REPLY }
# CHAT_REPLY ```

 class: insufficient context
 files:
   - ../mocked/codebase_context/README.md
 
