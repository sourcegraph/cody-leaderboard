 question: what does @limit.go do?
# CHAT
# CHAT_QUESTION what does @limit.go do?

# CHAT_REPLY The file `limit.go` within the `zoekt` package appears to handle truncating search results based on user-defined limits. 
# CHAT_REPLY 
# CHAT_REPLY Here's a breakdown:
# CHAT_REPLY 
# CHAT_REPLY - **`SortAndTruncateFiles`**: This function takes a list of file matches and search options. It sorts the files and then applies truncation based on the provided options.
# CHAT_REPLY 
# CHAT_REPLY - **`DisplayTruncator`**: This is a stateful function type that enforces document and match display limits. It takes a list of file matches and returns a potentially truncated list, along with a boolean indicating if more results are available.
# CHAT_REPLY 
# CHAT_REPLY - **`NewDisplayTruncator`**: This function creates a `DisplayTruncator` based on the provided search options. It determines if any limits are set and returns the appropriate truncator function.
# CHAT_REPLY 
# CHAT_REPLY - **`limitMatches`**: This function applies match limits to a list of file matches. It uses either `limitChunkMatches` or `limitLineMatches` based on the `chunkMatches` option.
# CHAT_REPLY 
# CHAT_REPLY - **`limitChunkMatches`**: This function limits the number of `ChunkMatches` within each `FileMatch`. It truncates the `Ranges`, `SymbolInfo`, and `Content` fields accordingly.
# CHAT_REPLY 
# CHAT_REPLY - **`limitLineMatches`**: This function limits the number of `LineMatches` within each `FileMatch` by truncating the `LineFragments` field.
# CHAT_REPLY 
# CHAT_REPLY In essence, this code ensures that search results presented to the user adhere to specified display limits, preventing overwhelming outputs and potentially improving performance.

 files:
   - ../mocked/codebase_context/limit.go
 
