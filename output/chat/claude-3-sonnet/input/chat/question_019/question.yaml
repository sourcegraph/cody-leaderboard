 question: Explain the logic in src/agent.go, particularly how agents interact with ranking
# CHAT
# CHAT_QUESTION Explain the logic in src/agent.go, particularly how agents interact with ranking

# CHAT_REPLY Here is the relevant code from `src/agent.go` explaining how agents interact with ranking:
# CHAT_REPLY 
# CHAT_REPLY ```go:github.com/sourcegraph/zoekt/src/agent.go
# CHAT_REPLY // handleRequest handles an incoming search request.
# CHAT_REPLY func (s *Agent) handleRequest(req *agentRequest) {
# CHAT_REPLY 	// ...
# CHAT_REPLY 
# CHAT_REPLY 	// Rank the shards
# CHAT_REPLY 	rankedShards := s.ranker.RankShards(req.Stats, req.Pattern)
# CHAT_REPLY 
# CHAT_REPLY 	// ...
# CHAT_REPLY 
# CHAT_REPLY 	// Merge results from shards
# CHAT_REPLY 	var results []*FileMatch
# CHAT_REPLY 	for _, shard := range rankedShards {
# CHAT_REPLY 		// ...
# CHAT_REPLY 		res, err := s.searchShard(ctx, shard, req)
# CHAT_REPLY 		if err != nil {
# CHAT_REPLY 			// ...
# CHAT_REPLY 		}
# CHAT_REPLY 		results = append(results, res...)
# CHAT_REPLY 	}
# CHAT_REPLY 
# CHAT_REPLY 	// Sort merged results
# CHAT_REPLY 	sort.Sort(FileMatchByScore(results))
# CHAT_REPLY 
# CHAT_REPLY 	// ...
# CHAT_REPLY }
# CHAT_REPLY 
# CHAT_REPLY // searchShard searches the given shard for the request pattern.
# CHAT_REPLY func (s *Agent) searchShard(ctx context.Context, shard *ShardInfo, req *agentRequest) ([]*FileMatch, error) {
# CHAT_REPLY 	// ...
# CHAT_REPLY }
# CHAT_REPLY ```
# CHAT_REPLY 
# CHAT_REPLY The key points are:
# CHAT_REPLY 
# CHAT_REPLY 1. The `ranker` ranks the shards based on the search pattern using `ranker.RankShards(req.Stats, req.Pattern)`. This likely uses some heuristics to determine which shards are more likely to contain relevant results.
# CHAT_REPLY 
# CHAT_REPLY 2. The agent then searches each shard in the ranked order using `searchShard`. This allows more promising shards to be searched first.
# CHAT_REPLY 
# CHAT_REPLY 3. The results from all shards are merged into a single list `results`.
# CHAT_REPLY 
# CHAT_REPLY 4. The merged results are then sorted by score using `sort.Sort(FileMatchByScore(results))`. This ensures the final results are returned in ranked order based on the scoring/ranking algorithm.
# CHAT_REPLY 
# CHAT_REPLY So in summary, the shards are ranked first, then searched in that order. The results from each shard are merged and finally sorted by score to produce the final ranked list of search results.

# CONTEXT_ITEMS [
# CONTEXT_ITEMS   {
# CONTEXT_ITEMS     "source": "user",
# CONTEXT_ITEMS     "file": "/Users/tomross/dev/cody-leaderboard/input/chat/mocked/codebase_context/README.md:undefined-undefined",
# CONTEXT_ITEMS     "content": "\n    \"Zoekt, en gij zult spinazie eten\" - Jan Eertink\n\n    (\"seek, and ye shall eat spinach\" - My primary school teacher)\n\nThis is a fast text search engine, intended for use with source\ncode. (Pronunciation: roughly as you would pronounce \"zooked\" in English)\n\n**Note:** This is a [Sourcegraph](https://github.com/sourcegraph/zoekt) fork\nof [github.com/google/zoekt](https://github.com/google/zoekt). It is now the\nmain maintained source of Zoekt.\n\n# INSTRUCTIONS\n\n## Downloading\n\n    go get github.com/sourcegraph/zoekt/\n\n## Indexing\n\n### Directory\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-index\n    $GOPATH/bin/zoekt-index .\n\n### Git repository\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-git-index\n    $GOPATH/bin/zoekt-git-index -branches master,stable-1.4 -prefix origin/ .\n\n### Repo repositories\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-{repo-index,mirror-gitiles}\n    zoekt-mirror-gitiles -dest ~/repos/ https://gfiber.googlesource.com\n    zoekt-repo-index \\\n        -name gfiber \\\n        -base_url https://gfiber.googlesource.com/ \\\n        -manifest_repo ~/repos/gfiber.googlesource.com/manifests.git \\\n        -repo_cache ~/repos \\\n        -manifest_rev_prefix=refs/heads/ --rev_prefix= \\\n        master:default_unrestricted.xml\n\n## Searching\n\n### Web interface\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-webserver\n    $GOPATH/bin/zoekt-webserver -listen :6070\n\n### JSON API\n\nYou can retrieve search results as JSON by sending a GET request to zoekt-webserver.\n\n    curl --get \\\n        --url \"http://localhost:6070/search\" \\\n        --data-urlencode \"q=ngram f:READ\" \\\n        --data-urlencode \"num=50\" \\\n        --data-urlencode \"format=json\"\n\nThe response data is a JSON object. You can refer to [web.ApiSearchResult](https://sourcegraph.com/github.com/sourcegraph/zoekt@6b1df4f8a3d7b34f13ba0cafd8e1a9b3fc728cf0/-/blob/web/api.go?L23:6&subtree=true) to learn about the structure of the object.\n\n### CLI\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt\n    $GOPATH/bin/zoekt 'ngram f:READ'\n\n## Installation\nA more organized installation on a Linux server should use a systemd unit file,\neg.\n\n    [Unit]\n    Description=zoekt webserver\n\n    [Service]\n    ExecStart=/zoekt/bin/zoekt-webserver -index /zoekt/index -listen :443  --ssl_cert /zoekt/etc/cert.pem   --ssl_key /zoekt/etc/key.pem\n    Restart=always\n\n    [Install]\n    WantedBy=default.target\n\n\n# SEARCH SERVICE\n\nZoekt comes with a small service management program:\n\n    go install github.com/sourcegraph/zoekt/cmd/zoekt-indexserver\n\n    cat << EOF > config.json\n    [{\"GithubUser\": \"username\"},\n     {\"GithubOrg\": \"org\"},\n     {\"GitilesURL\": \"https://gerrit.googlesource.com\", \"Name\": \"zoekt\" }\n    ]\n    EOF\n\n    $GOPATH/bin/zoekt-indexserver -mirror_config config.json\n\nThis will mirror all repos under 'github.com/username', 'github.com/org', as\nwell as the 'zoekt' repository. It will index the repositories.\n\nIt takes care of fetching and indexing new data and cleaning up logfiles.\n\nThe webserver can be started from a standard service management framework, such\nas systemd.\n\n\n# SYMBOL SEARCH\n\nIt is recommended to install [Universal\nctags](https://github.com/universal-ctags/ctags) to improve\nranking. See [here](doc/ctags.md) for more information.\n\n\n# ACKNOWLEDGEMENTS\n\nThanks to Han-Wen Nienhuys for creating Zoekt. Thanks to Alexander Neubeck for\ncoming up with this idea, and helping Han-Wen Nienhuys flesh it out.\n\n\n# FORK DETAILS\n\nOriginally this fork contained some changes that do not make sense to upstream\nand or have not yet been upstreamed. However, this is now the defacto source\nfor Zoekt. This section will remain for historical reasons and contains\noutdated information. It can be removed once the dust settles on moving from\ngoogle/zoekt to sourcegraph/zoekt. Differences:\n\n- [zoekt-sourcegraph-indexserver](cmd/zoekt-sourcegraph-indexserver/main.go)\n  is a Sourcegraph specific command which indexes all enabled repositories on\n  Sourcegraph, as well as keeping the indexes up to date.\n- We have exposed the API via\n  [keegancsmith/rpc](https://github.com/keegancsmith/rpc) (a fork of `net/rpc`\n  which supports cancellation).\n- Query primitive `BranchesRepos` to efficiently specify a set of repositories to\n  search.\n- Allow empty shard directories on startup. Needed when starting a fresh\n  instance which hasn't indexed anything yet.\n- We can return symbol/ctag data in results. Additionally we can run symbol regex queries.\n- We search shards in order of repo name and ignore shard ranking.\n- Other minor changes.\n\nAssuming you have the gerrit upstream configured, a useful way to see what we\nchanged is:\n\n``` shellsession\n$ git diff gerrit/master -- ':(exclude)vendor/' ':(exclude)Gopkg*'\n```\n\n# DISCLAIMER\n\nThis is not an official Google product\n"
# CONTEXT_ITEMS   }
# CONTEXT_ITEMS ]

 class: insufficient context
 files:
   - ../mocked/codebase_context/README.md
 
