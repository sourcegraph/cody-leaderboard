LANGUAGEID,WORKSPACE,FIXTURE,STRATEGY,FILEPATH,REVISION,MULTILINE,COMPLETION_INTENT,AUTOCOMPLETE_KIND,RANGE_START_LINE,RANGE_START_CHARACTER,RANGE_END_LINE,RANGE_END_CHARACTER,RESULT_TIMEOUT,RESULT_ERROR,RESULT_EMPTY,RESULT_EXACT,RESULT_TYPECHECKS,RESULT_PARSES,RESULT_TEXT,RESULT_CHAR_COUNT,RESULT_NON_INSERT_PATCH,EDIT_DIFF,CHAT_REPLY,CHAT_QUESTION,FIX_AFTER_DIAGNOSTIC,FIX_BEFORE_DIAGNOSTIC,LLM_JUDGE_SCORE,LLM_JUDGE_REASONING,CONCISENESS_SCORE,HEDGES,PROVIDER_IDENTIFIER,PROVIDER_MODEL,STOP_REASON,CONTEXT_BFG_RETRIEVED_COUNT,CONTEXT_BFG_SUGGESTED_COUNT,CONTEXT_BFG_DURATION_MS,EVENT,TEST_FILE,TEST_GENERATED,TEST_MATCHES_EXPECTED_TEST_FILE,TEST_HAS_TYPESCRIPT_ERRORS
yaml,unit-test,gpt-4o,unit-test,/Users/james/projects/cody-leaderboard/input/unit-test/code_001/src/add.ts,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,untitled:/Users/james/projects/cody-leaderboard/input/unit-test/code_001/src/__tests__/add.test.ts,"import { add } from '../add'

describe('add', () => {
  it('should add two positive numbers correctly', () => {
    expect(add(2, 3)).toBe(5)
  })

  it('should handle zero as an input', () => {
    expect(add(0, 5)).toBe(5)
    expect(add(10, 0)).toBe(10)
  })

  it('should add negative numbers correctly', () => {
    expect(add(-2, -3)).toBe(-5)
  })

  it('should handle positive and negative number combinations', () => {
    expect(add(-5, 10)).toBe(5)
    expect(add(7, -3)).toBe(4)
  })

  it('should return zero when adding inverse numbers', () => {
    expect(add(5, -5)).toBe(0)
  })

  it('should handle decimal numbers', () => {
    expect(add(1.5, 2.5)).toBeCloseTo(4)
  })

  it('should handle large numbers', () => {
    expect(add(1000000, 2000000)).toBe(3000000)
  })
})
",false,false
yaml,unit-test,gpt-4o,unit-test,/Users/james/projects/cody-leaderboard/input/unit-test/code_002/src/UniqueContext.ts,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,untitled:/Users/james/projects/cody-leaderboard/input/unit-test/code_002/src/__tests__/UniqueContext.test.ts,"import { describe, expect, test } from '@jest/globals'
import { ContextItem, RangeData } from '@sourcegraph/cody-shared'

describe('UniqueContext', () => {
  test('ContextItem type is defined', () => {
    const contextItem: ContextItem = {
      type: 'file',
      uri: 'file:///path/to/file.ts',
      content: 'const example = 42',
    }
    expect(contextItem).toBeDefined()
    expect(contextItem.type).toBe('file')
    expect(contextItem.uri).toBe('file:///path/to/file.ts')
    expect(contextItem.content).toBe('const example = 42')
  })

  test('RangeData type is defined', () => {
    const rangeData: RangeData = {
      startLine: 1,
      endLine: 5,
      startCharacter: 0,
      endCharacter: 10,
    }
    expect(rangeData).toBeDefined()
    expect(rangeData.startLine).toBe(1)
    expect(rangeData.endLine).toBe(5)
    expect(rangeData.startCharacter).toBe(0)
    expect(rangeData.endCharacter).toBe(10)
  })

  test('ContextItem with range property', () => {
    const contextItemWithRange: ContextItem = {
      type: 'file',
      uri: 'file:///path/to/file.ts',
      content: 'const example = 42',
      range: {
        startLine: 1,
        endLine: 1,
        startCharacter: 0,
        endCharacter: 19,
      },
    }
    expect(contextItemWithRange.range).toBeDefined()
    expect(contextItemWithRange.range?.startLine).toBe(1)
    expect(contextItemWithRange.range?.endLine).toBe(1)
    expect(contextItemWithRange.range?.startCharacter).toBe(0)
    expect(contextItemWithRange.range?.endCharacter).toBe(19)
  })
})
",false,false
yaml,unit-test,gpt-4o,unit-test,/Users/james/projects/cody-leaderboard/input/unit-test/code_003/quicksort.go,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,untitled:/Users/james/projects/cody-leaderboard/input/unit-test/code_003/quicksort_test.go,"package main

import (
	""testing""
	""reflect""
)

func TestQuicksort(t *testing.T) {
	tests := []struct {
		name     string
		input    []int
		expected []int
	}{
		{
			name:     ""Empty slice"",
			input:    []int{},
			expected: []int{},
		},
		{
			name:     ""Single element"",
			input:    []int{1},
			expected: []int{1},
		},
		{
			name:     ""Already sorted"",
			input:    []int{1, 2, 3, 4, 5},
			expected: []int{1, 2, 3, 4, 5},
		},
		{
			name:     ""Reverse sorted"",
			input:    []int{5, 4, 3, 2, 1},
			expected: []int{1, 2, 3, 4, 5},
		},
		{
			name:     ""Random order"",
			input:    []int{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5},
			expected: []int{1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9},
		},
		{
			name:     ""Duplicate elements"",
			input:    []int{3, 3, 3, 1, 1, 2, 2},
			expected: []int{1, 1, 2, 2, 3, 3, 3},
		},
		{
			name:     ""Negative numbers"",
			input:    []int{-5, -2, -8, 0, -1, 3, -3},
			expected: []int{-8, -5, -3, -2, -1, 0, 3},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := quicksort(tt.input)
			if !reflect.DeepEqual(result, tt.expected) {
				t.Errorf(""quicksort() = %v, want %v"", result, tt.expected)
			}
		})
	}
}
",false,false
yaml,unit-test,gpt-4o,unit-test,/Users/james/projects/cody-leaderboard/input/unit-test/code_004/Levenshtein.java,5bbcf0dc61ce147e29a384a110e6db090f883e83,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,untitled:/Users/james/projects/cody-leaderboard/input/unit-test/src/test/java/LevenshteinTest.java,"import org.junit.Test;
import static org.junit.Assert.*;

public class LevenshteinTest {

    @Test
    public void testLevenshteinDistanceEmptyStrings() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(0, levenshtein.distance("""", """"));
    }

    @Test
    public void testLevenshteinDistanceOneEmptyString() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(3, levenshtein.distance(""abc"", """"));
        assertEquals(3, levenshtein.distance("""", ""abc""));
    }

    @Test
    public void testLevenshteinDistanceEqualStrings() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(0, levenshtein.distance(""hello"", ""hello""));
    }

    @Test
    public void testLevenshteinDistanceOneCharDifference() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(1, levenshtein.distance(""kitten"", ""sitten""));
        assertEquals(1, levenshtein.distance(""sittin"", ""sitting""));
    }

    @Test
    public void testLevenshteinDistanceMultipleChanges() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(3, levenshtein.distance(""kitten"", ""sitting""));
        assertEquals(3, levenshtein.distance(""saturday"", ""sunday""));
    }

    @Test
    public void testLevenshteinDistanceCaseSensitivity() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(3, levenshtein.distance(""book"", ""BOOK""));
    }

    @Test
    public void testLevenshteinDistanceWithNumbers() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(2, levenshtein.distance(""a1b2c3"", ""a2b3c4""));
    }

    @Test
    public void testLevenshteinDistanceWithSpecialCharacters() {
        Levenshtein levenshtein = new Levenshtein();
        assertEquals(2, levenshtein.distance(""hello!"", ""hello?""));
    }
}
",false,false
