LANGUAGEID,WORKSPACE,FIXTURE,STRATEGY,FILEPATH,REVISION,MULTILINE,COMPLETION_INTENT,AUTOCOMPLETE_KIND,RANGE_START_LINE,RANGE_START_CHARACTER,RANGE_END_LINE,RANGE_END_CHARACTER,RESULT_TIMEOUT,RESULT_ERROR,RESULT_EMPTY,RESULT_EXACT,RESULT_TYPECHECKS,RESULT_PARSES,RESULT_TEXT,RESULT_CHAR_COUNT,RESULT_NON_INSERT_PATCH,EDIT_DIFF,CHAT_REPLY,CHAT_QUESTION,FIX_AFTER_DIAGNOSTIC,FIX_BEFORE_DIAGNOSTIC,LLM_JUDGE_SCORE,LLM_JUDGE_REASONING,CONCISENESS_SCORE,HEDGES,PROVIDER_IDENTIFIER,PROVIDER_MODEL,STOP_REASON,CONTEXT_BFG_RETRIEVED_COUNT,CONTEXT_BFG_SUGGESTED_COUNT,CONTEXT_BFG_DURATION_MS,EVENT,TEST_FILE,TEST_EXPECTED_FILE,TEST_GENERATED,TEST_MATCHES_EXPECTED_TEST_FILE,TEST_HAS_TYPESCRIPT_ERRORS,TEST_USED_EXPECTED_TEST_FRAMEWORK,TEST_USED_CORRECT_APPEND_OPERATION,TEST_INPUT_FILE,TEST_LANGUAGE,TEST_NAME,TEST_DIAGNOSTICS
yaml,code_009,gpt-4o,unit-test,test.yaml,cc13deae0e4ed2cfc041554dddd840b7ad7d95df,,,,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,zoekt/score_test.go,zoekt/score_test.go,"import (
	""testing""
)

func TestScoreFilesUsingBM25(t *testing.T) {
	d := &indexData{
		boundaries: []uint32{0, 100, 200, 300},
	}

	fileMatches := []FileMatch{
		{},
		{},
		{},
	}

	tfs := []termFrequency{
		{
			doc: 0,
			tf: map[string]int{
				""foo"": 2,
				""bar"": 1,
			},
		},
		{
			doc: 1,
			tf: map[string]int{
				""foo"": 1,
				""baz"": 3,
			},
		},
		{
			doc: 2,
			tf: map[string]int{
				""bar"": 4,
			},
		},
	}

	df := termDocumentFrequency{
		""foo"": 2,
		""bar"": 2,
		""baz"": 1,
	}

	opts := &SearchOptions{
		DebugScore: true,
	}

	d.scoreFilesUsingBM25(fileMatches, tfs, df, opts)

	// Check scores
	if fileMatches[0].Score == 0 {
		t.Errorf(""Expected non-zero score for first file"")
	}
	if fileMatches[1].Score == 0 {
		t.Errorf(""Expected non-zero score for second file"")
	}
	if fileMatches[2].Score == 0 {
		t.Errorf(""Expected non-zero score for third file"")
	}

	// Check debug output
	if fileMatches[0].Debug == """" {
		t.Errorf(""Expected debug output for first file"")
	}
	if fileMatches[1].Debug == """" {
		t.Errorf(""Expected debug output for second file"")
	}
	if fileMatches[2].Debug == """" {
		t.Errorf(""Expected debug output for third file"")
	}
}

func TestScoreFilesUsingBM25_ZeroAverageFileLength(t *testing.T) {
	d := &indexData{
		boundaries: []uint32{0, 0, 0},
	}

	fileMatches := []FileMatch{
		{},
		{},
		{},
	}

	tfs := []termFrequency{
		{
			doc: 0,
			tf: map[string]int{
				""foo"": 1,
			},
		},
		{
			doc: 1,
			tf: map[string]int{},
		},
		{
			doc: 2,
			tf: map[string]int{
				""bar"": 2,
			},
		},
	}

	df := termDocumentFrequency{
		""foo"": 1,
		""bar"": 1,
	}

	opts := &SearchOptions{}

	d.scoreFilesUsingBM25(fileMatches, tfs, df, opts)

	// Check that scores are non-zero
	if fileMatches[0].Score == 0 {
		t.Errorf(""Expected non-zero score for first file"")
	}
	if fileMatches[2].Score == 0 {
		t.Errorf(""Expected non-zero score for third file"")
	}
}
",true,false,true,,zoekt/score.go,go,Zoekt BM25 scoring,
