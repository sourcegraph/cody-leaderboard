 question: Where do we trigger custom actions?
# CHAT
# CHAT_QUESTION Where do we trigger custom actions?

# CHAT_REPLY Custom actions are triggered in multiple places within the codebase:
# CHAT_REPLY 
# CHAT_REPLY 1. In the sidebar, as indicated by the `cody.menu.custom-commands` command in the package.json file.
# CHAT_REPLY 
# CHAT_REPLY 2. Through the `cody.action.command` command, which can be executed from various sources, including the sidebar and editor context menu.
# CHAT_REPLY 
# CHAT_REPLY 3. Via custom keybindings that users can set up for their custom commands, as described in the keyboard.md documentation.
# CHAT_REPLY 
# CHAT_REPLY 4. The CustomCommandsManager class handles loading, building, and maintaining custom commands retrieved from cody.json files.
# CHAT_REPLY 
# CHAT_REPLY 5. Custom commands are also registered as VS Code commands, allowing them to be triggered through the command palette or other VS Code interfaces.
# CHAT_REPLY 
# CHAT_REPLY 6. The SidebarCommands.ts file shows that custom commands can be triggered from the sidebar with a specific logging action.
# CHAT_REPLY 
# CHAT_REPLY These implementations provide multiple entry points for users to access and execute their custom Cody commands.

# CONTEXT_ITEMS [{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/explain.ts:7-21","content":"    public provideCodeActions(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        context: vscode.CodeActionContext\n    ): vscode.CodeAction[] {\n        const diagnostics = context.diagnostics.filter(\n            diagnostic =>\n                diagnostic.severity === vscode.DiagnosticSeverity.Error ||\n                diagnostic.severity === vscode.DiagnosticSeverity.Warning\n        )\n        if (diagnostics.length === 0) {\n            return []\n        }\n        return [this.createCommandCodeAction(document.uri, diagnostics)]\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/doc/keyboard.md:0-18","content":"# Keyboard Shortcuts\n\nCody offers an extensive set of default key bindings (keyboard shortcuts) to make it easy for you to perform various actions using the keyboard. You can easily update these bindings in the `Keyboard Shortcuts editor`, which you can access by clicking on the **Keyboard Shortcuts** icon in the Cody sidebar under `**SETTINGS AND SUPPORT**`.\n\nThis feature can be particularly useful if the default key bindings conflict with your current or preferred key bindings.\n\n## Keyboard Shortcuts Editor\n\nThe Keyboard Shortcuts editor allows you to easily update the key bindings for any of the Cody commands. To open the `Keyboard Shortcuts Editor`:\n1. Open the Cody sidebar and expand the `**SETTINGS AND SUPPORT**` section.\n2. Click on the `**Keyboard Shortcuts**` icon.\n\n## Custom Commands\n\n![editor](images/keyboard_editor.png)\n\nYou have the option to assign key bindings (keyboard shortcuts) to individual custom commands:\n1. In the Cody sidebar under `**SETTINGS AND SUPPORT**`, click on the `**Keyboard Shortcuts**` icon to open the Keyboard Shortcuts editor.\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/BaseEditor.tsx:77-101","content":"                                    />\n                                </div>\n                            </div>\n                        }\n                        placeholder={<div className={styles.placeholder}>{placeholder}</div>}\n                        ErrorBoundary={LexicalErrorBoundary}\n                    />\n                    <HistoryPlugin />\n                    <OnChangePlugin onChange={onChange} ignoreSelectionChange={true} />\n                    <MentionsPlugin />\n                    <CodeHighlightPlugin />\n                    <AutoFocusPlugin />\n                    {onFocusChange && <OnFocusChangePlugin onFocusChange={onFocusChange} />}\n                    {editorRef && <EditorRefPlugin editorRef={editorRef} />}\n                    <KeyboardEventPlugin\n                        onKeyDown={onKeyDown}\n                        onEnterKey={onEnterKey}\n                        onEscapeKey={onEscapeKey}\n                    />\n                </LexicalComposer>\n            </div>\n        </div>\n    )\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:851-862","content":"- Assign requestID to each Code Block actions. [pull/1586](https://github.com/sourcegraph/cody/pull/1586)\n- [Internal Experimental] Chat: New Experimental Chat View that appears in the editor panel instead of the sidebar when `cody.experimental.chatPanel` is enabled. [pull/1509](https://github.com/sourcegraph/cody/pull/1509)\n\n### Fixed\n\n- Commands: Smart selection not working on the first line of code. [pull/1508](https://github.com/sourcegraph/cody/pull/1508)\n- Chat: Aborted messages are now saved to local chat history properly. [pull/1550](https://github.com/sourcegraph/cody/pull/1550)\n- Adjust a completion range if it does not match the current line suffix. [pull/1507](https://github.com/sourcegraph/cody/pull/1507)\n- Chat: Fix heading styles and inline code colors. [pull/1528](https://github.com/sourcegraph/cody/pull/1528)\n- Custom Commands: Fix custom command menu not showing for a single custom command. [pull/1532](https://github.com/sourcegraph/cody/pull/1532)\n- Chat: Focus chat input on mount even when notification for version update is shown. [pull/1556](https://github.com/sourcegraph/cody/pull/1556)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/CodeActionProvider.ts:10-12","content":"interface CodeActionProviderOptions {\n    contextProvider: ContextProvider\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/main.ts:27-48","content":"import {\n    executeDocCommand,\n    executeExplainCommand,\n    executeExplainOutput,\n    executeSmellCommand,\n    executeTestCaseEditCommand,\n    executeTestChatCommand,\n    executeTestEditCommand,\n} from './commands/execute'\nimport type { CodyCommandArgs } from './commands/types'\nimport { newCodyCommandArgs } from './commands/utils/get-commands'\nimport { createInlineCompletionItemProvider } from './completions/create-inline-completion-item-provider'\nimport { getConfiguration, getFullConfig } from './configuration'\nimport { EnterpriseContextFactory } from './context/enterprise-context-factory'\nimport { EditManager } from './edit/manager'\nimport { manageDisplayPathEnvInfoForExtension } from './editor/displayPathEnvInfo'\nimport { VSCodeEditor } from './editor/vscode-editor'\nimport type { PlatformContext } from './extension.common'\nimport { configureExternalServices } from './external-services'\nimport { logDebug, logError } from './log'\nimport { getChatModelsFromConfiguration, syncModelProviders } from './models/utils'\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/document.ts:8-37","content":"    public provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] {\n        const [documentableNode] = execQueryWrapper({\n            document,\n            position: range.start,\n            queryWrapper: 'getDocumentableNode',\n        })\n        if (!documentableNode) {\n            return []\n        }\n\n        const { range: documentableRange, symbol: documentableSymbol } = documentableNode\n        if (!documentableSymbol || !documentableRange) {\n            return []\n        }\n\n        // Expand the range from the node to include the full line\n        const editorRange = new vscode.Range(\n            documentableRange.node.startPosition.row,\n            documentableRange.node.startPosition.column,\n            documentableRange.node.endPosition.row,\n            documentableRange.node.endPosition.column\n        )\n        return [\n            this.createCommandCodeAction(\n                document,\n                editorRange,\n                `Cody: Generate Documentation for ${documentableSymbol.node.text}`\n            ),\n        ]\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/HoverCommandsProvider.ts:0-28","content":"import {\n    type AuthStatus,\n    FeatureFlag,\n    PromptString,\n    featureFlagProvider,\n    isCodyIgnoredFile,\n    logDebug,\n    ps,\n} from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\nimport { executeEdit } from '../edit/execute'\nimport { fetchDocumentSymbols } from '../edit/input/utils'\nimport { telemetryService } from '../services/telemetry'\nimport { telemetryRecorder } from '../services/telemetry-v2'\nimport { logFirstEnrollmentEvent } from '../services/utils/enrollment-event'\nimport { execQueryWrapper as execQuery } from '../tree-sitter/query-sdk'\nimport { executeDocCommand } from './execute'\nimport { executeHoverChatCommand } from './execute/hover'\nimport type { CodyCommandArgs } from './types'\n\n/**\n * NOTE: Behind the feature flag `cody-hover-commands`.\n *\n * Provides clickable commands on hover and handles clicking on commands.\n */\nclass HoverCommandsProvider implements vscode.Disposable {\n    private readonly id = FeatureFlag.CodyHoverCommands\n    private disposables: vscode.Disposable[] = []\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/fixup.ts:14-45","content":"    public async provideCodeActions(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        context: vscode.CodeActionContext\n    ): Promise<vscode.CodeAction[]> {\n        const diagnostics = context.diagnostics.filter(\n            diagnostic =>\n                diagnostic.severity === vscode.DiagnosticSeverity.Error ||\n                diagnostic.severity === vscode.DiagnosticSeverity.Warning\n        )\n        if (diagnostics.length === 0) {\n            return []\n        }\n\n        // Expand range to include the full line for better fixup quality\n        const expandedRange = new vscode.Range(\n            document.lineAt(range.start.line).range.start,\n            document.lineAt(range.end.line).range.end\n        )\n\n        // TODO bee check if the diagnostics are related to imports and include import ranges instead of error lines\n        // const importDiagnostics = diagnostics.filter(diagnostic => diagnostic.message.includes('import'))\n\n        // Expand range by getting the folding range contains the target (error) area\n        const targetAreaRange = await getSmartSelection(document.uri, range.start)\n\n        const newRange = targetAreaRange\n            ? new vscode.Range(targetAreaRange.start, targetAreaRange.end)\n            : expandedRange\n        const codeAction = await this.createCommandCodeAction(document, diagnostics, newRange)\n        return [codeAction]\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:792-822","content":"          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"cody.search.index-update-all\",\n          \"when\": \"view == cody.search && cody.activated\",\n          \"group\": \"navigation@2\"\n        }\n      ],\n      \"editor/title\": [\n        {\n          \"command\": \"cody.menu.commands\",\n          \"when\": \"cody.activated && !editorReadonly && (resourceScheme == file || activeWebviewPanelId == cody.chatPanel)\",\n          \"group\": \"navigation\",\n          \"visibility\": \"visible\"\n        },\n        {\n          \"command\": \"cody.chat.panel.new\",\n          \"when\": \"activeWebviewPanelId == cody.chatPanel && cody.activated\",\n          \"group\": \"navigation@1\",\n          \"visibility\": \"visible\"\n        },\n        {\n          \"command\": \"cody.chat.history.panel\",\n          \"when\": \"activeWebviewPanelId == cody.chatPanel && cody.activated\",\n          \"group\": \"navigation@2\",\n          \"visibility\": \"visible\"\n        },\n        {\n          \"command\": \"workbench.action.moveEditorToNewWindow\",\n          \"when\": \"activeWebviewPanelId == cody.chatPanel && cody.activated && !isAuxiliaryEditorPart\",\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/test.ts:8-38","content":"    public provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] {\n        const [testableNode] = execQueryWrapper({\n            document,\n            position: range.start,\n            queryWrapper: 'getTestableNode',\n        })\n        if (!testableNode) {\n            return []\n        }\n\n        const { range: testableRange, symbol: testableSymbol } = testableNode\n        if (!testableSymbol || !testableRange) {\n            return []\n        }\n\n        // Expand the range from the node to include the full line\n        const editorRange = new vscode.Range(\n            testableRange.node.startPosition.row,\n            testableRange.node.startPosition.column,\n            testableRange.node.endPosition.row,\n            testableRange.node.endPosition.column\n        )\n\n        return [\n            this.createCommandCodeAction(\n                document,\n                editorRange,\n                `Cody: Generate Tests for ${testableSymbol.node.text}`\n            ),\n        ]\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/components/ChatActions.tsx:32-58","content":"\n    // \"⌘\" on Mac or \"Ctrl\" on other systems\n    const isMac = isMacOS()\n    const osIcon = isMac ? '⌘' : 'Ctrl+'\n\n    // The Chat Actions are conditionally rendered based on the 'when' property.\n    // The \"Cancel Edit\" action is only available when isEditing is true, meaning\n    // the user is in the process of editing a message.\n    // The \"Edit Last Message\" and \"New Chat\" actions are available when isEditing is false,\n    // indicating that the user is not editing a message and can either edit their last message\n    // or start a new chat session via these buttons that also have keyboard shortcuts associated with them.\n    const actions: {\n        name: string\n        keyLabel: string\n        keyRequiresFocus?: boolean\n        onClick?: () => void\n        focus: boolean\n        when: boolean\n    }[] = [\n        {\n            name: 'Cancel Edit',\n            keyLabel: 'ESC',\n            keyRequiresFocus: true,\n            onClick: onCancelEditClick,\n            focus: false,\n            when: isEditing && !isEmptyChat,\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/CodeActionProvider.ts:14-54","content":"export class CodeActionProvider implements vscode.Disposable {\n    private configurationChangeListener: vscode.Disposable\n    private actionProviders: vscode.Disposable[] = []\n\n    constructor(options: CodeActionProviderOptions) {\n        this.registerCodeActions(options.contextProvider.config)\n        this.configurationChangeListener = options.contextProvider.configurationChangeEvent.event(() => {\n            this.registerCodeActions(options.contextProvider.config)\n        })\n    }\n\n    private registerCodeActions(config: Omit<Config, 'codebase'>): void {\n        vscode.Disposable.from(...this.actionProviders).dispose()\n        this.actionProviders = []\n\n        if (!config.codeActions) {\n            return\n        }\n\n        this.addActionProvider(TestCodeAction)\n        this.addActionProvider(DocumentCodeAction)\n        this.addActionProvider(EditCodeAction)\n        this.addActionProvider(ExplainCodeAction)\n        this.addActionProvider(FixupCodeAction)\n    }\n\n    private addActionProvider(ActionType: {\n        new (): vscode.CodeActionProvider\n        providedCodeActionKinds: vscode.CodeActionKind[]\n    }): void {\n        const provider = vscode.languages.registerCodeActionsProvider('*', new ActionType(), {\n            providedCodeActionKinds: ActionType.providedCodeActionKinds,\n        })\n        this.actionProviders.push(provider)\n    }\n\n    public dispose(): void {\n        this.configurationChangeListener.dispose()\n        vscode.Disposable.from(...this.actionProviders).dispose()\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:123-144","content":"\n### Code Actions\n\n#### Fixing code\n\n- [ ] Deliberately break a line or section of code to trigger the IDE’s red squiggly error warning.\n- [ ] Click the Code Action (in VSC) lightbulb icon in the project file\n- [ ] Select `Ask Cody to Fix`.\n- [ ] Verify that there is a notification that \"Cody is working...\" while edits are being applied.\n- [ ] Verify that Cody automatically applies a code fix to the selected code.\n- [ ] Verify that you can see a diff view of the fix in a new tab by clicking `Show diff`.\n- [ ] Verify that you can prompt Cody to retry the command by clicking `Retry` and entering new instructions.\n- [ ] Verify that you can undo the fix by clicking `Undo`.\n- [ ] Verify that the ghost text disappears by clicking `Accept`.\n\n#### Explaining code\n\n- [ ] Deliberately break a line or section of code to trigger the IDE’s red squiggly error warning.\n- [ ] Click the Code Action lightbulb icon in the project file\n- [ ] Select `Ask Cody to Explain`.\n- [ ] Verify that Cody provides an explanation of the error in a new chat window.\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/actions/TranscriptAction.tsx:6-15","content":"interface TranscriptActionStep {\n    verb: string\n    object: string | JSX.Element\n\n    /**\n     * The SVG path of an icon.\n     * @example mdiSearchWeb\n     */\n    icon?: string\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/components/ChatActions.tsx:0-32","content":"import type React from 'react'\nimport { useEffect, useRef } from 'react'\n\nimport { isMacOS } from '@sourcegraph/cody-shared'\nimport styles from './ChatActions.module.css'\n\nexport const ChatActions: React.FunctionComponent<{\n    isWebviewActive: boolean\n    isEditing: boolean\n    isMessageInProgress: boolean\n    isEmptyChat: boolean\n    isEmptyEditorValue: boolean\n    isEditorFocused: boolean\n    onChatResetClick: () => void\n    onCancelEditClick: () => void\n    onEditLastMessageClick: () => void\n    setInputFocus: (focus: boolean) => void\n    onRestoreLastChatClick?: () => void\n}> = ({\n    isEditing,\n    isEmptyChat,\n    isEmptyEditorValue,\n    isEditorFocused,\n    isMessageInProgress,\n    onChatResetClick,\n    onCancelEditClick,\n    onEditLastMessageClick,\n    setInputFocus,\n    onRestoreLastChatClick,\n    isWebviewActive,\n}) => {\n    const buttonRef = useRef<HTMLButtonElement>(null)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/actions/TranscriptAction.tsx:17-44","content":"export const TranscriptAction: React.FunctionComponent<{\n    title: string | { verb: string; object: string; tooltip?: string }\n    steps: TranscriptActionStep[]\n    className?: string\n    onClick?: () => void\n}> = ({ title, steps, className, onClick }) => {\n    return (\n        <details className={classNames(className, styles.container)}>\n            <summary onClick={onClick} onKeyDown={onClick}>\n                {typeof title === 'string' ? (\n                    title\n                ) : (\n                    <span title={title.tooltip}>\n                        {title.verb} <strong>{title.object}</strong>\n                    </span>\n                )}\n            </summary>\n            <div className={styles.steps}>\n                {steps.map((step, index) => (\n                    // biome-ignore lint/suspicious/noArrayIndexKey: no other natural key, and this is stable/immutable\n                    <span key={index} className={styles.step}>\n                        {step.object}\n                    </span>\n                ))}\n            </div>\n        </details>\n    )\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/doc/keyboard.md:18-24","content":"2. Search for `cody.command.custom.{CUSTOM_COMMAND_NAME}`. \n3. Replace `{CUSTOM_COMMAND_NAME}` with the name or key of your custom command, for example, `cody.command.custom.commit`.\n4. Click on the `+` icon next to the command to assign a custom keybinding for your custom command.\n\nFor more information on keyboard settings in VS Code, please refer to the official documentation on [Key Bindings for Visual Studio Code](https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-shortcuts-editor).\n\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:727-760","content":"          \"when\": \"cody.activated\",\n          \"group\": \"command\"\n        },\n        {\n          \"command\": \"cody.menu.custom-commands\",\n          \"when\": \"cody.activated\",\n          \"group\": \"custom-commands\"\n        },\n        {\n          \"command\": \"cody.focus\",\n          \"when\": \"!cody.activated\",\n          \"group\": \"other\"\n        },\n        {\n          \"command\": \"cody.guardrails.debug\",\n          \"when\": \"cody.activated && config.cody.experimental.guardrails && editorHasSelection\",\n          \"group\": \"other\"\n        }\n      ],\n      \"view/title\": [\n        {\n          \"command\": \"cody.chat.panel.new\",\n          \"when\": \"view == cody.chat.tree.view && cody.activated\",\n          \"group\": \"navigation@1\"\n        },\n        {\n          \"command\": \"cody.chat.history.clear\",\n          \"when\": \"view == cody.chat.tree.view && cody.activated && cody.hasChatHistory\",\n          \"enablement\": \"cody.hasChatHistory\",\n          \"group\": \"navigation@2\"\n        },\n        {\n          \"command\": \"cody.chat.history.export\",\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:402-435","content":"      },\n      {\n        \"command\": \"cody.autocomplete.manual-trigger\",\n        \"category\": \"Cody\",\n        \"title\": \"Trigger Autocomplete at Cursor\",\n        \"when\": \"cody.activated && config.cody.autocomplete && editorHasFocus && !editorReadonly && !editorHasSelection && !inlineSuggestionsVisible\"\n      },\n      {\n        \"command\": \"cody.chat.panel.new\",\n        \"category\": \"Cody\",\n        \"title\": \"New Chat Panel\",\n        \"when\": \"cody.activated\",\n        \"group\": \"Cody\",\n        \"icon\": \"$(new-comment-icon)\"\n      },\n      {\n        \"command\": \"workbench.action.moveEditorToNewWindow\",\n        \"category\": \"Cody\",\n        \"title\": \"Pop out\",\n        \"when\": \"cody.activated\",\n        \"group\": \"Cody\",\n        \"icon\": \"$(link-external)\"\n      },\n      {\n        \"command\": \"cody.chat.tree.view.focus\",\n        \"category\": \"Cody\",\n        \"title\": \"Open Cody Sidebar\",\n        \"group\": \"Cody\",\n        \"icon\": \"$(layout-sidebar-left)\"\n      },\n      {\n        \"command\": \"cody.chat.history.edit\",\n        \"category\": \"Cody\",\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/custom-commands.ts:0-319","content":"import os from 'node:os'\nimport { omit } from 'lodash'\nimport * as vscode from 'vscode'\n\nimport type { CodyCommand } from '@sourcegraph/cody-shared'\n\nimport { logDebug, logError } from '../../log'\n\nimport { isMacOS } from '@sourcegraph/cody-shared'\nimport { CustomCommandType } from '@sourcegraph/cody-shared'\nimport { URI, Utils } from 'vscode-uri'\nimport { getConfiguration } from '../../configuration'\nimport type { TreeViewProvider } from '../../services/tree-views/TreeViewProvider'\nimport { getCommandTreeItems } from '../../services/tree-views/commands'\nimport { showNewCustomCommandMenu } from '../menus'\nimport { type CodyCommandsFile, ConfigFiles } from '../types'\nimport { createFileWatchers, createJSONFile, saveJSONFile } from '../utils/config-file'\nimport { buildCodyCommandMap } from '../utils/get-commands'\nimport { getDocText } from '../utils/workspace-files'\n\nconst isTesting = process.env.CODY_TESTING === 'true'\nconst userHomePath = os.homedir() || process.env.HOME || process.env.USERPROFILE || ''\n\n/**\n * Handles loading, building, and maintaining Custom Commands retrieved from cody.json files\n */\nexport class CustomCommandsManager implements vscode.Disposable {\n    // Watchers for the cody.json files\n    private fileWatcherDisposables: vscode.Disposable[] = []\n    private registeredCommands: vscode.Disposable[] = []\n    private disposables: vscode.Disposable[] = []\n\n    public customCommandsMap = new Map<string, CodyCommand>()\n\n    // Configuration files\n    protected configFileName\n    private userConfigFile\n    private get workspaceConfigFile(): vscode.Uri | undefined {\n        const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri\n        if (!workspaceRoot) {\n            return undefined\n        }\n        return Utils.joinPath(workspaceRoot, this.configFileName)\n    }\n\n    constructor(private sidebar: TreeViewProvider) {\n        // TODO (bee) Migrate to use .cody/commands.json for VS Code\n        // Right now agent is using .cody/commands.json for Custom Commands,\n        // .vscode/cody.json in VS Code.\n        const workspaceConfig = vscode.workspace.getConfiguration()\n        const config = getConfiguration(workspaceConfig)\n        this.configFileName = config.isRunningInsideAgent ? ConfigFiles.COMMAND : ConfigFiles.VSCODE\n        this.userConfigFile = Utils.joinPath(URI.file(userHomePath), this.configFileName)\n\n        this.disposables.push(\n            vscode.commands.registerCommand('cody.menu.custom.build', () =>\n                this.newCustomCommandQuickPick()\n            ),\n            vscode.commands.registerCommand('cody.commands.open.json', type =>\n                this.configFileActions(type, 'open')\n            ),\n            vscode.commands.registerCommand('cody.commands.delete.json', type =>\n                this.configFileActions(type, 'delete')\n            )\n        )\n    }\n\n    /**\n     // TODO (bee) Migrate to use .cody/commands.json\n     * Create file watchers for cody.json files.\n     * Automatically update the command map when the cody.json files are changed\n     */\n    public init(): void {\n        const userConfigWatcher = createFileWatchers(this.userConfigFile)\n        if (userConfigWatcher) {\n            this.fileWatcherDisposables.push(\n                userConfigWatcher,\n                userConfigWatcher.onDidChange(() => this.refresh?.()),\n                userConfigWatcher.onDidDelete(() => this.refresh?.())\n            )\n        }\n\n        // Create file watchers in trusted workspaces only\n        if (vscode.workspace.isTrusted) {\n            const wsConfigWatcher = createFileWatchers(this.workspaceConfigFile)\n            if (wsConfigWatcher) {\n                this.fileWatcherDisposables.push(\n                    wsConfigWatcher,\n                    wsConfigWatcher.onDidChange(() => this.refresh?.()),\n                    wsConfigWatcher.onDidDelete(() => this.refresh?.())\n                )\n            }\n        }\n\n        if (this.fileWatcherDisposables.length) {\n            logDebug('CommandsController:init', 'watchers created')\n        }\n    }\n\n    /**\n     * Gets the map of custom commands.\n     *\n     * The custom commands map is a collection of CodyCommand objects, where the key\n     * is the command name and the value is the command object.\n     */\n    public get commands(): Map<string, CodyCommand> {\n        return this.customCommandsMap\n    }\n\n    /**\n     * Get the uri of the cody.json file for the given type\n     */\n    private getConfigFileByType(type: CustomCommandType): vscode.Uri | undefined {\n        const configFileUri =\n            type === CustomCommandType.User ? this.userConfigFile : this.workspaceConfigFile\n        return configFileUri\n    }\n\n    /**\n     * Rebuild the Custom Commands Map from the cody.json files\n     */\n    public async refresh(): Promise<CodyCommandsFile> {\n        try {\n            // Deregister all commands before rebuilding them to avoid duplicates\n            this.disposeRegisteredCommands()\n            // Reset the map before rebuilding\n            this.customCommandsMap = new Map<string, CodyCommand>()\n            // user commands\n            if (this.userConfigFile?.path) {\n                await this.build(CustomCommandType.User)\n            }\n            // 🚨 SECURITY: Only build workspace command in trusted workspace\n            if (vscode.workspace.isTrusted) {\n                await this.build(CustomCommandType.Workspace)\n            }\n        } catch (error) {\n            logError('CustomCommandsProvider:refresh', 'failed', { verbose: error })\n        }\n        this.sidebar.setTreeNodes(getCommandTreeItems([...this.customCommandsMap.values()]))\n        return { commands: this.customCommandsMap }\n    }\n\n    /**\n     * Handles building the Custom Commands Map from the cody.json files\n     *\n     * 🚨 SECURITY: Only build workspace command in trusted workspace\n     */\n    public async build(type: CustomCommandType): Promise<Map<string, CodyCommand> | null> {\n        const uri = this.getConfigFileByType(type)\n        if (!uri || (type === CustomCommandType.Workspace && !vscode.workspace.isTrusted)) {\n            return null\n        }\n        try {\n            const content = await getDocText(uri)\n            if (!content.trim()) {\n                return null\n            }\n            const customCommandsMap = buildCodyCommandMap(type, content)\n            this.customCommandsMap = new Map([...this.customCommandsMap, ...customCommandsMap])\n\n            // Register Custom Commands as VS Code commands\n            for (const [key, _command] of customCommandsMap) {\n                this.registeredCommands.push(\n                    vscode.commands.registerCommand(`cody.command.custom.${key}`, () =>\n                        vscode.commands.executeCommand('cody.action.command', key, {\n                            source: 'editor',\n                        })\n                    )\n                )\n            }\n        } catch (error) {\n            console.error('CustomCommandsProvider:build', 'failed', { verbose: error })\n        }\n        return this.customCommandsMap\n    }\n\n    /**\n     * Quick pick for creating a new custom command\n     */\n    private async newCustomCommandQuickPick(): Promise<void> {\n        const commands = [...this.customCommandsMap.values()].map(c => c.key)\n        const newCommand = await showNewCustomCommandMenu(commands)\n        if (!newCommand) {\n            return\n        }\n\n        // Save the prompt to the current Map and Extension storage\n        await this.save(newCommand.key, newCommand.prompt, newCommand.type)\n        await this.refresh()\n\n        // Notify user\n        const isUserCommand = newCommand.type === CustomCommandType.User\n        const buttonTitle = `Open ${isUserCommand ? 'User' : 'Workspace'} Settings (JSON)`\n        void vscode.window\n            .showInformationMessage(\n                `New ${newCommand.key} command saved to ${newCommand.type} settings`,\n                buttonTitle\n            )\n            .then(async choice => {\n                if (choice === buttonTitle) {\n                    await this.configFileActions(newCommand.type, 'open')\n                }\n            })\n\n        logDebug('CustomCommandsProvider:newCustomCommandQuickPick:', 'saved', {\n            verbose: newCommand,\n        })\n    }\n\n    /**\n     * Add the newly create command via quick pick to the cody.json file on disk\n     */\n    private async save(\n        id: string,\n        command: CodyCommand,\n        type: CustomCommandType = CustomCommandType.User\n    ): Promise<void> {\n        const uri = this.getConfigFileByType(type)\n        if (!uri) {\n            return\n        }\n        const fileContent = await getDocText(uri)\n        const parsed = JSON.parse(fileContent) as Record<string, any>\n        const commands = parsed.commands ?? parsed\n        commands[id] = omit(command, 'key')\n        await saveJSONFile(parsed, uri)\n    }\n\n    private async configFileActions(\n        type: CustomCommandType,\n        action: 'open' | 'delete' | 'create'\n    ): Promise<void> {\n        const uri = this.getConfigFileByType(type)\n        if (!uri) {\n            return\n        }\n        switch (action) {\n            case 'open':\n                void vscode.commands.executeCommand('vscode.open', uri)\n                break\n            case 'delete': {\n                let fileType = 'user settings file (~/.vscode/cody.json)'\n                if (type === CustomCommandType.Workspace) {\n                    fileType = 'workspace settings file (.vscode/cody.json)'\n                }\n                const bin = isMacOS() ? 'Trash' : 'Recycle Bin'\n                const confirmationKey = `Move to ${bin}`\n                // Playwright cannot capture and interact with pop-up modal in VS Code,\n                // so we need to turn off modal mode for the display message during tests.\n                const modal = !isTesting\n                vscode.window\n                    .showInformationMessage(\n                        `Are you sure you want to delete your Cody ${fileType}?`,\n                        { detail: `You can restore this file from the ${bin}.`, modal },\n                        confirmationKey\n                    )\n                    .then(async choice => {\n                        if (choice === confirmationKey) {\n                            void vscode.workspace.fs.delete(uri)\n                        }\n                    })\n                break\n            }\n            case 'create':\n                await createJSONFile(uri)\n                    .then(() => {\n                        vscode.window\n                            .showInformationMessage(\n                                `Cody ${type} settings file created`,\n                                'View Documentation'\n                            )\n                            .then(async choice => {\n                                if (choice === 'View Documentation') {\n                                    await openCustomCommandDocsLink()\n                                }\n                            })\n                    })\n                    .catch(error => {\n                        const errorMessage = 'Failed to create cody.json file: '\n                        void vscode.window.showErrorMessage(`${errorMessage} ${error}`)\n                        logDebug('CustomCommandsProvider:configActions:create', 'failed', {\n                            verbose: error,\n                        })\n                    })\n                break\n        }\n    }\n\n    /**\n     * Reset\n     */\n    public dispose(): void {\n        for (const disposable of this.disposables) {\n            disposable.dispose()\n        }\n        this.disposeRegisteredCommands()\n        this.disposeWatchers()\n        this.customCommandsMap = new Map<string, CodyCommand>()\n    }\n\n    private disposeWatchers(): void {\n        for (const disposable of this.fileWatcherDisposables) {\n            disposable.dispose()\n        }\n        this.fileWatcherDisposables = []\n    }\n\n    private disposeRegisteredCommands(): void {\n        for (const rc of this.registeredCommands) {\n            rc.dispose()\n        }\n        this.registeredCommands = []\n    }\n}\n\nexport async function openCustomCommandDocsLink(): Promise<void> {\n    const uri = 'https://sourcegraph.com/docs/cody/custom-commands'\n    await vscode.env.openExternal(vscode.Uri.parse(uri))\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/agent-protocol.ts:70-91","content":"\n    // Trigger chat-based commands (explain, test, smell), which are effectively\n    // shortcuts to start a new chat with a templated question. The return value\n    // of these commands is the same as `chat/new`, an ID to reference to the\n    // webview panel where the reply from this command appears.\n    'commands/explain': [null, string] // TODO: rename to chatCommands/{explain,test,smell}\n    'commands/test': [null, string]\n    'commands/smell': [null, string]\n\n    // Trigger custom commands that could be a chat-based command or an edit command.\n    'commands/custom': [{ key: string }, CustomCommandResult]\n\n    // Trigger commands that edit the code.\n    'editCommands/code': [{ instruction: string; model: string }, EditTask]\n    'editCommands/test': [null, EditTask]\n    'editCommands/document': [null, EditTask]\n\n    // If the task is \"applied\", discards the task.\n    'editTask/accept': [{ id: FixupTaskID }, null]\n    // If the task is \"applied\", attempts to revert the task's edit, then\n    // discards the task.\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/SidebarCommands.ts:0-30","content":"import * as vscode from 'vscode'\n\nimport {\n    ACCOUNT_LIMITS_INFO_URL,\n    ACCOUNT_UPGRADE_URL,\n    ACCOUNT_USAGE_URL,\n    CODY_DOC_URL,\n    CODY_FEEDBACK_URL,\n    CODY_SUPPORT_URL,\n    DISCORD_URL,\n} from '../chat/protocol'\nimport { releaseNotesURL } from '../release'\nimport { telemetryService } from '../services/telemetry'\nimport { telemetryRecorder } from '../services/telemetry-v2'\nimport { version } from '../version'\n\nexport function registerSidebarCommands(): vscode.Disposable[] {\n    function logSidebarClick(feature: string) {\n        telemetryService.log(`CodyVSCodeExtension:sidebar:${feature}:clicked`, undefined, {\n            hasV2Event: true,\n        })\n        telemetryRecorder.recordEvent(`cody.sidebar.${feature}`, 'clicked')\n    }\n\n    return [\n        vscode.commands.registerCommand('cody.sidebar.commands', (feature: string, command: string) => {\n            // For Custom Commands\n            if (command === 'cody.action.command') {\n                logSidebarClick('custom')\n                void vscode.commands.executeCommand(command, feature, { source: 'sidebar' })\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:1015-1050","content":"### Changed\n\n- Remove `starter` and `premade` fields from the configuration files for custom commands (cody.json). [pull/939](https://github.com/sourcegraph/cody/pull/939)\n- Enabled streaming responses for all autocomplete requests. [pull/995](https://github.com/sourcegraph/cody/pull/995)\n- Sign out immediately instead of showing the quick-pick menu. [pull/1032](https://github.com/sourcegraph/cody/pull/1032)\n- UX improvements to the custom command workflow (and new [custom command docs](https://sourcegraph.com/docs/cody/custom-commands)). [pull/992](https://github.com/sourcegraph/cody/pull/992)\n- You can now use `alt` + `\\` to trigger autocomplete requests manually. [pull/1060](https://github.com/sourcegraph/cody/pull/1060)\n- Slightly reduce latency when manually triggering autocomplete requests. [pull/1060](https://github.com/sourcegraph/cody/pull/1060)\n- Configure autocomplete provider based on cody LLM settings in site config. [pull/1035](https://github.com/sourcegraph/cody/pull/1035)\n- Filters out single character autocomplete results. [pull/1109](https://github.com/sourcegraph/cody/pull/1109)\n- Register inline completion provider for text files and notebooks only to ensure autocomplete works in environments that are fully supported. [pull/1114](https://github.com/sourcegraph/cody/pull/1114)\n- The `Generate Unit Tests` command has been improved with an enhanced context fetching process that produces test results with better quality. [pull/907](https://github.com/sourcegraph/cody/pull/907)\n\n## [0.10.2]\n\n### Added\n\n### Fixed\n\n### Changed\n\n- Use the same token limits for StarCoder as we do for Anthropic for the current experiments. [pull/1058](https://github.com/sourcegraph/cody/pull/1058)\n\n## [0.10.1]\n\n### Added\n\n### Fixed\n\n- Fix feature flag initialization for autocomplete providers. [pull/965](https://github.com/sourcegraph/cody/pull/965)\n\n### Changed\n\n## [0.10.0]\n\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:0-32","content":"## Checklist\n\n- Commands\n  - [ ] [Explain](#explain)\n  - [ ] [Edit](#edit)\n  - [ ] [Test](#test)\n  - [ ] [Document](#document)\n  - [ ] [Smell](#smell)\n  - [ ] [Code Actions](#code-actions)\n  - [ ] [Custom Commands](#custom-commands)\n- Chat\n  - [ ] [Chat UX](#chat-ux)\n  - [ ] [Chats lefthand panel](#chats-lefthand-panel)\n  - [ ] [Enhanced Context](#enhanced-context)\n  - [ ] [LLM Selection](#llm-selection)\n- [Search](#search)\n- Autocomplete\n  - [ ] [Manual trigger key binding](#manual-trigger-key-binding)\n  - [ ] [Language ignore list](#language-ignore-list)\n  - [ ] [LLM selection](#llm-selection)\n  - [ ] [Multi-line completions](#multi-line-completions)\n  - [ ] [Telemetry and analytics](#telemetry-and-analytics)\n\n## Commands\n\n### Explain\n\n- [ ] Verify that the option to run the `Explain Code` command is available in the following locations:\n  - [ ] Sidebar `Explain Code`\n  - [ ] Context (right-click) menu `Cody > Explain Code`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Explain Code`\n  - [ ] Cody Command Menu (option+c, `Explain Code`)\n"}]

 class: Find logic
