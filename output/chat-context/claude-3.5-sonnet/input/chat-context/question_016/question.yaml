 question: Where do we check for content attribution?
# CHAT
# CHAT_QUESTION Where do we check for content attribution?

# CHAT_REPLY We check for content attribution in the ChatMessageContent component, specifically in the useEffect hook. The code snippet from the file cody_test/vscode/webviews/chat/ChatMessageContent.tsx shows that when guardrails are enabled, it calls the searchAttribution method for each code block in the chat message. 
# CHAT_REPLY 
# CHAT_REPLY The attribution check is triggered after the buttons for copying and inserting code are created. If attribution is found, it updates the UI to display the attribution status using the GuardrailsStatusController.
# CHAT_REPLY 
# CHAT_REPLY The attribution search is performed asynchronously, and the UI is updated based on the result:
# CHAT_REPLY - If no attribution is found, it sets a success status.
# CHAT_REPLY - If attribution is found, it displays the repository names where the code was attributed.
# CHAT_REPLY - If there's an error or the attribution is unavailable, it shows an appropriate status.
# CHAT_REPLY 
# CHAT_REPLY This implementation ensures that users are informed about the source of code snippets provided in chat responses, which is an important feature for maintaining code integrity and compliance.

# CONTEXT_ITEMS [{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration.ts:203-214","content":"function checkValidEnumValues(configName: string, value: string | null): void {\n    const validEnumValues = getConfigEnumValues(`cody.${configName}`)\n    if (value) {\n        if (!validEnumValues.includes(value)) {\n            void vscode.window.showErrorMessage(\n                `Invalid value for ${configName}: ${value}. Valid values are: ${validEnumValues.join(\n                    ', '\n                )}`\n            )\n        }\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:4054-4078","content":"            2n1Tofe+i1bW2ZHXhNA1apTk30hqndqL17plySGZAuO/ijE6yxkED6hm8fHpRnN1d85\\\n            U0Fl9xzhFnlzIk0U01WnbfsaZ+ggLtCTg1vgaeba2Ftnty9VlgYeyasRZaHWuzPYroh\\\n            NXPcXi8sDBeqyj0c78bJM/rORz+8//94VUrS/3Bbt2rP/37lbbFnzsfnL9W/NdPr5X9\\\n            tFdP7f/+sPu03/xf/4gb8+F/fWjeVZt//mr++ue//PO3fz6//tfP/b8VbfFj9fo38+5\\\n            p8/jtXv74f17kj/XT5s1fDn99fFcXPz63/7K7WPz4Xdw0/3hb/Ni+/PX/+Uv9rx/r47\\\n            /++enbv/7zH2/Vj388Fj/+4/j5/Q/vfvrlw9sP5mD+Pv1e/vOP3YcnZz7Yb//n1X/+8\\\n            5///P8BAAD//0QFQV3tCQIA\\\"]\"\n        cookies: []\n        headers:\n          - name: date\n            value: Mon, 15 Apr 2024 06:32:13 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: keep-alive\n          - name: retry-after\n            value: \"282\"\n          - name: access-control-allow-credentials\n            value: \"true\"\n          - name: access-control-allow-origin\n            value: \"\"\n          - name: cache-control\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/attribution.test.ts:12-33","content":"const test = baseTest\n    .extend<DotcomUrlOverride>({ dotcomUrl: mockServer.SERVER_URL })\n    .extend<ExpectedEvents>({\n        // list of events we expect this test to log, add to this list as needed\n        expectedEvents: [\n            'CodyInstalled',\n            'CodyVSCodeExtension:auth:clickOtherSignInOptions',\n            'CodyVSCodeExtension:login:clicked',\n            'CodyVSCodeExtension:auth:selectSigninMenu',\n            'CodyVSCodeExtension:auth:fromToken',\n            'CodyVSCodeExtension:Auth:connected',\n            'CodyVSCodeExtension:chat-question:submitted',\n            'CodyVSCodeExtension:chat-question:executed',\n            'CodyVSCodeExtension:chatResponse:hasCode',\n        ],\n    })\n    .extend<ExtraWorkspaceSettings>({\n        extraWorkspaceSettings: {\n            // TODO(#59720): Remove experimental setting.\n            'cody.experimental.guardrails': true,\n        },\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:105-138","content":"      _order: 0\n      cache: {}\n      request:\n        bodySize: 10486\n        cookies: []\n        headers:\n          - name: content-type\n            value: application/json\n          - name: accept-encoding\n            value: gzip;q=0\n          - name: authorization\n            value: token\n              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69\n          - name: user-agent\n            value: enterpriseClient / v1\n          - name: host\n            value: demo.sourcegraph.com\n        headersSize: 265\n        httpVersion: HTTP/1.1\n        method: POST\n        postData:\n          mimeType: application/json\n          params: []\n          textJSON:\n            maxTokensToSample: 1000\n            messages:\n              - speaker: human\n                text: You are Cody, an AI coding assistant from Sourcegraph.\n              - speaker: assistant\n                text: I am Cody, an AI coding assistant from Sourcegraph.\n              - speaker: human\n                text: >-\n                  Codebase context from file /agent/README.md in repository\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:7357-7384","content":"            TV68pkB+nxayTnfUxFI4Sug+6FETlcN5vseCqWw5dIsYKxBKg01OJm6s+D7T1NbQBqQ\\\n            BtYz94lGT6PUejuxbG/2wJv7Mk6JUl+MJxEct3461Pyk7GO6O4yONy+fXDayr6VVyAL\\\n            CfoVP1ChiONKzIspRcrOLM251/n8/kPAAAA//8DANaF7gAtBAAA\\\"]\"\n        cookies: []\n        headers:\n          - name: date\n            value: Wed, 06 Mar 2024 08:51:31 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: close\n          - name: access-control-allow-credentials\n            value: \"true\"\n          - name: access-control-allow-origin\n            value: \"\"\n          - name: cache-control\n            value: no-cache, max-age=0\n          - name: vary\n            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,\n              Cookie\n          - name: x-content-type-options\n            value: nosniff\n          - name: x-frame-options\n            value: DENY\n          - name: x-xss-protection\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/ChatMessageContent.tsx:21-30","content":"interface ChatMessageContentProps {\n    displayMarkdown: string\n    wrapLinksWithCodyCommand: boolean\n\n    copyButtonOnSubmit?: CodeBlockActionsProps['copyButtonOnSubmit']\n    insertButtonOnSubmit?: CodeBlockActionsProps['insertButtonOnSubmit']\n\n    guardrails?: Guardrails\n    className?: string\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:5321-5347","content":"            z//9zYtWVuqDWdsXf/j3C2XKP3bOW3ct3o+fXhfm0654aP/rw/bTbvXnn8JKf/jth+a\\\n            7zeofP+q//vEv//j5H0+v//VD/1vZln/avP5Zf/ewevNqV7z9/3bln+pG/fD79l//+K\\\n            n+6z8/Pa5+eP1m9ebTZvXnj6H880+vVm//0v78j6fvPz5Xrz69+9jzey//+Zf657d/b\\\n            1dvvtWf9Qe97pfMf/7zn//8vwAAAP//7inTaSEHAgA=\\\"]\"\n        cookies: []\n        headers:\n          - name: date\n            value: Mon, 15 Apr 2024 06:38:54 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: keep-alive\n          - name: access-control-allow-credentials\n            value: \"true\"\n          - name: access-control-allow-origin\n            value: \"\"\n          - name: cache-control\n            value: no-cache, max-age=0\n          - name: content-encoding\n            value: gzip\n          - name: vary\n            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,\n              Cookie\n          - name: x-content-type-options\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/.github/workflows/pr-auditor.yml:0-23","content":"# See https://sourcegraph.com/docs/dev/background-information/ci#pr-auditor\nname: pr-auditor\non:\n  pull_request_target:\n    types: [ closed, edited, opened, synchronize, ready_for_review ]\n  workflow_dispatch:\n\njobs:\n  check-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          repository: 'sourcegraph/pr-auditor'\n      - uses: actions/setup-go@v4\n        with: { go-version: '1.21' }\n\n      - run: './check-pr.sh'\n        env:\n          GITHUB_EVENT_PATH: ${{ env.GITHUB_EVENT_PATH }}\n          GITHUB_TOKEN: ${{ secrets.PR_AUDITOR_TOKEN }}\n          GITHUB_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseMainBranchClient_759014996/recording.har.yaml:1776-1804","content":"            value: null\n        url: https://sourcegraph.sourcegraph.com/.api/graphql?SnippetAttribution\n      response:\n        bodySize: 231\n        content:\n          encoding: base64\n          mimeType: application/json\n          size: 231\n          text: \"[\\\"H4sIAAAAAAAAA4SNMQrDMAxF76I5aXZv3Tr1AqWD4whHEEvGkqEl+O4lU10IdPt83uPts\\\n            Hjz4HZQppzRrmaF5mokfLwbJbIbGTgrFQdgWVDBPXYomEXJpLzv\\\",\\\"PiE4iGRrnS9\\\n            B0qRSS8BYfF77DW048Tj/CrNXCmOQBUdiw+3c6mvRUG1KGP2B/ee72Dcz4suQlYQV2r\\\n            O19gEAAP//AwAoEJKNGwEAAA==\\\"]\"\n        cookies: []\n        headers:\n          - name: date\n            value: Sat, 27 Jan 2024 14:35:00 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: close\n          - name: access-control-allow-credentials\n            value: \"true\"\n          - name: access-control-allow-origin\n            value: \"\"\n          - name: cache-control\n            value: no-cache, max-age=0\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:3616-3645","content":"                - github.com/sourcegraph/sourcegraph\n        queryString:\n          - name: Repositories\n            value: null\n        url: https://demo.sourcegraph.com/.api/graphql?Repositories\n      response:\n        bodySize: 171\n        content:\n          encoding: base64\n          mimeType: application/json\n          size: 171\n          text: \"[\\\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS/KTC0G8fPyU0CM6GqlvMTcVCUrpfTMk\\\n            ozSJL3k/Fz94vzSouTU9KLEggxktpKOUmaKkpVSaG5YeZKx\\\",\\\"X0GKu2Vlakh+lW+\\\n            Io61SbWxtbS0AAAD//wMAsuY8XG8AAAA=\\\"]\"\n        cookies: []\n        headers:\n          - name: date\n            value: Wed, 06 Mar 2024 08:51:38 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: close\n          - name: access-control-allow-credentials\n            value: \"true\"\n          - name: access-control-allow-origin\n            value: \"\"\n          - name: cache-control\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:138-147","content":"                  github.com/sourcegraph/cody:\n\n                  ```markdown\n\n                  | -------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n                  | `pnpm test agent/src/index.test.ts`                                                                                  | Run agent tests in replay mode                                                                                                                                |\n\n                  | `source agent/scripts/export-cody-http-recording-tokens.sh`                                                          | Export access tokens to enable recording mode                                                                                                                 |\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/rateLimitedClient_2043004676/recording.har.yaml:1047-1076","content":"                siteID: SourcegraphWeb\n        cookies: []\n        headers:\n          - name: date\n            value: Wed, 17 Apr 2024 09:12:26 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: keep-alive\n          - name: access-control-allow-credentials\n            value: \"true\"\n          - name: access-control-allow-origin\n            value: \"\"\n          - name: cache-control\n            value: no-cache, max-age=0\n          - name: vary\n            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,\n              X-Requested-With,Cookie\n          - name: x-content-type-options\n            value: nosniff\n          - name: x-frame-options\n            value: DENY\n          - name: x-xss-protection\n            value: 1; mode=block\n          - name: strict-transport-security\n            value: max-age=31536000; includeSubDomains; preload\n          - name: content-encoding\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/non-stop/FixupContentStore.ts:9-75","content":"export class ContentProvider implements vscode.TextDocumentContentProvider, vscode.Disposable {\n    // This stores the content of the document for each task ID\n    // The content is initialized by the fixup task with the original content\n    // and then updated by the fixup task with the replacement content\n    private contentStore = new Map<FixupTaskID, fileContent>()\n    // This tracks the task IDs belong toe each file path\n    private tasksByFilePath = new Map<fileName, FixupTaskID[]>()\n    private _onDidChange = new vscode.EventEmitter<vscode.Uri>()\n    private _disposables: vscode.Disposable\n\n    constructor() {\n        // TODO: Handle applying fixups to files which are opened and closed.\n        // This is tricky because we need to re-sync the range we are tracking\n        // when the file is opened.\n        this._disposables = vscode.workspace.onDidCloseTextDocument(doc =>\n            this.deleteByFilePath(doc.uri.fsPath)\n        )\n    }\n    // Get content from the content store\n    public provideTextDocumentContent(uri: vscode.Uri): string | null {\n        const id = uri.fragment\n        return this.contentStore.get(id) || null\n    }\n    // Add to store - store origin content by fixup task id\n    public async set(id: string, docUri: vscode.Uri): Promise<void> {\n        const doc = await vscode.workspace.openTextDocument(docUri)\n        this.contentStore.set(id, doc.getText())\n        this.tasksByFilePath.set(docUri.fsPath, [...(this.tasksByFilePath.get(docUri.fsPath) || []), id])\n    }\n\n    // Remove by ID\n    public delete(id: string): void {\n        this.contentStore.delete(id)\n        // remove task from tasksByFilePath\n        for (const [filePath, tasks] of this.tasksByFilePath) {\n            const index = tasks.indexOf(id)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n            if (tasks.length === 0) {\n                this.deleteByFilePath(filePath)\n            }\n        }\n    }\n\n    // Remove by file path\n    private deleteByFilePath(fileName: string): void {\n        const files = this.tasksByFilePath.get(fileName)\n        if (!files) {\n            return\n        }\n        for (const id of files) {\n            this.contentStore.delete(id)\n        }\n    }\n\n    public get onDidChange(): vscode.Event<vscode.Uri> {\n        return this._onDidChange.event\n    }\n\n    public dispose(): void {\n        this._disposables.dispose()\n        this._onDidChange.dispose()\n        this.contentStore = new Map<FixupTaskID, fileContent>()\n        this.tasksByFilePath = new Map<fileName, FixupTaskID[]>()\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/agent-protocol.ts:156-175","content":"\n    // Updates the extension configuration and returns the new\n    // authentication status, which indicates whether the provided credentials are\n    // valid or not. The agent can't support autocomplete or chat if the credentials\n    // are invalid.\n    'extensionConfiguration/change': [ExtensionConfiguration, AuthStatus | null]\n\n    // Returns the current authentication status without making changes to it.\n    'extensionConfiguration/status': [null, AuthStatus | null]\n\n    // Run attribution search for a code snippet displayed in chat.\n    // Attribution is an enterprise feature which allows to look for code generated\n    // by Cody in an open source code corpus. User is notified if any such attribution\n    // is found.\n    // For more details, please see:\n    // *   PRD: https://docs.google.com/document/d/1c3CLC7ICDaG63NOWjO6zWm-UElwuXkFrKbCKTw-7H6Q/edit\n    // *   RFC: https://docs.google.com/document/d/1zSxFDQPxZcn5b6yKx40etpJayoibVzj_Gnugzln1weI/edit\n    'attribution/search': [\n        { id: string; snippet: string },\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/ChatMessageContent.tsx:235-309","content":"export const ChatMessageContent: React.FunctionComponent<ChatMessageContentProps> = ({\n    displayMarkdown,\n    wrapLinksWithCodyCommand,\n    copyButtonOnSubmit,\n    insertButtonOnSubmit,\n    guardrails,\n    className,\n}) => {\n    const rootRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        const preElements = rootRef.current?.querySelectorAll('pre')\n        if (!preElements?.length || !copyButtonOnSubmit) {\n            return\n        }\n\n        for (const preElement of preElements) {\n            const preText = preElement.textContent\n            if (preText?.trim() && preElement.parentNode) {\n                const buttons = createButtons(preText, copyButtonOnSubmit, insertButtonOnSubmit)\n                if (guardrails) {\n                    const container = document.createElement('div')\n                    container.classList.add(styles.attributionContainer)\n                    buttons.append(container)\n\n                    const g = new GuardrailsStatusController(container)\n                    g.setPending()\n\n                    guardrails\n                        .searchAttribution(preText)\n                        .then(attribution => {\n                            if (isError(attribution)) {\n                                g.setUnavailable(attribution)\n                            } else if (attribution.repositories.length === 0) {\n                                g.setSuccess()\n                            } else {\n                                g.setFailure(\n                                    attribution.repositories.map(r => r.name),\n                                    attribution.limitHit\n                                )\n                            }\n                        })\n                        .catch(error => {\n                            g.setUnavailable(error)\n                            return\n                        })\n                }\n\n                // Insert the buttons after the pre using insertBefore() because there is no insertAfter()\n                preElement.parentNode.insertBefore(buttons, preElement.nextSibling)\n\n                // capture copy events (right click or keydown) on code block\n                preElement.addEventListener('copy', () => {\n                    if (copyButtonOnSubmit) {\n                        copyButtonOnSubmit(preText, 'Keydown')\n                    }\n                })\n            }\n        }\n    }, [copyButtonOnSubmit, insertButtonOnSubmit, guardrails])\n\n    return (\n        <div\n            ref={rootRef}\n            className={classNames(styles.content, className)}\n            // biome-ignore lint/security/noDangerouslySetInnerHtml: the result is run through dompurify\n            dangerouslySetInnerHTML={{\n                // wrapLinksWithCodyCommand opens all links in assistant responses using the\n                // _cody.vscode.open command (but not human messages because those already\n                // have the right URIs and are trusted).\n                __html: renderCodyMarkdown(displayMarkdown, { wrapLinksWithCodyCommand }),\n            }}\n        />\n    )\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/doc/index.md:0-8","content":"# Cody documentation\n\n> **Note**\n> We're in the process of moving Cody documentation from the [`sourcegraph/sourcegraph` repository `doc/cody` directory](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/tree/doc/cody) to this repository.\n\n- [Development](development/index.md)\n- [All other Cody documentation](https://sourcegraph.com/docs/cody)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/README.md:0-4","content":"# Cody shared library\n\nThe `@sourcegraph/cody-shared` package contains code that is shared among Cody clients.\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/TextDocumentWithUri.ts:45-47","content":"    public get content(): string | undefined {\n        return this.underlying.content\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/.github/PULL_REQUEST_TEMPLATE.md:0-5","content":"\n## Test plan\n\n<!-- Required. See https://sourcegraph.com/docs/dev/background-information/testing_principles. -->\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/AgentTextDocument.ts:23-25","content":"    public get content(): string {\n        return this.protocolDocument.underlying.content ?? ''\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-string.ts:294-320","content":"\n    public static fromContextItem(contextItem: ContextItem) {\n        const ref = [contextItem.uri]\n        return {\n            content: contextItem.content\n                ? internal_createPromptString(contextItem.content, ref)\n                : undefined,\n            repoName: contextItem.repoName\n                ? internal_createPromptString(contextItem.repoName, ref)\n                : undefined,\n        }\n    }\n\n    // 🚨 Use this function only for user-generated queries.\n    // TODO: Can we detect if the user is pasting in content from a document?\n    public static unsafe_fromUserQuery(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 Use this function only for LLM responses queries.\n    public static unsafe_fromLLMResponse(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 We slam chats in and out of storage quite a bit, so it seems weird to\n    // have references on a chat transcript, but closing and opening the chat\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/guardrails/index.ts:3-6","content":"export interface Attribution {\n    limitHit: boolean\n    repositories: RepositoryAttribution[]\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/ChatMessageContent.module.css:44-100","content":"\n.attribution-container {\n    all: unset;\n    display: flex;\n    margin-left: auto;\n}\n\n\n.attribution-icon-unavailable {\n    color: var(--hl-orange);\n}\n\n.attribution-icon-found {\n    color: var(--hl-dark-red);\n}\n\n.status {\n    display: flex;\n    align-items: center;\n}\n\n.codicon-loading {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n\n/*\n * Content\n */\n:root {\n    --spacing: 1rem;\n}\n\n.content {\n    word-break: break-word;\n    line-height: 150%;\n    text-wrap: wrap;\n}\n\n/* Style @-file tokens to match TranscriptAction context files */\n.content a[href^=\"vscode://file\"] em,\n.content a[href^=\"vscode-insiders://file\"] em,\n.content a[href^=\"vscodium://file\"] em,\n.content a[href^=\"cursor://file\"] em\n{\n    padding: 1px 2px;\n    box-sizing: border-box;\n    background-color: color-mix(in srgb, var(--vscode-textLink-foreground) 15%, transparent);\n    border-radius: 2px;\n    font-style: normal;\n    word-break: break-all;\n}\n"}]

 class: Find logic
