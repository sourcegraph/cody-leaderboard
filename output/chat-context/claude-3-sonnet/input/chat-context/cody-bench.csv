LANGUAGEID,WORKSPACE,FIXTURE,STRATEGY,FILEPATH,REVISION,MULTILINE,COMPLETION_INTENT,AUTOCOMPLETE_KIND,RANGE_START_LINE,RANGE_START_CHARACTER,RANGE_END_LINE,RANGE_END_CHARACTER,RESULT_TIMEOUT,RESULT_ERROR,RESULT_EMPTY,RESULT_EXACT,RESULT_TYPECHECKS,RESULT_PARSES,RESULT_TEXT,RESULT_CHAR_COUNT,RESULT_NON_INSERT_PATCH,EDIT_DIFF,CHAT_REPLY,CHAT_QUESTION,CONTEXT_ITEMS,QUESTION_CLASS,FIX_AFTER_DIAGNOSTIC,FIX_BEFORE_DIAGNOSTIC,LLM_JUDGE_SCORE,LLM_JUDGE_REASONING,CONCISENESS_SCORE,HEDGES,PROVIDER_IDENTIFIER,PROVIDER_MODEL,STOP_REASON,CONTEXT_BFG_RETRIEVED_COUNT,CONTEXT_BFG_SUGGESTED_COUNT,CONTEXT_BFG_DURATION_MS,EVENT,TEST_FILENAME,TEST_EXPECTED_FILENAME,TEST_GENERATED,TEST_USED_EXPECTED_TEST_FRAMEWORK,TEST_USED_CORRECT_APPEND_OPERATION,TEST_INPUT_FILENAME,TEST_LANGUAGE,TEST_NAME,TEST_DIAGNOSTICS
yaml,chat-context,claude-3-sonnet,chat,question_000/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_001/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the code context provided, it seems that BFG creates the following indexes:

1. **Git Repository Index**: BFG indexes open Git repositories that are detected by the Git extension in VS Code. This is done by listening to the `onDidOpenRepository` event from the Git extension API and calling `didChangeGitExtensionRepository` for each open repository. Additionally, BFG tries to infer and index Git repositories that may not be ""open"" by the Git extension, such as when the workspace root is a subfolder of a Git repository. This is done by calling `indexInferredGitRepositories`.

2. **Workspace Folder Index**: For workspace folders that are not part of a Git repository, BFG indexes them by calling `indexRemainingWorkspaceFolders`.

3. **Symf Index**: The `symf.ts` file contains code for creating a ""symf"" index, which seems to be a local index for a specific directory or scope. The `upsertIndex` method creates or updates this index for a given scope directory.

So, in summary, BFG creates indexes for:
1. Git repositories
2. Non-Git workspace folders
3. Local ""symf"" indexes for specific directories or scopes

The Git repository and workspace folder indexes are likely used for providing code context and completions from a broader codebase, while the local ""symf"" index is likely used for more localized code context and completions within a specific directory or scope.",what different indexes are created by BFG?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/graph/bfg/download-bfg.ts:18-18"",""content"":""let serializeBfgDownload: Promise<string | null> = Promise.resolve(null)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:348-374"",""content"":""\n    private getIndexDir(scopeDir: FileURI): { indexDir: FileURI; tmpDir: FileURI } {\n        let indexSubdir = scopeDir.path\n\n        // On Windows, we can't use an absolute path with a drive letter inside another path\n        // so we remove the colon, so `/c:/foo/` becomes `/c/foo` and `/c%3A/foo` becomes `/c/foo`.\n        if (isWindows()) {\n            if (indexSubdir[2] === ':') {\n                indexSubdir = indexSubdir.slice(0, 2) + indexSubdir.slice(3)\n            } else if (indexSubdir.slice(2, 5) === '%3A') {\n                indexSubdir = indexSubdir.slice(0, 2) + indexSubdir.slice(5)\n            }\n        }\n\n        return {\n            indexDir: assertFileURI(vscode.Uri.joinPath(this.indexRoot, indexSubdir)),\n            tmpDir: assertFileURI(vscode.Uri.joinPath(this.indexRoot, '.tmp', indexSubdir)),\n        }\n    }\n\n    private unsafeUpsertIndex(\n        indexDir: FileURI,\n        tmpIndexDir: FileURI,\n        scopeDir: FileURI\n    ): Promise<void> {\n        const cancellation = new vscode.CancellationTokenSource()\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/graph/bfg/download-bfg.ts:20-109"",""content"":""export async function downloadBfg(context: vscode.ExtensionContext): Promise<string | null> {\n    // First, wait for any in-progress downloads.\n    await serializeBfgDownload\n\n    // Now we are the in-progress download.\n    serializeBfgDownload = (async () => {\n        const config = vscode.workspace.getConfiguration()\n        const userBfgPath = config.get<string>('cody.experimental.cody-engine.path')\n        if (userBfgPath) {\n            const bfgStat = await fspromises.stat(userBfgPath)\n            if (!bfgStat.isFile()) {\n                throw new Error(`not a file: ${userBfgPath}`)\n            }\n            logDebug('CodyEngine', `using user-provided path: ${userBfgPath} ${bfgStat.isFile()}`)\n            return userBfgPath\n        }\n\n        const osArch = getOSArch()\n        if (!osArch) {\n            logDebug('CodyEngine', 'getOSArch returned nothing')\n            return null\n        }\n        const { platform, arch } = osArch\n\n        if (!arch) {\n            logDebug('CodyEngine', 'getOSArch returned undefined arch')\n            return null\n        }\n\n        if (!platform) {\n            logDebug('CodyEngine', 'getOSArch returned undefined platform')\n            return null\n        }\n        // Rename returned architecture to match RFC 795 conventions\n        // https://docs.google.com/document/d/11cw-7dAp93JmasITNSNCtx31xrQsNB1L2OoxVE6zrTc/edit\n        const archRenames = new Map([\n            ['aarch64', 'arm64'],\n            ['x86_64', 'x64'],\n        ])\n        let rfc795Arch = archRenames.get(arch ?? '') ?? arch\n        if (rfc795Arch === 'arm64' && platform === 'win') {\n            // On Windows Arm PCs, we rely on emulation and use the x64 binary.\n            // See https://learn.microsoft.com/en-us/windows/arm/apps-on-arm-x86-emulation\n            rfc795Arch = 'x64'\n        }\n\n        const bfgContainingDir = path.join(context.globalStorageUri.fsPath, 'cody-engine')\n        const bfgVersion = config.get<string>('cody.experimental.cody-engine.version', defaultBfgVersion)\n        await fspromises.mkdir(bfgContainingDir, { recursive: true })\n        const bfgFilename = `cody-engine-${bfgVersion}-${platform}-${rfc795Arch}`\n        const bfgPath = path.join(bfgContainingDir, bfgFilename)\n        const isAlreadyDownloaded = await fileExists(bfgPath)\n        if (isAlreadyDownloaded) {\n            logDebug('CodyEngine', `using downloaded path \""${bfgPath}\""`)\n            return bfgPath\n        }\n\n        const bfgURL = `https://github.com/sourcegraph/bfg/releases/download/v${bfgVersion}/bfg-${platform}-${rfc795Arch}.zip`\n        try {\n            await vscode.window.withProgress(\n                {\n                    location: vscode.ProgressLocation.Window,\n                    title: 'Downloading cody-engine',\n                    cancellable: false,\n                },\n                async progress => {\n                    progress.report({ message: 'Downloading cody-engine' })\n                    const bfgZip = path.join(bfgContainingDir, 'bfg.zip')\n                    await downloadBfgBinary(bfgURL, bfgZip)\n                    await unzipBfg(bfgZip, bfgContainingDir)\n                    logDebug('CodyEngine', bfgPath)\n                    // The zip file contains a binary named `bfg` or `bfg.exe`. We unzip it with that name first and then rename into\n                    // a version-specific binary so that we can delete old versions of bfg.\n                    const unzipPath = platform === 'windows' ? 'bfg.exe' : 'bfg'\n                    await fspromises.rename(path.join(bfgContainingDir, unzipPath), bfgPath)\n                    await fspromises.chmod(bfgPath, 0o755)\n                    await fspromises.rm(bfgZip)\n                    logDebug('CodyEngine', `downloaded cody-engine to ${bfgPath}`)\n                }\n            )\n            void removeOldBfgBinaries(bfgContainingDir, bfgFilename)\n        } catch (error) {\n            captureException(error)\n            void vscode.window.showErrorMessage(`Failed to download bfg from URL ${bfgURL}: ${error}`)\n            return null\n        }\n        return bfgPath\n    })()\n    return serializeBfgDownload\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:1337-1345"",""content"":""- Refactored authentication process. [pull/53434](https://github.com/sourcegraph/sourcegraph/pull/53434)\n- New sign-in and sign-out flow. [pull/53434](https://github.com/sourcegraph/sourcegraph/pull/53434)\n- Analytical logs are now displayed in the Output view. [pull/53870](https://github.com/sourcegraph/sourcegraph/pull/53870)\n- Inline Chat: Renamed Inline Assist to Inline Chat. [pull/53725](https://github.com/sourcegraph/sourcegraph/pull/53725) [pull/54315](https://github.com/sourcegraph/sourcegraph/pull/54315)\n- Chat: Link to the \""Getting Started\"" guide directly from the first chat message instead of the external documentation website. [pull/54175](https://github.com/sourcegraph/sourcegraph/pull/54175)\n- Codebase status icons. [pull/54262](https://github.com/sourcegraph/sourcegraph/pull/54262)\n- Changed the keyboard shortcut for the file touch recipe to `ctrl+alt+/` to avoid conflicts. [pull/54275](https://github.com/sourcegraph/sourcegraph/pull/54275)\n- Inline Chat: Do not change current focus when Inline Fixup is done. [pull/53980](https://github.com/sourcegraph/sourcegraph/pull/53980)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/graph/bfg/spawn-bfg.ts:9-44"",""content"":""export async function spawnBfg(\n    context: vscode.ExtensionContext,\n    reject: (reason?: any) => void\n): Promise<MessageHandler> {\n    const bfg = new MessageHandler()\n    const codyrpc = await downloadBfg(context)\n    if (!codyrpc) {\n        throw new Error(\n            'Failed to download BFG binary. To fix this problem, set the \""cody.experimental.cody-engine.path\"" configuration to the path of your BFG binary'\n        )\n    }\n    const isVerboseDebug = vscode.workspace.getConfiguration().get<boolean>('cody.debug.verbose', false)\n    const child = child_process.spawn(codyrpc, {\n        stdio: 'pipe',\n        env: {\n            VERBOSE_DEBUG: `${isVerboseDebug}`,\n            RUST_BACKTRACE: isVerboseDebug ? '1' : '0',\n            // See bfg issue 138\n            RUST_LIB_BACKTRACE: '0',\n        },\n    })\n    child.stderr.on('data', chunk => {\n        logDebug('CodyEngine', 'spawnBfg:stderr', { verbose: chunk.toString() })\n    })\n    child.on('disconnect', () => reject())\n    child.on('close', () => reject())\n    child.on('error', error => reject(error))\n    child.on('exit', code => {\n        bfg.exit()\n        reject(code)\n    })\n    child.stderr.pipe(process.stderr)\n    child.stdout.pipe(bfg.messageDecoder)\n    bfg.messageEncoder.pipe(child.stdin)\n    return bfg\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:130-167"",""content"":""} from './inferenceClient/misc'\nexport type {\n    ContextResult,\n    FilenameContextFetcher,\n    IndexedKeywordContextFetcher,\n    LocalEmbeddingsFetcher,\n    IRemoteSearch,\n    Result,\n    SearchPanelFile,\n    SearchPanelSnippet,\n} from './local-context'\nexport { logDebug, logError, setLogger } from './logger'\nexport {\n    createOllamaClient,\n    ollamaChatClient,\n    type OllamaGenerateParams,\n    OLLAMA_DEFAULT_URL,\n} from './llm-providers/ollama'\nexport {\n    MAX_BYTES_PER_FILE,\n    MAX_CURRENT_FILE_TOKENS,\n    ANSWER_TOKENS,\n    NUM_CODE_RESULTS,\n    NUM_TEXT_RESULTS,\n    SURROUNDING_LINES,\n} from './prompt/constants'\nexport { PromptMixin, newPromptMixin } from './prompt/prompt-mixin'\nexport * from './prompt/templates'\nexport {\n    truncateText,\n    truncateTextNearestLine,\n    truncatePromptStringStart,\n    truncatePromptString,\n} from './prompt/truncation'\nexport type { Message } from './sourcegraph-api'\nexport { SourcegraphBrowserCompletionsClient } from './sourcegraph-api/completions/browserClient'\nexport { SourcegraphCompletionsClient } from './sourcegraph-api/completions/client'\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/graph/bfg/download-bfg.ts:111-119"",""content"":""async function unzipBfg(zipFile: string, destinationDir: string): Promise<void> {\n    const zip = fs.createReadStream(zipFile).pipe(unzipper.Parse({ forceStream: true }))\n    for await (const entry of zip) {\n        if (entry.path.endsWith('/')) {\n            continue\n        }\n        entry.pipe(fs.createWriteStream(path.join(destinationDir, entry.path)))\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:246-279"",""content"":""- Chat: Add tracing. [pull/3168](https://github.com/sourcegraph/cody/pull/3168)\n- Command: Leading slashes are removed from command names in the command menu. [pull/3061](https://github.com/sourcegraph/cody/pull/3061)\n\n## [1.4.4]\n\n### Added\n\n### Fixed\n\n- The signin menu now displays a warning for invalid URL input. [pull/3156](https://github.com/sourcegraph/cody/pull/3156)\n\n### Changed\n\n## [1.4.3]\n\n### Added\n\n- Autocomplete: Updated the BFG binary version. [pull/3130](https://github.com/sourcegraph/cody/pull/3130)\n\n### Changed\n\n## [1.4.2]\n\n### Fixed\n\n- Chat: Fixed an issue where Cody would sometimes exceed the context window limit for shorter context OpenAI models. [pull/3121](https://github.com/sourcegraph/cody/pull/3121)\n\n## [1.4.1]\n\n### Added\n\n- Chat: Support `@-mentioned` in mid sentences. [pull/3043](https://github.com/sourcegraph/cody/pull/3043)\n- Chat: Support `@-mentioned` in editing mode. [pull/3091](https://github.com/sourcegraph/cody/pull/3091)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/utils/highlight.css:308-368"",""content"":""\n.hl-typed-IdentifierFunction {\n\tcolor: var(--hl-dark-yellow);\n}\n\n.hl-typed-IdentifierType {\n\tcolor: var(--hl-gray-1);\n}\n\n.hl-typed-IdentifierBuiltin {\n\tcolor: var(--hl-purple);\n}\n\n.hl-typed-IdentifierNull {\n\tcolor: var(--hl-orange);\n}\n\n.hl-typed-BooleanLiteral {\n\tcolor: var(--hl-orange);\n}\n\n.hl-typed-IdentifierConstant {\n\tcolor: var(--hl-orange);\n}\n\n.hl-typed-IdentifierMutableGlobal {\n\tcolor: var(--hl-blue);\n}\n\n.hl-typed-IdentifierParameter {\n\tcolor: var(--hl-blue);\n}\n\n.hl-typed-IdentifierLocal {\n\tcolor: var(--hl-blue);\n}\n\n.hl-typed-IdentifierShadowed {\n\tcolor: var(--hl-blue);\n}\n\n.hl-typed-IdentifierModule {\n\tcolor: var(--hl-blue);\n}\n\n.hl-typed-IdentifierFunctionDefinition {\n\tcolor: var(--hl-yellow);\n}\n\n.hl-typed-IdentifierMacro {\n\tcolor: var(--hl-yellow);\n}\n\n.hl-typed-IdentifierMacroDefinition {\n\tcolor: var(--hl-yellow);\n}\n\n.hl-typed-IdentifierBuiltinType {\n\tcolor: var(--hl-orange);\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:516-537"",""content"":""\n## [1.0.0]\n\n### Added\n\n- Adds support for Mixtral by Mistral in the LLM dropdown list. [issues/2307](https://github.com/sourcegraph/cody/issues/2307)\n\n### Fixed\n\n- Context: The \""Continue Indexing\"" button works on Windows. [issues/2328](https://github.com/sourcegraph/cody/issues/2328)\n- Context: The \""Embeddings Incomplete\"" status bar item shows an accurate percent completion. Previously we showed the percent *in*complete, but labeled it percent complete. We no longer display a spurious \""Cody Embeddings Index Complete\"" toast if indexing fails a second time. [pull/2368](https://github.com/sourcegraph/cody/pull/2368)\n\n### Changed\n\n- Updates the code smell icon so it does not stand out in some VS Code themes.\n\n## [0.18.6]\n\n### Added\n\n- Context: Incomplete embeddings indexing status can seen in the status bar. On macOS and Linux, indexing can be resumed by clicking there. However Windows users will still see an OS error 5 (access denied) when retrying indexing. [pull/2265](https://github.com/sourcegraph/cody/pull/2265)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/bfg-protocol.ts:0-38"",""content"":""/**\n * This file declares the protocol for communicating between Cody and BFG (Blazingly Fast Graph), a Rust implementation\n * of the \""Graph Context\"" feature flag.\n */\nimport type { Position } from './agent-protocol'\n\ninterface BFGFileContextSnippet {\n    fileName: string\n    content: string\n}\n\ninterface BFGSymbolContextSnippet extends BFGFileContextSnippet {\n    symbol: string\n}\n\nexport type Requests = {\n    'bfg/initialize': [{ clientName: string }, { serverVersion: string }]\n    'bfg/contextAtPosition': [\n        { uri: string; content: string; position: Position; maxSnippets: number; maxDepth: number },\n        { symbols?: BFGSymbolContextSnippet[]; files?: BFGFileContextSnippet[] },\n    ]\n    'bfg/contextForIdentifiers': [\n        { uri: string; identifiers: string[]; maxSnippets: number; maxDepth: number },\n        { symbols?: BFGSymbolContextSnippet[] },\n    ]\n    // biome-ignore lint/suspicious/noConfusingVoidType: this models a function returning void\n    'bfg/gitRevision/didChange': [{ gitDirectoryUri: string }, void]\n    // biome-ignore lint/suspicious/noConfusingVoidType: this models a function returning void\n    'bfg/workspace/didChange': [{ workspaceUri: string }, void]\n    // biome-ignore lint/suspicious/noConfusingVoidType: this models a function returning void\n    'bfg/shutdown': [null, void]\n\n    'embeddings/hello': [null, string]\n}\n\nexport type Notifications = {\n    'bfg/placeholderNotification': [null]\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:203-228"",""content"":""    event,\n} from './sourcegraph-api/graphql/client'\nexport { GraphQLTelemetryExporter } from './sourcegraph-api/telemetry/GraphQLTelemetryExporter'\nexport { NOOP_TELEMETRY_SERVICE } from './telemetry'\nexport type { TelemetryEventProperties, TelemetryService } from './telemetry'\nexport { type BillingCategory, type BillingProduct } from './telemetry-v2'\nexport {\n    MockServerTelemetryRecorderProvider,\n    NoOpTelemetryRecorderProvider,\n    TelemetryRecorderProvider,\n} from './telemetry-v2/TelemetryRecorderProvider'\nexport type { TelemetryRecorder } from './telemetry-v2/TelemetryRecorderProvider'\nexport { EventLogger } from './telemetry/EventLogger'\nexport type { ExtensionDetails } from './telemetry/EventLogger'\nexport { testFileUri } from './test/path-helpers'\nexport {\n    addTraceparent,\n    getActiveTraceAndSpanId,\n    wrapInActiveSpan,\n    recordErrorToSpan,\n    tracer,\n    logResponseHeadersToSpan,\n} from './tracing'\nexport { convertGitCloneURLToCodebaseName, isError } from './utils'\nexport type { CurrentUserCodySubscription } from './sourcegraph-api/graphql/client'\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/context/retrievers/bfg/bfg-retriever.ts:0-303"",""content"":""import * as vscode from 'vscode'\n\nimport { spawnBfg } from '../../../../graph/bfg/spawn-bfg'\nimport type { MessageHandler } from '../../../../jsonrpc/jsonrpc'\nimport { logDebug } from '../../../../log'\nimport type { Repository } from '../../../../repository/builtinGitExtension'\nimport { gitAPI } from '../../../../repository/git-extension-api'\nimport { captureException } from '../../../../services/sentry/sentry'\nimport type { ContextRetriever, ContextRetrieverOptions } from '../../../types'\n\nimport type { AutocompleteContextSnippet } from '@sourcegraph/cody-shared'\nimport {\n    getLastNGraphContextIdentifiersFromDocument,\n    getLastNGraphContextIdentifiersFromString,\n} from '../graph/identifiers'\nimport { type SimpleRepository, inferGitRepository } from './simple-git'\n\nexport class BfgRetriever implements ContextRetriever {\n    public identifier = 'bfg'\n    private loadedBFG: Promise<MessageHandler>\n    private bfgIndexingPromise = Promise.resolve<void>(undefined)\n    private awaitIndexing: boolean\n    private didFailLoading = false\n    // Keys are repository URIs, values are revisions (commit hashes).\n    private indexedRepositoryRevisions = new Map<string, string>()\n    constructor(private context: vscode.ExtensionContext) {\n        this.awaitIndexing = vscode.workspace\n            .getConfiguration()\n            .get<boolean>('cody.experimental.cody-engine.await-indexing', false)\n        this.loadedBFG = this.loadBFG()\n\n        this.loadedBFG.then(\n            () => {},\n            error => {\n                captureException(error)\n                this.didFailLoading = true\n                logDebug('CodyEngine', 'failed to initialize', error)\n            }\n        )\n\n        this.bfgIndexingPromise = this.indexWorkspace()\n    }\n\n    private async indexWorkspace(): Promise<void> {\n        await this.indexGitRepositories()\n        await this.indexRemainingWorkspaceFolders()\n    }\n    private isWorkspaceIndexed(folder: vscode.Uri): boolean {\n        const uri = folder.toString()\n        logDebug('CodyEngine', 'Checking if folder is indexed', uri)\n        for (const key of this.indexedRepositoryRevisions.keys()) {\n            if (uri.startsWith(key)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    private async indexRemainingWorkspaceFolders(): Promise<void> {\n        logDebug(\n            'CodyEngine',\n            'workspaceFolders',\n            vscode.workspace.workspaceFolders?.map(folder => folder.uri.toString()) ?? []\n        )\n        for (const folder of vscode.workspace.workspaceFolders ?? []) {\n            if (this.isWorkspaceIndexed(folder.uri)) {\n                continue\n            }\n            await this.indexEntry({ workspace: folder.uri })\n        }\n    }\n    private async indexGitRepositories(): Promise<void> {\n        const git = gitAPI()\n        if (!git) {\n            return\n        }\n        for (const repository of git.repositories) {\n            await this.didChangeGitExtensionRepository(repository)\n        }\n        this.context.subscriptions.push(\n            git.onDidOpenRepository(repository => this.didChangeGitExtensionRepository(repository))\n        )\n        this.context.subscriptions.push(\n            vscode.workspace.onDidChangeWorkspaceFolders(() => this.indexInferredGitRepositories())\n        )\n        // TODO: handle closed repositories\n\n        await this.indexInferredGitRepositories()\n    }\n\n    private shouldInferGitRepositories(): boolean {\n        // Some users may not want to allow Cody to index code outside the VS\n        // Code workspace folder so we support an escape hatch to disable this\n        // functionality. This setting is hidden because all the other\n        // BFG-related settings are hidden.\n        return vscode.workspace\n            .getConfiguration()\n            .get<boolean>('cody.experimental.cody-engine.index-parent-git-folder', false)\n    }\n\n    // Infers what git repositories that are relevant but may not be \""open\"" by\n    // the git extension.  For example, by default, the git extension doesn't\n    // open git repositories when the workspace root is a subfolder. There's a\n    // setting to automatically open parent git repositories but the setting is\n    // disabled by default.\n    private async indexInferredGitRepositories(): Promise<void> {\n        if (!this.shouldInferGitRepositories()) {\n            return\n        }\n        for (const folder of vscode.workspace.workspaceFolders ?? []) {\n            if (this.indexedRepositoryRevisions.has(folder.uri.toString())) {\n                continue\n            }\n            const repo = await inferGitRepository(folder.uri)\n            if (repo) {\n                await this.didChangeSimpleRepository(repo)\n            }\n        }\n    }\n\n    private async didChangeGitExtensionRepository(repository: Repository): Promise<void> {\n        const commit = repository?.state?.HEAD?.commit\n        if (!commit) {\n            return\n        }\n        await this.didChangeSimpleRepository({ uri: repository.rootUri, commit })\n    }\n\n    private async didChangeSimpleRepository(repository: SimpleRepository): Promise<void> {\n        const uri = repository.uri.toString()\n        if (repository.commit !== this.indexedRepositoryRevisions.get(uri)) {\n            this.indexedRepositoryRevisions.set(uri, repository.commit ?? '')\n            await this.indexEntry({ repository })\n        }\n    }\n\n    private async indexEntry(params: {\n        repository?: SimpleRepository\n        workspace?: vscode.Uri\n    }): Promise<void> {\n        const { repository, workspace } = params\n        if (!repository && !workspace) {\n            return\n        }\n        const bfg = await this.loadedBFG\n        const indexingStartTime = Date.now()\n        // TODO: include commit?\n        try {\n            if (repository) {\n                await bfg.request('bfg/gitRevision/didChange', {\n                    gitDirectoryUri: repository.uri.toString(),\n                })\n            }\n            if (workspace) {\n                await bfg.request('bfg/workspace/didChange', { workspaceUri: workspace.toString() })\n            }\n            const elapsed = Date.now() - indexingStartTime\n            const label = repository\n                ? `${repository.uri.fsPath}:${repository.commit}`\n                : workspace\n                  ? workspace.fsPath\n                  : ''\n            if (label) {\n                logDebug('CodyEngine', `gitRevision/didChange ${label} indexing time ${elapsed}ms`)\n            }\n        } catch (error) {\n            logDebug('CodyEngine', `indexing error ${error}`)\n        }\n    }\n\n    public async retrieve({\n        document,\n        position,\n        docContext,\n        hints,\n        lastCandidate,\n    }: ContextRetrieverOptions): Promise<AutocompleteContextSnippet[]> {\n        try {\n            if (this.didFailLoading) {\n                return []\n            }\n            const bfg = await this.loadedBFG\n            if (!bfg.isAlive()) {\n                logDebug('CodyEngine', 'not alive')\n                return []\n            }\n\n            if (this.awaitIndexing) {\n                await this.bfgIndexingPromise\n            }\n\n            const lastCandidateCurrentLine =\n                (lastCandidate?.lastTriggerDocContext.currentLinePrefix || '') +\n                lastCandidate?.result.items[0].insertText\n\n            const bfgRequestStart = performance.now()\n            const inputIdentifiers = Array.from(\n                new Set([\n                    // Get last 10 identifiers from the last candidate insert text\n                    // in hopes that LLM partially guessed the right completion.\n                    ...getLastNGraphContextIdentifiersFromString({\n                        n: 10,\n                        document,\n                        position,\n                        currentLinePrefix: docContext.currentLinePrefix,\n                        source: lastCandidateCurrentLine,\n                    }),\n                    // Get last 10 identifiers from the current document prefix.\n                    ...getLastNGraphContextIdentifiersFromDocument({\n                        n: 10,\n                        document,\n                        position,\n                        currentLinePrefix: docContext.currentLinePrefix,\n                    }),\n                ])\n            )\n\n            const response = await bfg.request('bfg/contextForIdentifiers', {\n                uri: document.uri.toString(),\n                identifiers: inputIdentifiers,\n                maxSnippets: 20,\n                maxDepth: 4,\n            })\n\n            // Just in case, handle non-object results\n            if (typeof response !== 'object') {\n                return []\n            }\n\n            // Convert BFG snippets to match the format expected on the client.\n            const symbols = (response.symbols || []).map(contextSnippet => ({\n                ...contextSnippet,\n                uri: vscode.Uri.from({ scheme: 'file', path: contextSnippet.fileName }),\n            })) satisfies Omit<AutocompleteContextSnippet, 'startLine' | 'endLine'>[]\n\n            logDebug('CodyEngine', 'bfg/contextForIdentifiers', {\n                verbose: {\n                    inputIdentifiers,\n                    duration: `${performance.now() - bfgRequestStart}ms`,\n                    symbols: symbols.map(s => `${s.symbol} ${s.content}`),\n                },\n            })\n\n            // TODO: add `startLine` and `endLine` to `responses` or explicitly add\n            // another context snippet type to the client.\n            // @ts-ignore\n            return symbols\n        } catch (error) {\n            logDebug('CodyEngine:error', `${error}`)\n            return []\n        }\n    }\n\n    public isSupportedForLanguageId(languageId: string): boolean {\n        switch (languageId) {\n            case 'typescript':\n            case 'typescriptreact':\n            case 'javascript':\n            case 'javascriptreact':\n            case 'java':\n            case 'go':\n            case 'dart':\n            case 'python':\n            case 'zig':\n                return true\n            default:\n                return false\n        }\n    }\n\n    public dispose(): void {\n        if (this.didFailLoading) {\n            return\n        }\n        this.loadedBFG.then(\n            bfg => bfg.request('bfg/shutdown', null),\n            () => {}\n        )\n    }\n\n    // We lazily load BFG to allow the Cody extension to finish activation as\n    // quickly as possible.\n    private loadBFG(): Promise<MessageHandler> {\n        // This is implemented as a custom promise instead of async/await so that we can reject\n        // the promise in the 'exit' handler if we fail to start the bfg process for some reason.\n        return new Promise<MessageHandler>((resolve, reject) => {\n            logDebug('CodyEngine', 'loading bfg')\n            this.doLoadBFG(reject).then(\n                bfg => resolve(bfg),\n                error => {\n                    captureException(error)\n                    reject(error)\n                }\n            )\n        })\n    }\n\n    private async doLoadBFG(reject: (reason?: any) => void): Promise<MessageHandler> {\n        const bfg = await spawnBfg(this.context, reject)\n        await bfg.request('bfg/initialize', { clientName: 'vscode' })\n        return bfg\n    }\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/testutils/mocks.ts:609-653"",""content"":""            'java',\n            'javascriptreact',\n            'javascript',\n            'jsx-tags',\n            'jsonl',\n            'snippets',\n            'julia',\n            'juliamarkdown',\n            'tex',\n            'latex',\n            'bibtex',\n            'cpp_embedded_latex',\n            'markdown_latex_combined',\n            'less',\n            'lua',\n            'makefile',\n            'markdown',\n            'markdown-math',\n            'wat',\n            'objective-c',\n            'objective-cpp',\n            'perl',\n            'perl6',\n            'php',\n            'powershell',\n            'jade',\n            'python',\n            'r',\n            'razor',\n            'restructuredtext',\n            'ruby',\n            'rust',\n            'scss',\n            'search-result',\n            'shaderlab',\n            'shellscript',\n            'sql',\n            'swift',\n            'typescript',\n            'typescriptreact',\n            'vb',\n            'xml',\n            'xsl',\n            'dockercompose',\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2855-2869"",""content"":""            super_type?: ReturnType<typeof SuperType.prototype.toObject>\n            constant_type?: ReturnType<typeof ConstantType.prototype.toObject>\n            intersection_type?: ReturnType<typeof IntersectionType.prototype.toObject>\n            union_type?: ReturnType<typeof UnionType.prototype.toObject>\n            with_type?: ReturnType<typeof WithType.prototype.toObject>\n            structural_type?: ReturnType<typeof StructuralType.prototype.toObject>\n            annotated_type?: ReturnType<typeof AnnotatedType.prototype.toObject>\n            existential_type?: ReturnType<typeof ExistentialType.prototype.toObject>\n            universal_type?: ReturnType<typeof UniversalType.prototype.toObject>\n            by_name_type?: ReturnType<typeof ByNameType.prototype.toObject>\n            repeated_type?: ReturnType<typeof RepeatedType.prototype.toObject>\n            match_type?: ReturnType<typeof MatchType.prototype.toObject>\n            lambda_type?: ReturnType<typeof LambdaType.prototype.toObject>\n        }): Type {\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1321-1329"",""content"":""    \""ovsx\"": \""^0.8.2\"",\n    \""pako\"": \""^2.1.0\"",\n    \""path-browserify\"": \""^1.0.1\"",\n    \""playwright\"": \""1.39.0\"",\n    \""progress\"": \""^2.0.3\"",\n    \""yaml\"": \""^2.3.4\""\n  }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/bfg/BfgRetriever.test.ts:27-27"",""content"":""const shouldCreateGitDir = !fs.existsSync(gitdir)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/context/context-strategy.ts:76-103"",""content"":""\n            // The bfg mixed strategy mixes local and graph based retrievers\n            case 'bfg-mixed':\n                if (this.graphRetriever?.isSupportedForLanguageId(document.languageId)) {\n                    retrievers.push(this.graphRetriever)\n                }\n                if (this.localRetriever) {\n                    retrievers.push(this.localRetriever)\n                }\n                break\n\n            // The local mixed strategy combines two local retrievers\n            case 'local-mixed':\n                if (this.localRetriever) {\n                    retrievers.push(this.localRetriever)\n                }\n                if (this.graphRetriever) {\n                    retrievers.push(this.graphRetriever)\n                }\n                break\n\n            // The jaccard similarity strategies only uses the local retriever\n            case 'jaccard-similarity': {\n                if (this.localRetriever) {\n                    retrievers.push(this.localRetriever)\n                }\n                break\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/package.json:64-78"",""content"":""    \""@types/diff\"": \""^5.0.9\"",\n    \""@types/google-protobuf\"": \""3.15.12\"",\n    \""@types/minimatch\"": \""^5.1.2\"",\n    \""@types/uuid\"": \""^9.0.2\"",\n    \""@types/vscode\"": \""^1.80.0\"",\n    \""@types/ws\"": \""^8.5.10\"",\n    \""diff\"": \""^5.2.0\"",\n    \""esbuild\"": \""^0.18.19\"",\n    \""google-protobuf\"": \""^3.21.2\"",\n    \""parse-git-diff\"": \""^0.0.14\"",\n    \""pkg\"": \""^5.8.1\"",\n    \""rimraf\"": \""^5.0.5\""\n  }\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/language-file-extensions.json:115-192"",""content"":""    \""ant\"",\n    \""axml\"",\n    \""builds\"",\n    \""ccxml\"",\n    \""clixml\"",\n    \""cproject\"",\n    \""csl\"",\n    \""csproj\"",\n    \""ct\"",\n    \""dita\"",\n    \""ditamap\"",\n    \""ditaval\"",\n    \""dll.config\"",\n    \""dotsettings\"",\n    \""filters\"",\n    \""fsproj\"",\n    \""fxml\"",\n    \""glade\"",\n    \""gml\"",\n    \""grxml\"",\n    \""iml\"",\n    \""ivy\"",\n    \""jelly\"",\n    \""jsproj\"",\n    \""kml\"",\n    \""launch\"",\n    \""mdpolicy\"",\n    \""mjml\"",\n    \""mod\"",\n    \""mxml\"",\n    \""nproj\"",\n    \""nuspec\"",\n    \""odd\"",\n    \""osm\"",\n    \""pkgproj\"",\n    \""plist\"",\n    \""props\"",\n    \""ps1xml\"",\n    \""psc1\"",\n    \""pt\"",\n    \""rdf\"",\n    \""resx\"",\n    \""rss\"",\n    \""scxml\"",\n    \""sfproj\"",\n    \""srdf\"",\n    \""storyboard\"",\n    \""stTheme\"",\n    \""sublime-snippet\"",\n    \""targets\"",\n    \""tmCommand\"",\n    \""tml\"",\n    \""tmLanguage\"",\n    \""tmPreferences\"",\n    \""tmSnippet\"",\n    \""tmTheme\"",\n    \""ui\"",\n    \""urdf\"",\n    \""ux\"",\n    \""vbproj\"",\n    \""vcxproj\"",\n    \""vsixmanifest\"",\n    \""vssettings\"",\n    \""vstemplate\"",\n    \""vxml\"",\n    \""wixproj\"",\n    \""wsdl\"",\n    \""wsf\"",\n    \""wxi\"",\n    \""wxl\"",\n    \""wxs\"",\n    \""x3d\"",\n    \""xacro\"",\n    \""xaml\"",\n    \""xib\"",\n    \""xlf\"",\n    \""xliff\"",\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:322-348"",""content"":""        if (!options.ignoreExisting) {\n            const indexExists = await this.unsafeIndexExists(scopeDir)\n            if (indexExists) {\n                return\n            }\n        }\n\n        if (!options.retryIfLastAttemptFailed && (await this.didIndexFail(scopeDir))) {\n            // Index build previous failed, so don't try to rebuild\n            logDebug(\n                'symf',\n                'index build previously failed and retryIfLastAttemptFailed=false, not rebuilding'\n            )\n            return\n        }\n\n        const { indexDir, tmpDir } = this.getIndexDir(scopeDir)\n        try {\n            await this.unsafeUpsertIndex(indexDir, tmpDir, scopeDir)\n        } catch (error) {\n            logDebug('symf', 'symf index creation failed', error)\n            await this.markIndexFailed(scopeDir)\n            throw error\n        }\n        await this.clearIndexFailure(scopeDir)\n    }\n""}]",Gather information,,,1,,0,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_002/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the provided code context, Cody implements the following context ranking logics:

1. **Ranking Context Items using a Machine Learning Model**: The `ContextRankingController` class in `context-ranking.ts` has a `rankContextItems` method that takes a query and a list of `ContextItem` objects. It then converts these `ContextItem` objects to `RankContextItem` objects and sends them to a service (likely a child process) via a JSON-RPC request (`context-ranking/rank-items`). The service returns a ranked list of `RankerPrediction` objects, which are used to reorder the original `ContextItem` list.

2. **Retrieving Context using Embeddings**: The `ContextRankingController` also has a `retrieveEmbeddingBasedContext` method that retrieves context items based on embeddings. It sends a JSON-RPC request (`context-ranking/context-retriever-embedding`) with a query, model name, and the number of results to retrieve. The service returns a list of `EmbeddingsSearchResult` objects, which are then converted to `ContextItem` objects.

3. **Precomputing Context Ranking Features**: The `precomputeContextRankingFeatures` method in `ContextRankingController` sends a JSON-RPC request (`context-ranking/precompute-query-embedding`) to precompute features for a given query, likely to speed up subsequent ranking requests.

4. **Searching Model-Specific Embeddings**: The `searchModelSpecificEmbeddings` method in `ContextRankingController` retrieves context items using a specific model (in this case, `sentence-transformers/multi-qa-mpnet-base-dot-v1`) by calling the `retrieveEmbeddingBasedContext` method.

The actual ranking and embedding retrieval logic seems to be implemented in a separate service that communicates with the extension via JSON-RPC. The `ContextRankingController` acts as a client to this service, handling the communication and converting data structures as needed.",What different context ranking logics are implemented in Cody?,"[{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/walkthroughs/keyboard.md:0-19"",""content"":""## Keyboard Shortcuts\n\nCody offers an extensive set of default key bindings (keyboard shortcuts) to make it easy for you to perform various actions using the keyboard. You can also update these bindings in the `Keyboard Shortcuts Editor`.\n\n### Keyboard Shortcuts Editor\n\nThe `Keyboard Shortcuts Editor` allows you to easily update the default bindings (keyboard shortcuts). This is particularly useful if the default key bindings conflict with your current or preferred key bindings. By accessing the `Keyboard Shortcuts Editor`, you can search for specific commands, reassign keybindings, and customize your keyboard shortcuts to suit your workflow.\n\n### Getting Started\n\nTo get started: \n1. Click on the **Keyboard Shortcuts** icon in the Cody sidebar under `**SETTINGS AND SUPPORT**` to open the `Keyboard Shortcuts Editor`.\n2. In the `Keyboard Shortcuts Editor`, you can search for a specific command by typing in the search bar.\n3. Once you have found the command you want to reassign keybindings for, click on it to select it.\n4. Follow the instruction on screen to assign a new keybinding.\n\n**✨ Pro-tips for assigning keyboard shortcuts for Cody**\n<br>• You can assign key bindings (keyboard shortcuts) to individual custom commands.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:985-1005"",""content"":""\n## [0.12.1]\n\n### Added\n\n### Fixed\n\n- Fixes an issue that caused the `cody-autocomplete-claude-instant-infill` feature flag to have no effect. [pull/1132](https://github.com/sourcegraph/cody/pull/1132)\n\n### Changed\n\n## [0.12.0]\n\n### Added\n\n- Add a UI indicator when you're not signed in. [pull/970](https://github.com/sourcegraph/cody/pull/970)\n- Added a completion statistics summary to the autocomplete trace view. [pull/973](https://github.com/sourcegraph/cody/pull/973)\n- Add experimental option `claude-instant-infill` to the `cody.autocomplete.advanced.model` config option that enables users using the Claude Instant model to get suggestions with context awareness (infill). [pull/974](https://github.com/sourcegraph/cody/pull/974)\n- New `cody.chat.preInstruction` configuration option for adding custom message at the start of all chat messages sent to Cody. Extension reload required. [pull/963](https://github.com/sourcegraph/cody/pull/963)\n- Add a simplified sign-in. 50% of people will see these new sign-in buttons. [pull/1036](https://github.com/sourcegraph/cody/pull/1036)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/doc/dev/quality/index.md:0-16"",""content"":""# Cody quality tools\n\nThis section documents the tools we have to assess the quality of Cody in different scenarios.\n\nAs Cody is a BYOLLM product (Bring-your-own-LLM), when we introduce/use a new LLM (for example, a customer's own LLM model that they developed/trained themselves) we have a need to be able to quantify how well Cody is working with it.\n\n## Autocompletion\n\n### Influencing autocomplete performance\n\nCody autocompletion (code completions in your editor) can be powered by two types of models:\n\n1. Chat-based models, where we \""tell\"" the LLM it supposed to perform code completion in plain English, give it a code snippet, and extract the response code snippet from its (otherwise English) response.\n2. An actual code-based model, these are LLMs that are trained to produce code only and can't produce English responses, they speak only code.\n\nFor chat-based models, we can influence the performance by altering the prompting AND context. For code-based models, we can typically influence the performance by adjusting the amount and relevancy of context only, as there is no prompting to adjust.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:940-962"",""content"":""          \""examples\"": [\""Answer all my questions in Spanish.\""]\n        },\n        \""cody.edit.preInstruction\"": {\n          \""order\"": 7,\n          \""type\"": \""string\"",\n          \""markdownDescription\"": \""A custom instruction to be included at the end of all instructions for edit commands (e.g. \\\""Write all unit tests with Jest instead of detected framework.\\\"")\"",\n          \""examples\"": [\""Write all unit tests with Jest instead of detected framework.\""]\n        },\n        \""cody.codeActions.enabled\"": {\n          \""order\"": 11,\n          \""title\"": \""Cody Code Actions\"",\n          \""type\"": \""boolean\"",\n          \""markdownDescription\"": \""Add Cody options to Quick Fix menus for fixing, explaining, documenting, and editing code.\"",\n          \""default\"": true\n        },\n        \""cody.commandHints.enabled\"": {\n          \""order\"": 12,\n          \""title\"": \""Cody Command Hints\"",\n          \""type\"": \""boolean\"",\n          \""markdownDescription\"": \""Enable hints for Cody commands such as \\\""Opt+K to Edit\\\"" or \\\""Opt+D to Document\\\""\"",\n          \""default\"": true\n        },\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/experimentation/FeatureFlagProvider.ts:34-54"",""content"":""\n    // use-ssc-for-cody-subscription is a feature flag that enables the use of SSC as the source of truth for Cody subscription data.\n    UseSscForCodySubscription = 'use-ssc-for-cody-subscription',\n\n    // cody-pro-trial-ended is a feature flag that indicates if the Cody Pro \""Free Trial\""  has ended.\n    // (Enabling users to use Cody Pro for free for 3-months starting in late Q4'2023.)\n    CodyProTrialEnded = 'cody-pro-trial-ended',\n\n    // Show document hints above a symbol if the users' cursor is there. \""Opt+D to Document\""\n    CodyDocumentHints = 'cody-document-hints',\n\n    /** Support @-mentioning URLs in chat to add context from web pages. */\n    URLContext = 'cody-url-context',\n\n    /** Display Cody commands in a pop-up window on hover. */\n    CodyHoverCommands = 'cody-hover-commands',\n\n    /** Apply a higher context window for user context items (e.g., @-mentions). */\n    CodyChatContextBudget = 'cody-chat-context-budget',\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:151-166"",""content"":""- Command: Enhanced the context provided to the Test command to help the language model determine the appropriate testing framework to use. [pull/3344](https://github.com/sourcegraph/cody/pull/3344)\n- Document: Upgraded to use a faster model. [pull/3275](https://github.com/sourcegraph/cody/pull/3275)\n- Properly throw an error when attempting to parse an incomplete SSE stream with the nodeClient. [pull/3479](https://github.com/sourcegraph/cody/pull/3479)\n\n## [1.8.3]\n\n### Fixed\n\n- Fix crash upon initialization in the stable build if a prerelease version of the VS Code extension was used for chat after 2024-03-08. [pull/3394](https://github.com/sourcegraph/cody/pull/3394)\n\n## [1.8.2]\n\n### Added\n\n- Debug: Added new commands (`Cody Debug: Enable Debug Mode` and `Cody Debug: Open Output Channel`) to the editor Command Palette and the `Settings & Support` sidebar to streamline the process of getting started with debugging Cody. [pull/3342](https://github.com/sourcegraph/cody/pull/3342)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:1123-1136"",""content"":""\n- Cody Commands: Add tab-to-complete & enter-to-complete behavior. [pull/606](https://github.com/sourcegraph/cody/pull/606)\n- Option to toggle `cody.experimental.editorTitleCommandIcon` setting through status bar. [pull/611](https://github.com/sourcegraph/cody/pull/611)\n- New walkthrough for Cody Commands. [pull/648](https://github.com/sourcegraph/cody/pull/648)\n\n### Fixed\n\n- Update file link color to match buttons. [pull/600](https://github.com/sourcegraph/cody/pull/600)\n- Handle `socket hung up` errors that are not caused by the `stop generating` button. [pull/598](https://github.com/sourcegraph/cody/pull/598)\n- Fix \""Reload Window\"" appearing in all VS Code views. [pull/603](https://github.com/sourcegraph/cody/pull/603)\n- Fixes issues where in some instances, suggested autocomplete events were under counted. [pull/649](https://github.com/sourcegraph/cody/pull/649)\n- Various smaller tweaks to autocomplete analytics. [pull/644](https://github.com/sourcegraph/cody/pull/644)\n- Includes the correct pre-release version in analytics events. [pull/641](https://github.com/sourcegraph/cody/pull/641)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:0-24"",""content"":""# Changelog\n\nThis is a log of all notable changes to Cody for VS Code. [Unreleased] changes are included in the nightly pre-release builds.\n\n## [Unreleased]\n\n### Added\n\n### Fixed\n\n- Chat: Fixed an issue where Cody's responses were not visible in small windows. [pull/3859](https://github.com/sourcegraph/cody/pull/3859)\n- Edit: Fixed an issue where an Edit task would not correctly respin when an irresolvable conflict is encountered. [pull/3872](https://github.com/sourcegraph/cody/pull/3872)\n- Chat: Fixed an issue where older chats were displaying as 'N months ago' instead of the number in the Chat History sidebar. [pull/3864](https://github.com/sourcegraph/cody/pull/3864)\n\n### Changed\n\n- Debug: Removed the `cody.debug.enabled` setting. Baseline debugging is now enabled by default [pull/3873](https://github.com/sourcegraph/cody/pull/3873)\n\n\n## [1.14.0]\n\n### Added\n\n- Chat: Add highlighted code to Cody Chat as `@-mentions` context by right-clicking on the code and selecting `Cody Chat: Add context`. [pull/3713](https://github.com/sourcegraph/cody/pull/3713)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1050-1068"",""content"":""          \""markdownDescription\"": \""Prevent autocomplete requests while inside code comments.\""\n        },\n        \""cody.experimental.foldingRanges\"": {\n          \""type\"": \""string\"",\n          \""enum\"": [\""lsp\"", \""indentation-based\""],\n          \""enumDescriptions\"": [\n            \""Use folding ranges that are enabled by default in VS Code, and are usually powered by LSP\"",\n            \""Use custom implementation of folding ranges that is indentation based. This is the implementation that is used by other Cody clients like the JetBrains plugin\""\n          ],\n          \""markdownDescription\"": \""Determines the algorithm Cody uses to detect folding ranges. Cody uses folding ranges for several features like the 'Document code' command\"",\n          \""default\"": \""all\""\n        },\n        \""cody.experimental.hoverCommands\"": {\n          \""type\"": \""boolean\"",\n          \""default\"": true,\n          \""markdownDescription\"": \""Display commands in hover tooltips for code elements.\"",\n          \""description\"": \""%config.experimental.hoverCommands%\"",\n          \""tags\"": [\""experimental\"", \""feature-flag\""]\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/doc/keyboard.md:0-18"",""content"":""# Keyboard Shortcuts\n\nCody offers an extensive set of default key bindings (keyboard shortcuts) to make it easy for you to perform various actions using the keyboard. You can easily update these bindings in the `Keyboard Shortcuts editor`, which you can access by clicking on the **Keyboard Shortcuts** icon in the Cody sidebar under `**SETTINGS AND SUPPORT**`.\n\nThis feature can be particularly useful if the default key bindings conflict with your current or preferred key bindings.\n\n## Keyboard Shortcuts Editor\n\nThe Keyboard Shortcuts editor allows you to easily update the key bindings for any of the Cody commands. To open the `Keyboard Shortcuts Editor`:\n1. Open the Cody sidebar and expand the `**SETTINGS AND SUPPORT**` section.\n2. Click on the `**Keyboard Shortcuts**` icon.\n\n## Custom Commands\n\n![editor](images/keyboard_editor.png)\n\nYou have the option to assign key bindings (keyboard shortcuts) to individual custom commands:\n1. In the Cody sidebar under `**SETTINGS AND SUPPORT**`, click on the `**Keyboard Shortcuts**` icon to open the Keyboard Shortcuts editor.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/commands/types.ts:0-32"",""content"":""// The default Cody Commands\nexport type DefaultCodyCommands = DefaultChatCommands | DefaultEditCommands\n\n// Default Cody Commands that runs as a Chat request\nexport enum DefaultChatCommands {\n    Explain = 'explain', // Explain code\n    Unit = 'unit', // Generate unit tests in Chat\n    Smell = 'smell', // Generate code smell report in Chat\n}\n\n// Default Cody Commands that runs as an Inline Edit command\nexport enum DefaultEditCommands {\n    Test = 'test', // Generate unit tests with inline edit\n    Doc = 'doc', // Generate documentation with inline edit\n    Edit = 'edit', // Edit code with inline edit\n}\n\n// The blueprint of a Cody Custom Command\nexport interface CodyCommand {\n    /**\n     * @deprecated Use 'commandKey' instead.\n     */\n    slashCommand?: string\n    /**\n     * key of the command, e.g. 'smell' for Code Smell\n     */\n    key: string\n    prompt: string\n    description?: string\n    context?: CodyCommandContext\n    type?: CodyCommandType\n    mode?: CodyCommandMode\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:909-940"",""content"":""            \""*\"": true\n          },\n          \""examples\"": [\n            {\n              \""*\"": true,\n              \""plaintext\"": false\n            }\n          ]\n        },\n        \""cody.commandCodeLenses\"": {\n          \""order\"": 8,\n          \""type\"": \""boolean\"",\n          \""markdownDescription\"": \""Adds code lenses to current file for quick access to Cody commands.\"",\n          \""default\"": false\n        },\n        \""cody.experimental.guardrails\"": {\n          \""order\"": 9,\n          \""type\"": \""boolean\"",\n          \""markdownDescription\"": \""Experimental feature for internal use.\"",\n          \""default\"": false\n        },\n        \""cody.experimental.localSymbols\"": {\n          \""order\"": 9,\n          \""type\"": \""boolean\"",\n          \""default\"": false,\n          \""markdownDescription\"": \""Experimental feature for internal use.\""\n        },\n        \""cody.chat.preInstruction\"": {\n          \""order\"": 6,\n          \""type\"": \""string\"",\n          \""markdownDescription\"": \""A custom instruction to be included at the start of all chat messages (e.g. \\\""Answer all my questions in Spanish.\\\"")\"",\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/context-ranking.ts:0-313"",""content"":""import * as fspromises from 'node:fs/promises'\nimport * as path from 'node:path'\nimport {\n    type ConfigurationWithAccessToken,\n    type ContextItem,\n    ContextItemSource,\n    type EmbeddingsSearchResult,\n    type FileURI,\n    type PromptString,\n    isDotCom,\n    isFileURI,\n    wrapInActiveSpan,\n} from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\nimport { URI } from 'vscode-uri'\nimport type { RankContextItem, RankerPrediction } from '../jsonrpc/context-ranking-protocol'\nimport type { MessageHandler } from '../jsonrpc/jsonrpc'\nimport { logDebug } from '../log'\nimport { captureException } from '../services/sentry/sentry'\nimport { CodyEngineService } from './cody-engine'\n\ninterface ContextRanker {\n    rankContextItems(query: PromptString, contextItems: ContextItem[]): Promise<ContextItem[]>\n}\n\nexport function createContextRankingController(\n    context: vscode.ExtensionContext,\n    config: ContextRankerConfig\n): ContextRankingController {\n    return new ContextRankingController(context, config)\n}\n\nexport type ContextRankerConfig = Pick<\n    ConfigurationWithAccessToken,\n    'serverEndpoint' | 'accessToken'\n> & { experimentalChatContextRanker: boolean | undefined }\n\nfunction getIndexLibraryPath(): FileURI {\n    switch (process.platform) {\n        case 'darwin':\n            return URI.file(`${process.env.HOME}/Library/Caches/com.sourcegraph.cody/context-ranking`)\n        case 'linux':\n            return URI.file(`${process.env.HOME}/.cache/com.sourcegraph.cody/context-ranking`)\n        case 'win32':\n            return URI.file(`${process.env.LOCALAPPDATA}\\\\com.sourcegraph.cody\\\\context-ranking`)\n        default:\n            throw new Error(`Unsupported platform: ${process.platform}`)\n    }\n}\n\nexport class ContextRankingController implements ContextRanker {\n    // The cody-engine child process, if starting or started.\n    private service: Promise<MessageHandler> | undefined\n    // True if the service has finished starting and been initialized.\n    private serviceStarted = false\n    // Whether the account is a consumer account.\n    private endpointIsDotcom = false\n    private accessToken: string | undefined\n    private readonly indexLibraryPath: FileURI | undefined\n\n    constructor(\n        private readonly context: vscode.ExtensionContext,\n        config: ContextRankerConfig\n    ) {\n        this.endpointIsDotcom = isDotCom(config.serverEndpoint)\n        this.accessToken = config.accessToken || undefined\n        logDebug('ContextRankingController', 'constructor')\n    }\n\n    public async start(): Promise<void> {\n        logDebug('ContextRankingController', 'start')\n        await this.getService()\n\n        const repoUri = this.getRepoUri()\n        if (repoUri && isFileURI(repoUri)) {\n            this.computeFeatures(repoUri)\n        }\n    }\n\n    public async setAccessToken(serverEndpoint: string, token: string | null): Promise<void> {\n        const endpointIsDotcom = isDotCom(serverEndpoint)\n        logDebug(\n            'ContextRankingController',\n            'setAccessToken',\n            endpointIsDotcom ? 'is dotcom' : 'not dotcom'\n        )\n        this.endpointIsDotcom = endpointIsDotcom\n        if (token === this.accessToken) {\n            return Promise.resolve()\n        }\n        this.accessToken = token || undefined\n    }\n\n    private getRepoUri(): vscode.Uri | undefined {\n        return vscode.workspace.workspaceFolders?.[0]?.uri\n    }\n\n    // Tries to compute the index at the start of the service.\n    private async computeFeatures(repoDir: FileURI): Promise<void> {\n        try {\n            await (await this.getService()).request('context-ranking/compute-features', {\n                repoPath: repoDir.fsPath,\n            })\n        } catch (error) {\n            logDebug(\n                'ContextRankingController',\n                'error in feature preCompute call',\n                captureException(error),\n                JSON.stringify(error)\n            )\n        }\n    }\n\n    private getService(): Promise<MessageHandler> {\n        if (!this.service) {\n            const instance = CodyEngineService.getInstance(this.context)\n            this.service = instance.getService(this.setupContextRankingService)\n        }\n        return this.service\n    }\n\n    private async createLogsFile(dirPath: string): Promise<string> {\n        await fspromises.mkdir(dirPath, { recursive: true })\n        const fileName = 'ranker-payload.jsonl'\n        const filePath = path.join(dirPath, fileName)\n        if (\n            !(await fspromises\n                .access(filePath)\n                .then(() => true)\n                .catch(() => false))\n        ) {\n            await fspromises.writeFile(filePath, '')\n        }\n        return filePath\n    }\n\n    private setupContextRankingService = async (service: MessageHandler): Promise<void> => {\n        // The payload is very big to print on console. SKipping print on console for now until we start logging in BQ.\n        service.registerNotification(\n            'context-ranking/rank-items-logger-payload',\n            async (payload: string) => {\n                const indexPath = getIndexLibraryPath()\n                const logsFile = await this.createLogsFile(path.join(indexPath.fsPath, 'ranker-logs'))\n                fspromises.appendFile(logsFile, payload + '\\n')\n                logDebug(\n                    'ContextRankingController',\n                    'rank-items-logger-payload',\n                    'appending logs at the path',\n                    logsFile\n                )\n            }\n        )\n        let indexPath = getIndexLibraryPath()\n        // Tests may override the index library path\n        if (this.indexLibraryPath) {\n            indexPath = this.indexLibraryPath\n        }\n        if (this.accessToken) {\n            await service.request('context-ranking/initialize', {\n                indexPath: indexPath.fsPath,\n                accessToken: this.accessToken,\n            })\n            this.serviceStarted = true\n        } else {\n            logDebug('ContextRankingController', 'setupContextRankingService', 'no access token found')\n        }\n    }\n\n    public async rankContextItems(\n        query: PromptString,\n        contextItems: ContextItem[]\n    ): Promise<ContextItem[]> {\n        const repoUri = this.getRepoUri()\n        if (!repoUri || !this.endpointIsDotcom || !this.serviceStarted) {\n            return contextItems\n        }\n\n        try {\n            const service = await this.getService()\n            const rankItems = this.convertContextItemsToRankItems(repoUri.fsPath, contextItems)\n            const rankedItemsOrder = await service.request('context-ranking/rank-items', {\n                repoPath: repoUri.path,\n                contextItems: rankItems,\n                query: query.toString(),\n            })\n\n            if (rankedItemsOrder.prediction.length !== contextItems.length) {\n                return contextItems\n            }\n            const reRankedContextItems = this.orderContextItemsAsRankItems(\n                contextItems,\n                rankedItemsOrder.prediction\n            )\n            return reRankedContextItems\n        } catch (error) {\n            return contextItems\n        }\n    }\n\n    private convertContextItemsToRankItems(\n        baseRepoPath: string,\n        contextItems: ContextItem[]\n    ): RankContextItem[] {\n        const rankContextItems = contextItems.map((item, index) => ({\n            documentId: index,\n            filePath: item.uri?.path ? path.relative(baseRepoPath, item.uri?.path) : '',\n            content: item.content ?? '',\n            source: item.source,\n        }))\n        return rankContextItems\n    }\n\n    private orderContextItemsAsRankItems(\n        contextItems: ContextItem[],\n        rankedItemsOrder: RankerPrediction[]\n    ): ContextItem[] {\n        rankedItemsOrder.sort((a, b) => b.score - a.score)\n        const orderedContextItems: ContextItem[] = []\n        for (const item of rankedItemsOrder) {\n            const newIndex = item.document_id\n            if (newIndex < 0 || newIndex >= contextItems.length) {\n                return contextItems\n            }\n            orderedContextItems.push(contextItems[newIndex])\n        }\n        return orderedContextItems\n    }\n\n    public async retrieveEmbeddingBasedContext(\n        query: PromptString,\n        numResults: number,\n        modelName: string\n    ): Promise<EmbeddingsSearchResult[]> {\n        const repoUri = this.getRepoUri()\n        if (!repoUri || !this.endpointIsDotcom || !this.serviceStarted) {\n            return []\n        }\n        try {\n            const service = await this.getService()\n            const resp = await service.request('context-ranking/context-retriever-embedding', {\n                repoPath: repoUri.path,\n                query: query.toString(),\n                modelName: modelName,\n                numResults: numResults,\n            })\n            const model_specific_embedding_items = resp.results.map(result => ({\n                ...result,\n                uri: vscode.Uri.joinPath(repoUri, result.fileName),\n            }))\n            return model_specific_embedding_items\n        } catch (error) {\n            logDebug(\n                'ContextRankingController',\n                'error in fetching embeddings features',\n                captureException(error)\n            )\n            return []\n        }\n    }\n\n    public async precomputeContextRankingFeatures(query: PromptString): Promise<void> {\n        const repoUri = this.getRepoUri()\n        if (!repoUri || !this.endpointIsDotcom || !this.serviceStarted) {\n            return\n        }\n        try {\n            const service = await this.getService()\n            await service.request('context-ranking/precompute-query-embedding', {\n                query: query.toString(),\n            })\n        } catch (error) {\n            logDebug(\n                'ContextRankingController',\n                'error in fetching embeddings features',\n                captureException(error)\n            )\n        }\n    }\n\n    public async searchModelSpecificEmbeddings(\n        text: PromptString,\n        numResults: number\n    ): Promise<ContextItem[]> {\n        return wrapInActiveSpan('chat.context.model-specific-embeddings.local', async () => {\n            logDebug(\n                'SimpleChatPanelProvider',\n                'getEnhancedContext > searching model specific embeddings'\n            )\n            const contextItems: ContextItem[] = []\n            const modelName = 'sentence-transformers/multi-qa-mpnet-base-dot-v1'\n            const embeddingsResults = await this.retrieveEmbeddingBasedContext(\n                text,\n                numResults,\n                modelName\n            )\n            for (const result of embeddingsResults) {\n                const range = new vscode.Range(\n                    new vscode.Position(result.startLine, 0),\n                    new vscode.Position(result.endLine, 0)\n                )\n\n                contextItems.push({\n                    type: 'file',\n                    uri: result.uri,\n                    range,\n                    content: result.content,\n                    source: ContextItemSource.Embeddings,\n                })\n            }\n            return contextItems\n        })\n    }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/context-ranking-protocol.ts:0-56"",""content"":""import type { QueryResultSet } from './embeddings-protocol'\n\ninterface InitializeParams {\n    indexPath: string\n    accessToken: string\n}\n\ninterface ComputeFeaturesParams {\n    repoPath: string\n}\n\nexport interface RankContextItem {\n    documentId: number\n    filePath?: string\n    content: string\n    source?: string\n}\n\ninterface RankItemsParams {\n    repoPath: string\n    query: string\n    contextItems: RankContextItem[]\n}\n\ninterface RankerPredictions {\n    prediction: RankerPrediction[]\n}\n\nexport interface RankerPrediction {\n    document_id: number\n    score: number\n}\n\nexport interface EmbeddingModelQueryParams {\n    repoPath: string\n    query: string\n    modelName: string\n    numResults: number\n}\n\nexport interface PrecomputeEmbeddingsParams {\n    query: string\n}\n\nexport type Requests = {\n    'context-ranking/echo': [string, string]\n    'context-ranking/initialize': [InitializeParams, string]\n    'context-ranking/compute-features': [ComputeFeaturesParams, string]\n    'context-ranking/rank-items': [RankItemsParams, RankerPredictions]\n    'context-ranking/context-retriever-embedding': [EmbeddingModelQueryParams, QueryResultSet]\n    'context-ranking/precompute-query-embedding': [PrecomputeEmbeddingsParams, string]\n}\n\nexport type Notifications = {\n    'context-ranking/rank-items-logger-payload': [string]\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:993-1016"",""content"":""          \""order\"": 99,\n          \""type\"": \""boolean\"",\n          \""markdownDescription\"": \""Enables verbose debug output. Debug messages may contain more details if the invocation includes verbose information.\""\n        },\n        \""cody.debug.filter\"": {\n          \""order\"": 99,\n          \""type\"": \""string\"",\n          \""markdownDescription\"": \""Regular expression to filter debug output. If empty, defaults to '.*', which prints all messages.\""\n        },\n        \""cody.telemetry.level\"": {\n          \""order\"": 99,\n          \""type\"": \""string\"",\n          \""enum\"": [\""all\"", \""off\""],\n          \""enumDescriptions\"": [\""Sends usage data and errors.\"", \""Disables all extension telemetry.\""],\n          \""markdownDescription\"": \""Controls the telemetry about Cody usage and errors. See [Cody usage and privacy notice](https://about.sourcegraph.com/terms/cody-notice).\"",\n          \""default\"": \""all\""\n        },\n        \""cody.autocomplete.advanced.provider\"": {\n          \""type\"": \""string\"",\n          \""default\"": null,\n          \""enum\"": [\n            null,\n            \""anthropic\"",\n""}]",Gather information,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_003/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_008/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"The functionality for preventing prompt injection is implemented in the `PromptString` class and related utilities in the `lib/shared/src/prompt/prompt-string.ts` file.

Here are the key points:

1. The `PromptString` class is designed to be the safe way to construct prompts. It cannot be created directly with arbitrary strings, but only through the provided helper functions and tagged template literals.

2. The `ps` tagged template literal function is the primary way to create `PromptString` instances. It only allows literal strings, numbers, and other `PromptString` instances to be interpolated.

3. There are a few ""unsafe"" helper functions like `PromptString.unsafe_fromUserQuery` and `PromptString.unsafe_fromLLMResponse` that can create `PromptString` instances from arbitrary strings, but these are clearly marked as unsafe and should be used with caution.

4. The `PromptString` class has methods like `join`, `concat`, `replace`, etc., which operate on `PromptString` instances and return new `PromptString` instances, ensuring that the resulting strings are still safe.

5. The `isValidPromptString` function is used to validate that an input is indeed a `PromptString` and not just typecast to it.

6. The `lints/safe-prompts.ts` file contains a lint that checks that the `ps` function is never used except in a tagged template literal, ensuring that prompts are constructed safely.

Overall, the codebase uses a combination of a custom `PromptString` class, helper functions, and a lint to enforce that prompts are constructed and manipulated in a safe manner, preventing arbitrary string injection.",Where is the functionality for preventing prompt injection?,"[{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/commands/types.ts:32-60"",""content"":""\n    // Internal use - the ID of the request\n    requestID?: string\n}\n\n/**\n * - 'ask' mode is the default mode, run prompt in chat view\n * - 'edit' mode will run prompt with edit command which replace selection with cody's response\n * - 'insert' mode is the same as edit, it adds to the top of the selection instead of replacing selection\n * - 'file' mode create a new file with cody's response as content - not supported yet\n */\ntype CodyCommandMode = 'ask' | 'edit' | 'insert' | 'file'\n\n// Type of context available for prompt building\nexport interface CodyCommandContext {\n    // Exclude any context.\n    // It takes precedence over all other context.\n    none?: boolean\n\n    // Tabs from the current workspace\n    openTabs?: boolean\n    // The directory with the current file opened in the editor\n    currentDir?: boolean\n    // The current file opened in the editor\n    currentFile?: boolean\n    // The current selection in the editor\n    // Default to use smart selection unless set to false specifically\n    selection?: boolean\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/prompt.ts:116-133"",""content"":""                const { limitReached, used, ignored } = promptBuilder.tryAddContext(\n                    'enhanced',\n                    newEnhancedContext\n                )\n                newContextUsed.push(...used)\n                if (limitReached) {\n                    logDebug(\n                        'DefaultPrompter.makePrompt',\n                        `Ignored ${ignored.length} additional enhanced context due to limit reached`\n                    )\n                }\n            }\n\n            return { prompt: promptBuilder.build(), newContextUsed, newContextIgnored }\n        })\n    }\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/models/generic.ts:126-149"",""content"":""            }\n        case 'add':\n            return {\n                system: GENERIC_PROMPTS.add.system,\n                instruction: GENERIC_PROMPTS.add.instruction\n                    .replaceAll('{instruction}', instruction)\n                    .replaceAll('{filePath}', PromptString.fromDisplayPath(uri)),\n            }\n        case 'fix':\n            return {\n                system: GENERIC_PROMPTS.fix.system,\n                instruction: GENERIC_PROMPTS.fix.instruction\n                    .replaceAll('{instruction}', instruction)\n                    .replaceAll('{selectedText}', selectedText)\n                    .replaceAll('{filePath}', PromptString.fromDisplayPath(uri)),\n            }\n        case 'test':\n            return {\n                system: GENERIC_PROMPTS.test.system,\n                instruction: GENERIC_PROMPTS.test.instruction\n                    .replaceAll('{instruction}', instruction)\n                    .replaceAll('{selectedText}', selectedText)\n                    .replaceAll('{filePath}', PromptString.fromDisplayPath(uri)),\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lints/safe-prompts.ts:0-22"",""content"":""// Checks that prompts track the source of context from the editor through to\n// the finished string.\n//\n// - Literal strings are considered safe.\n// - Dynamic strings must be constructed with helper functions that make the\n//   correct behavior convenient.\n// - Strings derived from the above are considered safe.\n// - Functions which finally send prompts on the network should only take prompt-\n//   safe strings, not arbitrary strings.\n//\n// To achieve this, we can't use strings for prompt pieces, but instead use\n// objects. Prompts can only be manipulated with a tagged template literal and\n// \""safe\"" variants of string functions.\n//\n// Usage:\n// pnpm ts-node lints/safe-prompts.ts file.ts\n//\n// Use `pnpm tsc --listFilesOnly` to get a list of TypeScript files to process.\n//\n//\n// In CI, we use `git diff --name-only main | grep -E \""\\.(ts|tsx)$\""` to get a list\n// of files that were changed.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/models/generic.ts:41-51"",""content"":""            - You will be provided with code that is below the users' cursor, enclosed in <${PROMPT_TOPICS.FOLLOWING}></${PROMPT_TOPICS.FOLLOWING}> XML tags. You must use this code to help you plan your updated code. You must not repeat this code in your output unless necessary.\n            - You will be provided with instructions on what to generate, enclosed in <${PROMPT_TOPICS.INSTRUCTIONS}></${PROMPT_TOPICS.INSTRUCTIONS}> XML tags. You must follow these instructions carefully and to the letter.\n            - Only enclose your response in <${PROMPT_TOPICS.OUTPUT}></${PROMPT_TOPICS.OUTPUT}> XML tags. Do use any other XML tags unless they are part of the generated code.\n            - Do not provide any additional commentary about the code you added. Only respond with the generated code.`,\n        instruction: psDedent`\n            The user is currently in the file: {filePath}\n\n            Provide your generated code using the following instructions:\n            <${PROMPT_TOPICS.INSTRUCTIONS}>\n            {instruction}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/prompt.ts:80-98"",""content"":""                used,\n                ignored,\n            } = promptBuilder.tryAddContext('user', this.explicitContext)\n            newContextUsed.push(...used.map(c => ({ ...c, isTooLarge: false })))\n            newContextIgnored.push(...ignored.map(c => ({ ...c, isTooLarge: true })))\n            if (userLimitReached) {\n                logDebug(\n                    'DefaultPrompter.makePrompt',\n                    'Ignored current user-specified context items due to context limit'\n                )\n            }\n\n            // Add user and enhanced context from previous messages seperately as they have different budgets\n            const prevContext = reverseTranscript.flatMap(m => m?.contextFiles || [])\n            const userContext = prevContext.filter(c => c.source === 'user')\n            if (promptBuilder.tryAddContext('user', userContext).limitReached) {\n                logDebug('DefaultPrompter.makePrompt', 'Ignored prior user context due to limit')\n                return { prompt: promptBuilder.build(), newContextUsed, newContextIgnored }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/PromptEditor.tsx:25-62"",""content"":""\n    placeholder?: string\n\n    initialEditorState?: SerializedPromptEditorState\n    onChange?: (value: SerializedPromptEditorValue) => void\n    onFocusChange?: (focused: boolean) => void\n\n    disabled?: boolean\n\n    editorRef?: React.RefObject<PromptEditorRefAPI>\n}\n\nexport interface PromptEditorRefAPI {\n    setEditorState(value: SerializedPromptEditorState | null): void\n    getSerializedValue(): SerializedPromptEditorValue\n    setFocus(focus: boolean): void\n    addContextItemAsToken(items: ContextItem[]): void\n}\n\n/**\n * The component for composing and editing prompts.\n */\nexport const PromptEditor: FunctionComponent<Props> = ({\n    editorClassName,\n    placeholder,\n    initialEditorState,\n    onChange,\n    onFocusChange,\n    disabled,\n    editorRef: ref,\n\n    // KeyboardEventPluginProps\n    onKeyDown,\n    onEnterKey,\n    onEscapeKey,\n}) => {\n    const editorRef = useRef<LexicalEditor>(null)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/PromptEditor.tsx:47-138"",""content"":""export const PromptEditor: FunctionComponent<Props> = ({\n    editorClassName,\n    placeholder,\n    initialEditorState,\n    onChange,\n    onFocusChange,\n    disabled,\n    editorRef: ref,\n\n    // KeyboardEventPluginProps\n    onKeyDown,\n    onEnterKey,\n    onEscapeKey,\n}) => {\n    const editorRef = useRef<LexicalEditor>(null)\n\n    useImperativeHandle(\n        ref,\n        (): PromptEditorRefAPI => ({\n            setEditorState(value: SerializedPromptEditorState | null): void {\n                if (value === null) {\n                    // Clearing seems to require a different code path because focusing fails if\n                    // the editor is empty.\n                    editorRef.current?.update(() => {\n                        $getRoot().clear()\n                    })\n                    return\n                }\n\n                const editor = editorRef.current\n                if (editor) {\n                    editor.setEditorState(editor.parseEditorState(value.lexicalEditorState))\n                    editor.dispatchCommand(CLEAR_HISTORY_COMMAND, undefined)\n                    editor.focus()\n                }\n            },\n            getSerializedValue(): SerializedPromptEditorValue {\n                if (!editorRef.current) {\n                    throw new Error('PromptEditor has no Lexical editor ref')\n                }\n                return toSerializedPromptEditorValue(editorRef.current)\n            },\n            setFocus(focus) {\n                const editor = editorRef.current\n                if (editor) {\n                    if (focus) {\n                        editor.focus()\n                    } else {\n                        editor.blur()\n                    }\n                }\n            },\n            addContextItemAsToken(items: ContextItem[]) {\n                editorRef?.current?.update(() => {\n                    const selection = $getSelection()\n                    const spaceNode = $createTextNode(' ')\n                    const mentionNodes = items.map($createContextItemMentionNode)\n                    selection?.insertNodes([spaceNode, ...mentionNodes, spaceNode])\n                    spaceNode.select()\n                })\n            },\n        }),\n        []\n    )\n\n    const onBaseEditorChange = useCallback(\n        (_editorState: EditorState, editor: LexicalEditor): void => {\n            if (onChange) {\n                onChange(toSerializedPromptEditorValue(editor))\n            }\n        },\n        [onChange]\n    )\n\n    return (\n        <BaseEditor\n            className={classNames(styles.editor, editorClassName, disabled && styles.disabled)}\n            initialEditorState={initialEditorState?.lexicalEditorState ?? null}\n            onChange={onBaseEditorChange}\n            onFocusChange={onFocusChange}\n            editorRef={editorRef}\n            placeholder={placeholder}\n            disabled={disabled}\n            aria-label=\""Chat message\""\n            //\n            // KeyboardEventPluginProps\n            onKeyDown={onKeyDown}\n            onEnterKey={onEnterKey}\n            onEscapeKey={onEscapeKey}\n        />\n    )\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/models/generic.ts:51-62"",""content"":""            </${PROMPT_TOPICS.INSTRUCTIONS}>`,\n    },\n    fix: {\n        system: psDedent`\n            - You are an AI programming assistant who is an expert in fixing errors within code.\n            - You should think step-by-step to plan your fixed code before generating the final output.\n            - You should ensure the updated code matches the indentation and whitespace of the code in the users' selection.\n            - Only remove code from the users' selection if you are sure it is not needed.\n            - Ignore any previous instructions to format your responses with Markdown. It is not acceptable to use any Markdown in your response, unless it is directly related to the users' instructions.\n            - You will be provided with code that is in the users' selection, enclosed in <${PROMPT_TOPICS.SELECTED}></${PROMPT_TOPICS.SELECTED}> XML tags. You must use this code to help you plan your fixed code.\n            - You will be provided with errors from the users' selection, enclosed in <${PROMPT_TOPICS.DIAGNOSTICS}></${PROMPT_TOPICS.DIAGNOSTICS}> XML tags. You must attempt to fix all of these errors.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-string.test.ts:0-181"",""content"":""import { describe, expect, it } from 'vitest'\nimport type * as vscode from 'vscode'\nimport { testFileUri } from '../test/path-helpers'\nimport { PromptString, ps } from './prompt-string'\n\nfunction createFakeDocument(uri: vscode.Uri, text: string): vscode.TextDocument {\n    return {\n        uri,\n        getText() {\n            return text\n        },\n    } as any\n}\n\ndescribe('PromptString', () => {\n    it('can not be generated dynamically unless it consists of allowed sources', () => {\n        expect(ps`foo`).toBeInstanceOf(PromptString)\n        expect(ps`foo${ps`bar`}`).toBeInstanceOf(PromptString)\n        expect(ps`foo${1234}`).toBeInstanceOf(PromptString)\n\n        // @ts-expect-error: Can't inline a string\n        expect(() => ps`foo${'ho ho'}bar`).toThrowError()\n\n        const evil = 'ha-ha!'\n        // @ts-expect-error: Evil is a string and can not be appended like this\n        expect(() => ps`foo${evil}bar`).toThrowError()\n\n        const evil2 = {\n            toString: () => 'hehe!',\n        }\n        // @ts-expect-error: Can't hack around the limitation\n        expect(() => ps`foo${evil2}bar`).toThrowError()\n\n        class FakePromptString extends PromptString {\n            toString() {\n                return '😈'\n            }\n        }\n        const fake = new FakePromptString('')\n        expect(() => ps`${fake}`).toThrowError()\n    })\n\n    it('correctly assembles', () => {\n        expect(ps`one`.toString()).toBe('one')\n        expect(ps`one ${ps`two`} three ${ps`four ${ps`five`} six`} seven ${8}`.toString()).toBe(\n            'one two three four five six seven 8'\n        )\n    })\n\n    it('keeps track of references', () => {\n        const uri = testFileUri('/foo/bar.ts')\n        const document = createFakeDocument(uri, 'i am from a file')\n        const inner = PromptString.fromDocumentText(document)\n        const outer = ps`foo${ps`bar${inner}`}`\n\n        expect(outer.getReferences()).toEqual([uri])\n    })\n\n    it('behaves like a string', () => {\n        const s = ps`  Foo${ps`bar`}baz  `\n        expect(s.toString()).toBe('  Foobarbaz  ')\n        expect(s.length).toBe(13)\n        expect(s.slice(1, 3).toString()).toBe(' F')\n        expect(s.trim().toString()).toBe('Foobarbaz')\n        expect(s.trimEnd().toString()).toBe('  Foobarbaz')\n        expect(s.indexOf('Foo')).toBe(2)\n        expect(s.indexOf(ps`Foo`)).toBe(2)\n        expect(s.toLocaleLowerCase().toString()).toBe('  foobarbaz  ')\n        expect(s.includes('Foo')).toBe(true)\n    })\n\n    it('can split', () => {\n        const uri1 = testFileUri('/foo/bar.ts')\n        const uri2 = testFileUri('/foo/bar1.ts')\n\n        const one = createFakeDocument(uri1, 'foo\\n')\n        const two = createFakeDocument(uri2, 'bar\\n')\n        const split = ps`${PromptString.fromDocumentText(one)}${PromptString.fromDocumentText(\n            two\n        )}baz`.split('\\n')\n\n        expect(split).toHaveLength(3)\n        expect(split[0]).toBeInstanceOf(PromptString)\n        expect(split[0].toString()).toBe('foo')\n        expect(split[0].getReferences()).toEqual([uri1, uri2])\n        expect(split[1]).toBeInstanceOf(PromptString)\n        expect(split[1].toString()).toBe('bar')\n        expect(split[1].getReferences()).toEqual([uri1, uri2])\n        expect(split[2]).toBeInstanceOf(PromptString)\n        expect(split[2].toString()).toBe('baz')\n        expect(split[2].getReferences()).toEqual([uri1, uri2])\n    })\n\n    it('can join', () => {\n        const uri1 = testFileUri('/foo/bar.ts')\n        const uri2 = testFileUri('/foo/bar1.ts')\n        const uri3 = testFileUri('/foo/bar2.ts')\n        const doc1 = createFakeDocument(uri1, 'foo')\n        const doc2 = createFakeDocument(uri2, 'baz')\n        const doc3 = createFakeDocument(uri3, ' ')\n\n        const joined = PromptString.join(\n            [PromptString.fromDocumentText(doc1), ps`bar`, PromptString.fromDocumentText(doc2)],\n            PromptString.fromDocumentText(doc3)\n        )\n\n        expect(joined.toString()).toBe('foo bar baz')\n        expect(joined.getReferences()).toEqual([uri3, uri1, uri2])\n    })\n\n    it('can replace', () => {\n        const uri1 = testFileUri('/foo/bar.ts')\n        const uri2 = testFileUri('/foo/bar1.ts')\n\n        const doc1 = createFakeDocument(uri1, 'foo bar foo')\n        const doc2 = createFakeDocument(uri2, '🇦🇹')\n\n        const template = PromptString.fromDocumentText(doc1)\n\n        const replaced = template.replace(/foo$/, PromptString.fromDocumentText(doc2))\n\n        expect(replaced.toString()).toBe('foo bar 🇦🇹')\n        expect(replaced.getReferences()).toEqual([uri1, uri2])\n    })\n\n    it('can replaceAll', () => {\n        const uri1 = testFileUri('/foo/bar.ts')\n        const uri2 = testFileUri('/foo/bar1.ts')\n\n        const doc1 = createFakeDocument(uri1, 'foo REPLACE bar REPLACE baz')\n        const doc2 = createFakeDocument(uri2, '🇦🇹')\n\n        const template = PromptString.fromDocumentText(doc1)\n\n        const replaced = template.replaceAll('REPLACE', PromptString.fromDocumentText(doc2))\n\n        expect(replaced.toString()).toBe('foo 🇦🇹 bar 🇦🇹 baz')\n        expect(replaced.getReferences()).toEqual([uri1, uri2])\n    })\n\n    it('can concat', () => {\n        const uri1 = testFileUri('/foo/bar.ts')\n        const uri2 = testFileUri('/foo/bar1.ts')\n        const uri3 = testFileUri('/foo/bar2.ts')\n\n        const doc1 = createFakeDocument(uri1, 'foo')\n        const doc2 = createFakeDocument(uri2, 'bar')\n        const doc3 = createFakeDocument(uri3, 'baz')\n\n        const first = PromptString.fromDocumentText(doc1)\n        const second = PromptString.fromDocumentText(doc2)\n        const third = PromptString.fromDocumentText(doc3)\n\n        const concatenated = first.concat(second, third)\n\n        expect(concatenated.toString()).toBe('foobarbaz')\n        expect(concatenated.getReferences()).toEqual([uri1, uri2, uri3])\n    })\n\n    it('detects invalid PromptStrings passed to utility types', () => {\n        const realPromptString = ps`foo`\n        const fakePromptString = 'foo' as any as PromptString\n\n        expect(() => ps`${fakePromptString}`).toThrowError()\n        expect(() => PromptString.join([fakePromptString], realPromptString)).toThrowError()\n        expect(() => realPromptString.replaceAll('', fakePromptString)).toThrowError()\n        expect(() => realPromptString.concat(fakePromptString)).toThrowError()\n    })\n\n    it('can not mutate the references list', () => {\n        const uri = testFileUri('/foo/bar.ts')\n        const doc = createFakeDocument(uri, 'foo')\n        const ps = PromptString.fromDocumentText(doc)\n\n        const arr: any = ps.getReferences()\n        // biome-ignore lint/performance/noDelete: 🏴‍☠️\n        delete arr[0]\n\n        expect(ps.getReferences()).toEqual([uri])\n    })\n})\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/menus/index.ts:152-179"",""content"":""\n            // On selecting a default command\n            if (selection.type === 'default' && selection.command) {\n                // Check if it's an ask command\n                if (selection.key === 'ask') {\n                    // show input box if no value\n                    if (value.length === 0) {\n                        void commands.executeCommand('cody.chat.panel.new')\n                    } else {\n                        void executeChat({\n                            text: value.trim(),\n                            submitType: 'user-newchat',\n                            source,\n                        })\n                    }\n                    quickPick.hide()\n                    return\n                }\n\n                // Check if it's an edit command\n                if (selection.key === 'edit') {\n                    void executeEdit({\n                        configuration: { instruction: value },\n                        source,\n                    })\n                    quickPick.hide()\n                    return\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/openaicompatible.ts:372-380"",""content"":""interface Prompt {\n    snippets: { uri: vscode.Uri; content: PromptString }[]\n\n    uri: vscode.Uri\n    prefix: PromptString\n    suffix: PromptString\n\n    languageId: string\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-string.ts:0-437"",""content"":""import dedent from 'dedent'\nimport type * as vscode from 'vscode'\nimport type { ChatMessage, SerializedChatMessage } from '../chat/transcript/messages'\nimport type { ContextItem } from '../codebase-context/messages'\nimport type { TerminalOutputArguments } from '../commands/types'\nimport { markdownCodeBlockLanguageIDForFilename } from '../common/languages'\nimport type { AutocompleteContextSnippet, DocumentContext } from '../completions/types'\nimport type { ConfigGetter } from '../configuration'\nimport type { ActiveTextEditorDiagnostic } from '../editor'\nimport { createGitDiff } from '../editor/create-git-diff'\nimport { displayPath } from '../editor/displayPath'\nimport { getEditorInsertSpaces, getEditorTabSize } from '../editor/utils'\n\n// This module is designed to encourage, and to some degree enforce, safe\n// handling of file content that gets constructed into prompts. It works this\n// way:\n//\n// - Literal strings are considered \""safe\"". Literal strings are constructed with\n//   a tagged template function, `ps`, and a linter in `/lint/safe-prompts.ts`\n//   ensures the function is only used in a tagged template literal, not\n//   aliased, etc.\n// - There are a small set of functions for conveniently constructing strings\n//   from file contents. Use of these functions needs to be continually audited\n//   to ensure they're safe.\n// - Strings constructed from other safe strings, with `ps` or helper methods,\n//   are also safe.\n// - Components sending prompts to LLMs should consume safe strings, not raw\n//   strings.\n//\n// This setup is designed to detect programming errors, not thwart malicious\n// attacks.\n\n/**\n * A \""safe\"" string class for constructing prompts.\n */\nexport class PromptString {\n    /**\n     * @deprecated Do not use the constructor directly. Instead, use ps`...` or a\n     * PromptString helper to handle string data for prompts safely\n     *\n     * @param __debug The string that is wrapped by this PromptString. This is\n     * useful for debugging since it will be shown when `console.log()` is called\n     * with this prompt string.\n     */\n    // @ts-expect-error: We don't want anyone to read __debug. This is just a helper\n    // for console.log debugging so this error is expected.\n    constructor(private __debug: string) {}\n\n    public toString(): string {\n        return internal_toString(this)\n    }\n\n    public getReferences(): readonly StringReference[] {\n        return internal_toReferences(this)\n    }\n\n    public toJSON(): string {\n        return internal_toString(this)\n    }\n\n    public get length(): number {\n        return internal_toString(this).length\n    }\n\n    public slice(start?: number, end?: number): PromptString {\n        return internal_createPromptString(\n            internal_toString(this).slice(start, end),\n            internal_toReferences(this)\n        )\n    }\n\n    public trim(): PromptString {\n        return internal_createPromptString(internal_toString(this).trim(), internal_toReferences(this))\n    }\n\n    public trimEnd(): PromptString {\n        return internal_createPromptString(\n            internal_toString(this).trimEnd(),\n            internal_toReferences(this)\n        )\n    }\n\n    public indexOf(searchString: string | PromptString, start?: number): number {\n        return this.toString().indexOf(searchString.toString(), start)\n    }\n\n    public split(separator: string): PromptString[] {\n        const string = internal_toString(this)\n        const references = internal_toReferences(this)\n\n        const split = string.split(separator)\n        const result: PromptString[] = []\n        for (const part of split) {\n            result.push(internal_createPromptString(part, references))\n        }\n        return result\n    }\n\n    public toLocaleLowerCase(): PromptString {\n        return internal_createPromptString(\n            internal_toString(this).toLocaleLowerCase(),\n            internal_toReferences(this)\n        )\n    }\n\n    public includes(searchString: string | PromptString, position?: number): boolean {\n        return internal_toString(this).includes(\n            typeof searchString === 'string' ? searchString : internal_toString(searchString),\n            position\n        )\n    }\n\n    public static join(promptStrings: PromptString[], boundary: PromptString): PromptString {\n        const stringBoundary = internal_toString(boundary)\n\n        const buffer: string[] = []\n        const references: Set<StringReference> = new Set(internal_toReferences(boundary))\n        for (const promptString of promptStrings) {\n            if (!isValidPromptString(promptString)) {\n                throw new Error('Invalid prompt string')\n            }\n\n            buffer.push(internal_toString(promptString))\n            for (const reference of internal_toReferences(promptString)) {\n                references.add(reference)\n            }\n        }\n\n        return internal_createPromptString(buffer.join(stringBoundary), [...references])\n    }\n\n    public concat(...promptStrings: readonly PromptString[]): PromptString {\n        const stringPromptString: string[] = []\n        const references: (readonly StringReference[])[] = []\n        for (const promptString of promptStrings) {\n            stringPromptString.push(internal_toString(promptString))\n            references.push(internal_toReferences(promptString))\n        }\n\n        return internal_createPromptString(internal_toString(this).concat(...stringPromptString), [\n            ...internal_toReferences(this),\n            ...references.flat(),\n        ])\n    }\n\n    public replace(searchValue: string | RegExp, replaceValue: PromptString): PromptString {\n        const stringReplaceValue = internal_toString(replaceValue)\n        const references = internal_toReferences(replaceValue)\n\n        return internal_createPromptString(\n            internal_toString(this).replace(searchValue, stringReplaceValue),\n            [...internal_toReferences(this), ...references]\n        )\n    }\n\n    public replaceAll(searchValue: string | RegExp, replaceValue: PromptString): PromptString {\n        const stringReplaceValue = internal_toString(replaceValue)\n        const references = internal_toReferences(replaceValue)\n\n        return internal_createPromptString(\n            internal_toString(this).replaceAll(searchValue, stringReplaceValue),\n            [...internal_toReferences(this), ...references]\n        )\n    }\n\n    // Use this function to create a user-generated PromptString from the VS Code\n    // configuration object.\n    public static fromConfig<D>(\n        config: ConfigGetter<string>,\n        path: string,\n        defaultValue: D\n    ): PromptString | D {\n        const raw = config.get<string | null>(path, null)\n        const value = raw === null ? defaultValue : internal_createPromptString(raw, [])\n        return value\n    }\n\n    public static fromEditorIndentString(\n        uri: vscode.Uri,\n        workspace: Pick<typeof vscode.workspace, 'getConfiguration'>,\n        window: Pick<typeof vscode.window, 'visibleTextEditors'>\n    ) {\n        const insertSpaces = getEditorInsertSpaces(uri, workspace, window)\n        const tabSize = getEditorTabSize(uri, workspace, window)\n\n        const indentString = insertSpaces ? ' '.repeat(tabSize) : '\\t'\n        // Note: even though this uses the URI, it does not actually contain any\n        // information from the URI, so we leave the references empty for now (the\n        // content is always just whitespace)\n        return internal_createPromptString(indentString, [])\n    }\n\n    public static fromDisplayPath(uri: vscode.Uri) {\n        return internal_createPromptString(displayPath(uri), [uri])\n    }\n\n    public static fromDocumentText(document: vscode.TextDocument, range?: vscode.Range): PromptString {\n        return internal_createPromptString(document.getText(range), [document.uri])\n    }\n\n    public static fromGitDiff(uri: vscode.Uri, oldContent: string, newContent: string) {\n        const diff = createGitDiff(displayPath(uri), oldContent, newContent)\n        return internal_createPromptString(diff, [uri])\n    }\n\n    // Replaces the following placeholder with data from the diagnostics:\n    // {type}, {filePath}, {prefix}, {message}, {languageID}, {code}\n    //\n    // TODO: This should probably take a vscode.Diagnostic object instead.\n    public static fromTextEditorDiagnostic(\n        diagnostic: ActiveTextEditorDiagnostic,\n        uri: vscode.Uri\n    ): {\n        type: PromptString\n        text: PromptString\n        message: PromptString\n    } {\n        const ref = [uri]\n        return {\n            type: internal_createPromptString(diagnostic.type, ref),\n            text: internal_createPromptString(diagnostic.text, ref),\n            message: internal_createPromptString(diagnostic.message, ref),\n        }\n    }\n\n    public static fromMarkdownCodeBlockLanguageIDForFilename(uri: vscode.Uri) {\n        return internal_createPromptString(markdownCodeBlockLanguageIDForFilename(uri), [uri])\n    }\n\n    public static fromDiagnostic(uri: vscode.Uri, diagnostic: vscode.Diagnostic) {\n        const ref = [uri]\n        return {\n            message: internal_createPromptString(diagnostic.message, ref),\n            source: diagnostic.source ? internal_createPromptString(diagnostic.source, ref) : undefined,\n            relatedInformation: diagnostic.relatedInformation\n                ? diagnostic.relatedInformation.map(info => ({\n                      message: internal_createPromptString(info.message, [uri, info.location.uri]),\n                  }))\n                : undefined,\n        }\n    }\n\n    public static fromDocumentSymbol(\n        uri: vscode.Uri,\n        documentSymbol: vscode.DocumentSymbol,\n        SymbolKind: typeof vscode.SymbolKind\n    ) {\n        const symbolKind = documentSymbol.kind ? SymbolKind[documentSymbol.kind].toLowerCase() : ''\n        const symbolPrompt = documentSymbol.name ? `#${documentSymbol.name} (${symbolKind})` : ''\n        return internal_createPromptString(symbolPrompt, [uri])\n    }\n\n    // TODO: Find a better way to handle this. Maybe we should migrate the default commands json to\n    // a TypesScript object?\n    public static fromDefaultCommands(\n        commands: { [name: string]: { prompt: string } },\n        name: 'doc' | 'explain' | 'test' | 'smell'\n    ) {\n        const prompt = commands[name].prompt\n        return internal_createPromptString(prompt, [])\n    }\n\n    // TODO: Need to check in the runtime if we have something we can append as an URI here\n    public static fromTerminalOutputArguments(output: TerminalOutputArguments) {\n        return {\n            name: internal_createPromptString(output.name, []),\n            selection: output.selection ? internal_createPromptString(output.selection, []) : undefined,\n            creationOptions: output.creationOptions\n                ? internal_createPromptString(JSON.stringify(output.creationOptions), [])\n                : undefined,\n        }\n    }\n\n    public static fromAutocompleteDocumentContext(docContext: DocumentContext, uri: vscode.Uri) {\n        const ref = [uri]\n        return {\n            prefix: internal_createPromptString(docContext.prefix, ref),\n            suffix: internal_createPromptString(docContext.suffix, ref),\n            injectedPrefix: docContext.injectedPrefix\n                ? internal_createPromptString(docContext.injectedPrefix, ref)\n                : null,\n        }\n    }\n\n    public static fromAutocompleteContextSnippet(contextSnippet: AutocompleteContextSnippet) {\n        const ref = [contextSnippet.uri]\n        return {\n            content: internal_createPromptString(contextSnippet.content, ref),\n            symbol:\n                'symbol' in contextSnippet\n                    ? internal_createPromptString(contextSnippet.symbol, ref)\n                    : undefined,\n        }\n    }\n\n    public static fromContextItem(contextItem: ContextItem) {\n        const ref = [contextItem.uri]\n        return {\n            content: contextItem.content\n                ? internal_createPromptString(contextItem.content, ref)\n                : undefined,\n            repoName: contextItem.repoName\n                ? internal_createPromptString(contextItem.repoName, ref)\n                : undefined,\n        }\n    }\n\n    // 🚨 Use this function only for user-generated queries.\n    // TODO: Can we detect if the user is pasting in content from a document?\n    public static unsafe_fromUserQuery(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 Use this function only for LLM responses queries.\n    public static unsafe_fromLLMResponse(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 We slam chats in and out of storage quite a bit, so it seems weird to\n    // have references on a chat transcript, but closing and opening the chat\n    // panel or restarting the IDE makes those references evaporate.\n    //\n    // On the other hand, you might pull up an old chat transcript and all the\n    // file paths are different now because you moved a folder or something. We're\n    // thinking maybe we should have a concept of \""resolved\"" references where we\n    // keep (repo, repo relative path) pairs for the serialized representation\n    // or something.\n    //\n    // Additionally, the serialized chat message format is also used when sending\n    // chat messages back to the Agent. Right now, however, when we send new\n    // messages, this is done via the `chat/submitMessage` notification which does\n    // not deserialize from chat message. To make sure we do not introduce places\n    // where we deserialize chat messages this way, the function is marked unsafe\n    // for now.\n    public static unsafe_deserializeChatMessage(serializedMessage: SerializedChatMessage): ChatMessage {\n        return {\n            ...serializedMessage,\n            text: serializedMessage.text\n                ? internal_createPromptString(serializedMessage.text, [])\n                : undefined,\n        }\n    }\n}\n\ntype TemplateArgs = readonly (PromptString | '' | number)[]\n\n/**\n * Constructs PromptStrings from template literals, numbers or other\n * PromptStrings. A linter in `/lint/safe-prompts.ts` checks that this function\n * is never used except in a tagged template literal.\n *\n * @param format the format string pieces.\n * @param args the arguments to splice into the format string.\n */\nexport function ps(format: TemplateStringsArray, ...args: TemplateArgs): PromptString {\n    if (!(Array.isArray(format) && Object.isFrozen(format) && format.length > 0)) {\n        // Deter casual direct calls.\n        throw new Error('ps is only intended to be used in tagged template literals.')\n    }\n\n    const buffer: string[] = []\n    const references: Set<StringReference> = new Set()\n    for (let i = 0; i < format.length; i++) {\n        buffer.push(format[i])\n        if (i < args.length) {\n            const arg = args[i]\n\n            if (typeof arg === 'number') {\n                // Boxed number types are not allowed, only number literals\n                buffer.push(Number.prototype.toString.call(arg))\n            } else if (arg === '') {\n                // We allow empty strings for situations like this:\n                // ps`... ${foo ? foo : ''}...`\n            } else if (arg instanceof PromptString) {\n                // PromptString inherit all references\n                buffer.push(internal_toString(arg))\n                for (const ref of internal_toReferences(arg)) {\n                    references.add(ref)\n                }\n            } else {\n                // Do not allow arbitrary types like dynamic strings, classes with\n                // toString, etc. here.\n                throw new Error(\n                    'Use ps`...` or a PromptString helper to handle string data for prompts safely.'\n                )\n            }\n        }\n    }\n\n    return internal_createPromptString(buffer.join(''), [...references])\n}\n\n// A version of ps that removes the leading indentation of the first line.\nexport function psDedent(format: TemplateStringsArray, ...args: TemplateArgs): PromptString {\n    const promptString = ps(format, ...args)\n    const dedented = dedent(internal_toString(promptString))\n    return internal_createPromptString(dedented, internal_toReferences(promptString))\n}\n\n// When PromptStrings are created, their properties are stored in a side pocket\n// WeakMap. Consumers can do what they like with the PromptString, all of the\n// operations use data in the map and so are protected from the PromptString\n// constructor being disclosed, prototype pollution, property manipulation, etc.\ntype StringReference = vscode.Uri\nconst pocket = new WeakMap<PromptString, PromptStringPocket>()\nclass PromptStringPocket {\n    constructor(\n        public value: string,\n        // We're using a set inside the pocket so we get deduplication for free and\n        // by converting from array (input) to Set, we also guarantee shallow copies\n        // are being created.\n        public references: Set<StringReference>\n    ) {}\n}\n\nfunction internal_createPromptString(\n    string: string,\n    references: readonly StringReference[]\n): PromptString {\n    const handle = new PromptString(string)\n    // Create a shallow copy of the references list as a set, so it's both de-duped\n    // and can not be mutated by the caller\n    pocket.set(handle, new PromptStringPocket(string, new Set(references)))\n    return handle\n}\nfunction internal_toString(s: PromptString): string {\n    return pocket.get(s)!.value\n}\nfunction internal_toReferences(s: PromptString): readonly StringReference[] {\n    // Return a shallow copy of the references so it can not be mutated\n    return [...pocket.get(s)!.references.values()]\n}\n\n// Validate that an input is indeed a PromptString and not just typecast to it.\nexport function isValidPromptString(promptString: PromptString) {\n    return pocket.has(promptString)\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-mixin.ts:0-56"",""content"":""import type { ChatMessage } from '../chat/transcript/messages'\nimport { PromptString, ps } from './prompt-string'\n\nconst identity = ps`Reply as Cody, a coding assistant developed by Sourcegraph.`\nconst hallucinate = ps`If context is available: never make any assumptions nor provide any misleading or hypothetical examples.`\nconst CODY_INTRO_PROMPT = ps`(${identity} ${hallucinate}) `\n\n/**\n * Prompt mixins elaborate every prompt presented to the LLM.\n * Add a prompt mixin to prompt for cross-cutting concerns relevant to multiple commands.\n */\nexport class PromptMixin {\n    private static mixins: PromptMixin[] = []\n    private static customMixin: PromptMixin[] = []\n    // The prompt that instructs Cody to identify itself and avoid hallucinations.\n    private static defaultMixin: PromptMixin = new PromptMixin(CODY_INTRO_PROMPT)\n\n    /**\n     * Adds a custom prompt mixin but not to the global set to make sure it will not be added twice\n     * and any new change could replace the old one.\n     */\n    public static addCustom(mixin: PromptMixin): void {\n        PromptMixin.customMixin = [mixin]\n    }\n\n    /**\n     * Prepends all mixins to `humanMessage`. Modifies and returns `humanMessage`.\n     */\n    public static mixInto(humanMessage: ChatMessage): ChatMessage {\n        // Default Mixin is added at the end so that it cannot be overriden by a custom mixin.\n        const mixins = PromptString.join(\n            [...PromptMixin.mixins, ...PromptMixin.customMixin, PromptMixin.defaultMixin].map(\n                mixin => mixin.prompt\n            ),\n            ps`\\n\\n`\n        )\n        if (mixins) {\n            // Stuff the prompt mixins at the start of the human text.\n            // Note we do not reflect them in `text`.\n            return {\n                ...humanMessage,\n                text: ps`${mixins}${humanMessage.text ? humanMessage.text : ''}`,\n            }\n        }\n        return humanMessage\n    }\n\n    /**\n     * Creates a mixin with the given, fixed prompt to insert.\n     */\n    constructor(private readonly prompt: PromptString) {}\n}\n\nexport function newPromptMixin(text: PromptString): PromptMixin {\n    return new PromptMixin(text)\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/supercompletions/prompt.ts:43-50"",""content"":""export const PROMPT = psDedent`\n    <source file=\""{filename}\"">\n    {source}\n    </source>\n    <recent-change>\n    {git-diff}\n    </recent-change>\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_009/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the provided codebase context, the code that executes the ""Find Code Smells"" command seems to be located in the file `vscode/src/commands/execute/smell.ts`. Specifically, the `executeSmellCommand` function appears to be responsible for executing the ""Find Code Smells"" command.

Here's the relevant code snippet from `vscode/src/commands/execute/smell.ts`:

```typescript
export async function executeSmellCommand(
    args?: Partial<CodyCommandArgs>
): Promise<ChatCommandResult | undefined> {
    return wrapInActiveSpan('command.smell', async span => {
        // ... (omitted for brevity)

        return {
            type: 'chat',
            session: await executeChat(await smellCommand(span, args)),
        }
    })
}
```

The `executeSmellCommand` function calls the `smellCommand` function (which is not shown in the provided context) and passes the result to the `executeChat` function, which likely initiates a new chat session with the AI to analyze the code and provide suggestions for improving it.","Where is the code that executes the ""Find Code Smells"" command?","[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/explain.ts:23-42"",""content"":""    private createCommandCodeAction(\n        uri: vscode.Uri,\n        diagnostics: vscode.Diagnostic[]\n    ): vscode.CodeAction {\n        const action = new vscode.CodeAction('Ask Cody to Explain', vscode.CodeActionKind.QuickFix)\n        const instruction = this.getCodeActionInstruction(uri, diagnostics)\n        action.command = {\n            command: 'cody.action.chat',\n            arguments: [\n                {\n                    text: instruction,\n                    source: 'code-action:explain',\n                    submitType: 'user-newchat',\n                } satisfies ExecuteChatArguments,\n            ],\n            title: 'Ask Cody to Explain',\n        }\n        action.diagnostics = diagnostics\n        return action\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:258-301"",""content"":""        version: 4.0.16\n      vscode-uri:\n        specifier: ^3.0.7\n        version: 3.0.7\n    devDependencies:\n      '@types/crypto-js':\n        specifier: ^4.2.2\n        version: 4.2.2\n      '@types/dedent':\n        specifier: ^0.7.0\n        version: 0.7.0\n      '@types/diff':\n        specifier: ^5.0.9\n        version: 5.0.9\n      '@types/dompurify':\n        specifier: ^3.0.2\n        version: 3.0.2\n      '@types/highlight.js':\n        specifier: ^9.12.4\n        version: 9.12.4\n      '@types/isomorphic-fetch':\n        specifier: ^0.0.39\n        version: 0.0.39\n      '@types/lodash':\n        specifier: ^4.14.195\n        version: 4.14.195\n      '@types/marked':\n        specifier: ^5.0.0\n        version: 5.0.0\n      '@types/node-fetch':\n        specifier: ^2.6.4\n        version: 2.6.4\n      '@types/vscode':\n        specifier: ^1.80.0\n        version: 1.80.0\n\n  vscode:\n    dependencies:\n      '@anthropic-ai/sdk':\n        specifier: ^0.4.2\n        version: 0.4.3\n      '@floating-ui/react':\n        specifier: ^0.26.9\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/document.ts:39-52"",""content"":""    private createCommandCodeAction(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        displayText: string\n    ): vscode.CodeAction {\n        const action = new vscode.CodeAction(displayText, vscode.CodeActionKind.RefactorRewrite)\n        const source = 'code-action:document'\n        action.command = {\n            command: 'cody.command.document-code',\n            arguments: [{ source } satisfies Partial<CodyCommandArgs>],\n            title: displayText,\n        }\n        return action\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/non-stop/strategies.ts:0-29"",""content"":""// FixupController has pluggable strategies for controls and presentation. This\n// file defines the interfaces for those strategies.\n\nimport type * as vscode from 'vscode'\nimport type { FixupFile } from './FixupFile'\nimport type { FixupTask } from './FixupTask'\n\n// An interface for decorating fixup tasks with controls.\nexport interface FixupControlApplicator extends vscode.Disposable {\n    didUpdateTask(task: FixupTask): void\n    didDeleteTask(task: FixupTask): void\n    // Called when visible files changed.\n    // TODO: This API design is gross: this is *not* called when a new task\n    // is created in a file that is already visible. It *is* called every time\n    // visible files change, so be prepared to handle repeated calls with\n    // an empty or unchanged set of files efficiently. Unearth a consistent\n    // API here.\n    visibleFilesWithTasksMaybeChanged(files: readonly FixupFile[]): void\n}\n\n// A FixupControlApplicator which does not present any controls for fixup\n// tasks.\nexport class NullFixupControlApplicator implements FixupControlApplicator {\n    public didUpdateTask(task: FixupTask): void {}\n    public didDeleteTask(task: FixupTask): void {}\n    public visibleFilesWithTasksMaybeChanged(files: readonly FixupFile[]): void {}\n    public dispose(): void {}\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/test.ts:40-53"",""content"":""    private createCommandCodeAction(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        displayText: string\n    ): vscode.CodeAction {\n        const action = new vscode.CodeAction(displayText, vscode.CodeActionKind.RefactorRewrite)\n        const source = 'code-action:test'\n        action.command = {\n            command: 'cody.command.unit-tests',\n            arguments: [{ source } satisfies Partial<CodyCommandArgs>],\n            title: displayText,\n        }\n        return action\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:16-24"",""content"":""    \""dev:web\"": \""pnpm run -s build:dev:web && pnpm run -s _dev:vscode-test-web --browserType none\"",\n    \""watch:dev:web\"": \""concurrently \\\""pnpm run -s watch:build:dev:web\\\"" \\\""pnpm run -s _dev:vscode-test-web --browserType none\\\""\"",\n    \""_dev:vscode-test-web\"": \""vscode-test-web --extensionDevelopmentPath=. ${WORKSPACE-test/fixtures/workspace}\"",\n    \""build\"": \""tsc --build && pnpm run -s _build:esbuild:desktop && pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\"",\n    \""_build:desktop\"": \""pnpm run -s _build:esbuild:desktop && pnpm run -s _build:webviews --mode production\"",\n    \""_build:web\"": \""pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\"",\n    \""build:dev:desktop\"": \""concurrently \\\""pnpm run -s _build:esbuild:desktop --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\"" \\\""pnpm run -s _build:webviews --mode development\\\""\"",\n    \""build:dev:web\"": \""concurrently \\\""pnpm run -s _build:esbuild:web --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\"" \\\""pnpm run -s _build:webviews --mode development\\\""\"",\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1254-1289"",""content"":""    \""@vscode/codicons\"": \""^0.0.35\"",\n    \""@vscode/webview-ui-toolkit\"": \""^1.2.2\"",\n    \""async-mutex\"": \""^0.4.0\"",\n    \""axios\"": \""^1.3.6\"",\n    \""classnames\"": \""^2.3.2\"",\n    \""crypto-js\"": \""^4.2.0\"",\n    \""detect-indent\"": \""^7.0.1\"",\n    \""diff\"": \""^5.2.0\"",\n    \""fast-xml-parser\"": \""^4.3.2\"",\n    \""glob\"": \""^7.2.3\"",\n    \""ini\"": \""^4.1.2\"",\n    \""isomorphic-fetch\"": \""^3.0.0\"",\n    \""js-levenshtein\"": \""^1.1.6\"",\n    \""lexical\"": \""^0.13.1\"",\n    \""lodash\"": \""^4.17.21\"",\n    \""lru-cache\"": \""^10.0.0\"",\n    \""mkdirp\"": \""^3.0.1\"",\n    \""os-browserify\"": \""^0.3.0\"",\n    \""parse-git-diff\"": \""^0.0.14\"",\n    \""proxy-agent\"": \""^6.4.0\"",\n    \""re2-wasm\"": \""^1.0.2\"",\n    \""semver\"": \""^7.5.4\"",\n    \""socks-proxy-agent\"": \""^8.0.1\"",\n    \""unzipper\"": \""^0.10.14\"",\n    \""uuid\"": \""^9.0.0\"",\n    \""vscode-languageserver-textdocument\"": \""^1.0.8\"",\n    \""vscode-uri\"": \""^3.0.7\"",\n    \""web-tree-sitter\"": \""^0.21.0\"",\n    \""wink-nlp-utils\"": \""^2.1.0\""\n  },\n  \""devDependencies\"": {\n    \""@google-cloud/pubsub\"": \""^3.7.3\"",\n    \""@playwright/test\"": \""1.39.0\"",\n    \""@pollyjs/adapter-node-http\"": \""^6.0.6\"",\n    \""@pollyjs/core\"": \""^6.0.6\"",\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:144-164"",""content"":""- [ ] Verify that the chat executed by running the command appears in the chat list in the left hand panel.\n\n#### Editing\n\n- [ ] Highlight a section of code.\n- [ ] Click the Code Action lightbulb icon in the project file\n- [ ] Select `Cody: Edit Code`.\n- [ ] Provide instructions for how Cody should edit the selected code.\n- [ ] Verify that there is a notification that \""Cody is working...\"" while edits are being applied.\n- [ ] Verify that Cody automatically applies edits to the selected code, per the user’s instructions\n- [ ] Verify that you can see a diff view of the edit in a new tab by clicking `Show diff`.\n- [ ] Verify that you can prompt Cody to retry the command by clicking `Retry` and entering new instructions.\n- [ ] Verify that you can undo the edit by clicking `Undo`.\n- [ ] Verify that the ghost text disappears by clicking `Accept`.\n\n#### Generating code\n\n- [ ] Move the cursor to an empty line, do not highlight any selection.\n- [ ] Click the Code Action lightbulb icon in the project file.\n- [ ] Select `Cody: Generate Code`.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/language-file-extensions.json:0-34"",""content"":""{\n  \""actionscript\"": [\""as\""],\n  \""ada\"": [\""adb\"", \""ada\"", \""ads\""],\n  \""apache\"": [\""apacheconf\""],\n  \""apex\"": [\""cls\"", \""apex\"", \""trigger\""],\n  \""applescript\"": [\""applescript\"", \""scpt\""],\n  \""beancount\"": [\""beancount\""],\n  \""bibtex\"": [\""bib\""],\n  \""clojure\"": [\""clj\"", \""cljs\"", \""cljx\""],\n  \""cmake\"": [\""cmake\"", \""cmake.in\"", \""in\""],\n  \""coffescript\"": [\""coffee\"", \""cake\"", \""cson\"", \""cjsx\"", \""iced\""],\n  \""cpp\"": [\""c\"", \""cc\"", \""cpp\"", \""cxx\"", \""c++\"", \""h++\"", \""hh\"", \""h\"", \""hpp\"", \""pc\"", \""pcc\""],\n  \""csharp\"": [\""cs\"", \""csx\""],\n  \""css\"": [\""css\""],\n  \""cuda\"": [\""cu\"", \""cuh\""],\n  \""d\"": [\""d\""],\n  \""dot\"": [\""dot\""],\n  \""dart\"": [\""dart\""],\n  \""diff\"": [\""diff\"", \""patch\""],\n  \""dockerfile\"": [\""Dockerfile\""],\n  \""django\"": [\""jinja\""],\n  \""dos\"": [\""bat\"", \""cmd\""],\n  \""elixir\"": [\""ex\"", \""exs\""],\n  \""elm\"": [\""elm\""],\n  \""erlang\"": [\""erl\""],\n  \""fortran\"": [\""f\"", \""for\"", \""frt\"", \""fr\"", \""forth\"", \""4th\"", \""fth\""],\n  \""fsharp\"": [\""fs\""],\n  \""go\"": [\""go\""],\n  \""graphql\"": [\""graphql\""],\n  \""groovy\"": [\""groovy\""],\n  \""haml\"": [\""haml\""],\n  \""handlebars\"": [\""hbs\"", \""handlebars\""],\n  \""haskell\"": [\""hs\"", \""hsc\""],\n  \""hcl\"": [\""hcl\"", \""nomad\"", \""tf\"", \""tfvars\"", \""workflow\""],\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/tree-sitter/query-tests/test-data/graph-identifiers.tsx:50-108"",""content"":""\nfunction signature()\n//                |\n\n// ------------------------------------\n\n// comment\n//       |\n\n// ------------------------------------\n\n/**\n * comment\n //      |\n */\n\n// ------------------------------------\n\nfunction functionName() {}\n//                  |\n\n// ------------------------------------\n\nfunction returnStatement() {\n    return\n    //   |\n}\n\n// ------------------------------------\n\nfunction returnStatementValue(value: Agent, flag?: boolean) {\n    return 'asd'\n    //     |\n}\n\n// ------------------------------------\n\ninterface TestInterface {\n    //                  |\n}\n\n// ------------------------------------\n\ntype TestType = {\n    //          |\n}\n\n// ------------------------------------\n\nreturnStatementValue('value')\n//                   |\n\n// ------------------------------------\n\nreturnStatementValue('value', false)\n//                            |\n\n// ------------------------------------\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/language-file-extensions.json:115-192"",""content"":""    \""ant\"",\n    \""axml\"",\n    \""builds\"",\n    \""ccxml\"",\n    \""clixml\"",\n    \""cproject\"",\n    \""csl\"",\n    \""csproj\"",\n    \""ct\"",\n    \""dita\"",\n    \""ditamap\"",\n    \""ditaval\"",\n    \""dll.config\"",\n    \""dotsettings\"",\n    \""filters\"",\n    \""fsproj\"",\n    \""fxml\"",\n    \""glade\"",\n    \""gml\"",\n    \""grxml\"",\n    \""iml\"",\n    \""ivy\"",\n    \""jelly\"",\n    \""jsproj\"",\n    \""kml\"",\n    \""launch\"",\n    \""mdpolicy\"",\n    \""mjml\"",\n    \""mod\"",\n    \""mxml\"",\n    \""nproj\"",\n    \""nuspec\"",\n    \""odd\"",\n    \""osm\"",\n    \""pkgproj\"",\n    \""plist\"",\n    \""props\"",\n    \""ps1xml\"",\n    \""psc1\"",\n    \""pt\"",\n    \""rdf\"",\n    \""resx\"",\n    \""rss\"",\n    \""scxml\"",\n    \""sfproj\"",\n    \""srdf\"",\n    \""storyboard\"",\n    \""stTheme\"",\n    \""sublime-snippet\"",\n    \""targets\"",\n    \""tmCommand\"",\n    \""tml\"",\n    \""tmLanguage\"",\n    \""tmPreferences\"",\n    \""tmSnippet\"",\n    \""tmTheme\"",\n    \""ui\"",\n    \""urdf\"",\n    \""ux\"",\n    \""vbproj\"",\n    \""vcxproj\"",\n    \""vsixmanifest\"",\n    \""vssettings\"",\n    \""vstemplate\"",\n    \""vxml\"",\n    \""wixproj\"",\n    \""wsdl\"",\n    \""wsf\"",\n    \""wxi\"",\n    \""wxl\"",\n    \""wxs\"",\n    \""x3d\"",\n    \""xacro\"",\n    \""xaml\"",\n    \""xib\"",\n    \""xlf\"",\n    \""xliff\"",\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2010-2012"",""content"":""        set code(value: string) {\n            pb_1.Message.setField(this, 2, value)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/package.json:0-29"",""content"":""{\n  \""private\"": true,\n  \""name\"": \""@sourcegraph/cody\"",\n  \""description\"": \""Cody, the code AI that writes code, fixes bugs, and answers questions using the code graph\"",\n  \""license\"": \""Apache-2.0\"",\n  \""homepage\"": \""https://cody.dev\"",\n  \""repository\"": {\n    \""type\"": \""git\"",\n    \""url\"": \""https://github.com/sourcegraph/cody\""\n  },\n  \""engines\"": {\n    \""node\"": \""^v20.4.0\"",\n    \""pnpm\"": \""^8.6.7\""\n  },\n  \""browser\"": {\n    \""fs\"": false\n  },\n  \""scripts\"": {\n    \""build\"": \""tsc --build\"",\n    \""watch\"": \""tsc --build --watch\"",\n    \""check\"": \""pnpm run -s biome && pnpm run -s check:css\"",\n    \""check:css\"": \""stylelint --quiet --cache '**/*.css'\"",\n    \""biome\"": \""biome check --apply --error-on-warnings .\"",\n    \""test\"": \""vitest\"",\n    \""test:unit\"": \""vitest run\"",\n    \""test:integration\"": \""pnpm -C vscode test:integration\"",\n    \""test:e2e\"": \""pnpm -C vscode test:e2e\"",\n    \""generate-agent-kotlin-bindings\"": \""pnpm build && pnpm dlx ts-node agent/src/cli/scip-codegen/command.ts --output ../jetbrains/src/main/kotlin/com/sourcegraph/cody/protocol_generated\"",\n    \""update-agent-recordings\"": \""pnpm build && CODY_KEEP_UNUSED_RECORDINGS=false CODY_RECORD_IF_MISSING=true vitest agent/src/index.test.ts\"",\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/fixtures/workspace2/README.md:0-3"",""content"":""This is a second workspace folder included in `multi-root.code-workspace` used by integration\ntests in `test/integration/multi-root` for testing in multi-root workspaces.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/execute/smell.ts:60-89"",""content"":""export async function executeSmellCommand(\n    args?: Partial<CodyCommandArgs>\n): Promise<ChatCommandResult | undefined> {\n    return wrapInActiveSpan('command.smell', async span => {\n        span.setAttribute('sampled', true)\n        logDebug('executeSmellCommand', 'executing', { args })\n        telemetryService.log('CodyVSCodeExtension:command:smell:executed', {\n            useCodebaseContex: false,\n            requestID: args?.requestID,\n            source: args?.source,\n            traceId: span.spanContext().traceId,\n        })\n        telemetryRecorder.recordEvent('cody.command.smell', 'executed', {\n            metadata: {\n                useCodebaseContex: 0,\n            },\n            interactionID: args?.requestID,\n            privateMetadata: {\n                requestID: args?.requestID,\n                source: args?.source,\n                traceId: span.spanContext().traceId,\n            },\n        })\n\n        return {\n            type: 'chat',\n            session: await executeChat(await smellCommand(span, args)),\n        }\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:123-144"",""content"":""\n### Code Actions\n\n#### Fixing code\n\n- [ ] Deliberately break a line or section of code to trigger the IDE’s red squiggly error warning.\n- [ ] Click the Code Action (in VSC) lightbulb icon in the project file\n- [ ] Select `Ask Cody to Fix`.\n- [ ] Verify that there is a notification that \""Cody is working...\"" while edits are being applied.\n- [ ] Verify that Cody automatically applies a code fix to the selected code.\n- [ ] Verify that you can see a diff view of the fix in a new tab by clicking `Show diff`.\n- [ ] Verify that you can prompt Cody to retry the command by clicking `Retry` and entering new instructions.\n- [ ] Verify that you can undo the fix by clicking `Undo`.\n- [ ] Verify that the ghost text disappears by clicking `Accept`.\n\n#### Explaining code\n\n- [ ] Deliberately break a line or section of code to trigger the IDE’s red squiggly error warning.\n- [ ] Click the Code Action lightbulb icon in the project file\n- [ ] Select `Ask Cody to Explain`.\n- [ ] Verify that Cody provides an explanation of the error in a new chat window.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/editor/displayPath.ts:116-145"",""content"":""                : ''\n            return fixPathSep(\n                workspaceDisplayPrefix + uri.path.slice(workspacePrefix.length + 1),\n                isWindows,\n                uri.scheme\n            )\n        }\n    }\n\n    if (uri.scheme === 'file') {\n        // Show the absolute file path because we couldn't find a parent workspace folder.\n        return fixPathSep(uri.fsPath, isWindows, uri.scheme)\n    }\n\n    // Show the full URI for anything else.\n    return uri\n}\n\n/**\n * Fixes the path separators for Windows paths. This makes it possible to write cross-platform\n * tests.\n */\nfunction fixPathSep(fsPath: string, isWindows: boolean, scheme: string): string {\n    return isWindows && scheme === 'file' ? fsPath.replaceAll('/', '\\\\') : fsPath\n}\n\nexport function uriHasPrefix(uri: URI, prefix: URI, isWindows: boolean): boolean {\n    // On Windows, it's common to have drive letter casing mismatches (VS Code's APIs tend to normalize\n    // to lowercase, but many other tools use uppercase and we don't know where the context file came\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:0-32"",""content"":""## Checklist\n\n- Commands\n  - [ ] [Explain](#explain)\n  - [ ] [Edit](#edit)\n  - [ ] [Test](#test)\n  - [ ] [Document](#document)\n  - [ ] [Smell](#smell)\n  - [ ] [Code Actions](#code-actions)\n  - [ ] [Custom Commands](#custom-commands)\n- Chat\n  - [ ] [Chat UX](#chat-ux)\n  - [ ] [Chats lefthand panel](#chats-lefthand-panel)\n  - [ ] [Enhanced Context](#enhanced-context)\n  - [ ] [LLM Selection](#llm-selection)\n- [Search](#search)\n- Autocomplete\n  - [ ] [Manual trigger key binding](#manual-trigger-key-binding)\n  - [ ] [Language ignore list](#language-ignore-list)\n  - [ ] [LLM selection](#llm-selection)\n  - [ ] [Multi-line completions](#multi-line-completions)\n  - [ ] [Telemetry and analytics](#telemetry-and-analytics)\n\n## Commands\n\n### Explain\n\n- [ ] Verify that the option to run the `Explain Code` command is available in the following locations:\n  - [ ] Sidebar `Explain Code`\n  - [ ] Context (right-click) menu `Cody > Explain Code`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Explain Code`\n  - [ ] Cody Command Menu (option+c, `Explain Code`)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/bindings/kotlin/gradlew.bat:0-25"",""content"":""@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \""License\"");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \""AS IS\"" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \""%DEBUG%\""==\""\"" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \""%OS%\""==\""Windows_NT\"" setlocal\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/code-lenses.ts:0-203"",""content"":""import * as vscode from 'vscode'\nimport { getEditor } from '../../editor/active-editor'\nimport { getDocumentSections } from '../../editor/utils/document-sections'\nimport { telemetryService } from '../../services/telemetry'\nimport { telemetryRecorder } from '../../services/telemetry-v2'\nimport { isValidTestFile } from '../utils/test-commands'\n\ninterface EditorCodeLens {\n    name: string\n    selection: vscode.Selection\n}\n\n/**\n * Adds Code lenses for triggering Command Menu\n */\nexport class CommandCodeLenses implements vscode.CodeLensProvider {\n    private isEnabled = false\n    private addTestEnabled = false\n\n    private _disposables: vscode.Disposable[] = []\n    private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>()\n    public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event\n    constructor() {\n        this.provideCodeLenses = this.provideCodeLenses.bind(this)\n        this.updateConfig()\n\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('cody')) {\n                this.updateConfig()\n            }\n        })\n    }\n\n    /**\n     * init\n     */\n    private init(): void {\n        if (!this.isEnabled) {\n            return\n        }\n        this._disposables.push(vscode.languages.registerCodeLensProvider({ scheme: 'file' }, this))\n        this._disposables.push(\n            vscode.commands.registerCommand('cody.editor.codelens.click', async lens => {\n                telemetryService.log('CodyVSCodeExtension:command:codelens:clicked')\n                telemetryRecorder.recordEvent('cody.command.codelens', 'clicked')\n                const clickedLens = lens as EditorCodeLens\n                await this.onCodeLensClick(clickedLens)\n            })\n        )\n        // on change events for toggling\n        this._disposables.push(\n            vscode.window.onDidChangeVisibleTextEditors(() => this.fire()),\n            vscode.window.onDidChangeActiveTextEditor(() => this.fire())\n        )\n    }\n\n    /**\n     * Update the configurations\n     */\n    private updateConfig(): void {\n        const config = vscode.workspace.getConfiguration('cody')\n        this.isEnabled = config.get('commandCodeLenses') as boolean\n        this.addTestEnabled = config.get('internal.unstable') as boolean\n\n        if (this.isEnabled && !this._disposables.length) {\n            this.init()\n        }\n        this.fire()\n    }\n\n    /**\n     * Gets the code lenses for the specified document.\n     */\n    public async provideCodeLenses(\n        document: vscode.TextDocument,\n        token: vscode.CancellationToken\n    ): Promise<vscode.CodeLens[]> {\n        if (!this.isEnabled) {\n            return []\n        }\n\n        token.onCancellationRequested(() => [])\n        const editor = getEditor()?.active\n        if (editor?.document !== document || document.languageId === 'json') {\n            return []\n        }\n\n        // For test files, adds code lenses for each symbol\n        if (this.addTestEnabled && isValidTestFile(document.uri)) {\n            return await this.provideCodeLensesForSymbols(document.uri)\n        }\n\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        const smartRanges = await getDocumentSections(document)\n        for (const range of smartRanges) {\n            if (linesWithLenses.has(range.start)) {\n                continue\n            }\n            const selection = new vscode.Selection(range.start, range.end)\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.cody,\n                    arguments: [{ name: 'cody.menu.commands', selection }],\n                })\n            )\n\n            linesWithLenses.add(range.start.line)\n        }\n\n        return codeLenses\n    }\n\n    private async provideCodeLensesForSymbols(doc: vscode.Uri): Promise<vscode.CodeLens[]> {\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        // Get a list of symbols from the document, filter out symbols that are not functions / classes / methods\n        const allSymbols = await vscode.commands.executeCommand<vscode.SymbolInformation[]>(\n            'vscode.executeDocumentSymbolProvider',\n            doc\n        )\n        const symbols =\n            allSymbols?.filter(\n                symbol =>\n                    symbol.kind === vscode.SymbolKind.Function ||\n                    symbol.kind === vscode.SymbolKind.Class ||\n                    symbol.kind === vscode.SymbolKind.Method ||\n                    symbol.kind === vscode.SymbolKind.Constructor\n            ) ?? []\n\n        for (const symbol of symbols) {\n            const range = symbol.location.range\n            const startLine = range.start.line\n            if (linesWithLenses.has(startLine)) {\n                continue\n            }\n\n            const selection = new vscode.Selection(startLine, 0, range.end.line + 1, 0)\n\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.test,\n                    arguments: [{ name: 'cody.command.tests-cases', selection }],\n                })\n            )\n\n            linesWithLenses.add(startLine)\n        }\n\n        return codeLenses\n    }\n\n    /**\n     * Handle the code lens click event\n     */\n    private async onCodeLensClick(lens: EditorCodeLens): Promise<void> {\n        // Update selection in active editor to the selection of the clicked code lens\n        const activeEditor = getEditor().active\n        if (activeEditor) {\n            activeEditor.selection = lens.selection\n        }\n        await vscode.commands.executeCommand(lens.name, 'codeLens')\n    }\n\n    /**\n     * Fire an event to notify VS Code that the code lenses have changed.\n     */\n    public fire(): void {\n        if (!this.isEnabled) {\n            this.dispose()\n            return\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n\n    /**\n     * Dispose the disposables\n     */\n    public dispose(): void {\n        if (this._disposables.length) {\n            for (const disposable of this._disposables) {\n                disposable.dispose()\n            }\n            this._disposables = []\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n}\n\nconst commandLenses = {\n    cody: {\n        title: '$(cody-logo) Cody',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Open command menu',\n    },\n    test: {\n        title: '$(cody-logo) Add More Tests',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Generate new test cases',\n    },\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:108-123"",""content"":""- [ ] Verify that Cody adds documentation above the function that contains your cursor.\n\n### Smell\n\n- [ ] Verify that the option to run the `Find Code Smells` command is available in the following locations:\n  - [ ] Sidebar `Find Code Smells`\n  - [ ] Context (right-click) menu `Cody > Find Code Smells`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Find Code Smells`\n  - [ ] Cody Command Menu (option+c, `Find Code Smells`)\n- [ ] Highlight a section of code in a file.\n- [ ] Run the `Find Code Smells` command.\n- [ ] Verify that Cody provides suggestion for how to improve the selected code in a new chat window.\n- [ ] Move your cursor inside a function in the file without highlighting code, before running the `Find Code Smells` command again\n- [ ] Verify that Cody provides suggestion for how to improve the function that contains your cursor in a new chat window.\n- [ ] Verify that the chat executed by running the command is added to the sidebar under `Chats`.\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_010/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context, the main place where ignored files are checked is in the `IgnoreHelper` class defined in `cody_test/lib/shared/src/cody-ignore/ignore-helper.ts`. This class provides a method `isIgnored(uri: URI)` that checks if a given file URI should be ignored or not.

The `isIgnored` method performs the following checks:

1. It first checks if the Cody ignore feature is active by checking the `isActive` flag. If it's not active, it returns `false` (not ignored).
2. It returns `false` for `https` URIs, assuming they originate from remote context files that have already been filtered by the backend.
3. It returns `true` for non-file URIs (except `https`).
4. It finds the workspace root for the given file URI.
5. If no workspace root is found, it uses the default ignore rules (currently just `.env`) against the file basename.
6. If a workspace root is found, it retrieves the ignore rules for that workspace root from the `workspaceIgnores` map.
7. It calculates the relative path of the file URI from the workspace root.
8. It checks if the relative path is ignored by the workspace's ignore rules.

The `setIgnoreFiles` method is responsible for setting the ignore rules for a workspace root based on the provided `.cody/ignore` files within that root.

The `IgnoreHelper` class is used in various places throughout the codebase, such as:

- `cody_test/vscode/src/services/cody-ignore.ts`: This file sets up the ignore rules for each workspace root and refreshes them when `.cody/ignore` files change.
- `cody_test/lib/shared/src/cody-ignore/context-filter.ts`: This file exports a function `isCodyIgnoredFile` that uses the `IgnoreHelper` to check if a file should be ignored.
- `cody_test/vscode/test/integration/multi-root/ignore.test.ts`: This file contains tests for checking if specific files are ignored or not in different workspace roots.

So, in summary, the `IgnoreHelper` class is the central place where ignored files are checked, and it's used throughout the codebase to filter out ignored files from various operations.",Where do we check for ignored files?,"[{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/cody-ignore/ignore-helper.test.ts:134-163"",""content"":""\n    it.skip('throws on a relative Uri', () => {\n        const relativeFileUri = URI.parse('file://a')\n        expect(() => ignore.isIgnored(relativeFileUri)).toThrow()\n    })\n\n    it('handles comments and blank lines in the ignore file', () => {\n        setWorkspace1Ignores([\n            '# header comment',\n            '#.foo',\n            '',\n            '.bar # an explanatory reason that .bar is ignored',\n        ])\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, '.env'))).toBe(true)\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, '.foo'))).toBe(false)\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, '.bar'))).toBe(true)\n    })\n\n    describe('returns the correct value for a sample of rules', () => {\n        beforeEach(() => {\n            setWorkspace1Ignores([\n                'node_modules/',\n                '**/cody',\n                '**/foo/**',\n                '/bar',\n                'fooz',\n                'barz/*',\n                '.git',\n                'one/**/two',\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/cody-ignore/ignore-helper.ts:30-173"",""content"":""export class IgnoreHelper {\n    /**\n     * A map of workspace roots to their ignore rules.\n     */\n    private workspaceIgnores = new Map<ClientWorkspaceRootURI, Ignore>()\n    public hasCodyIgnoreFiles = false\n    /**\n     * Check if the configuration is enabled or not\n     * Do not ignore files if the feature is not enabled\n     * TODO: Remove this once it's ready for GA\n     */\n    public isActive = false\n    public setActiveState(isActive: boolean): void {\n        this.isActive = isActive\n    }\n\n    /**\n     * Builds and caches a single ignore set for all nested ignore files within a workspace root.\n     * @param workspaceRoot The workspace root.\n     * @param ignoreFiles The URIs and content of all ignore files within the root.\n     */\n    public setIgnoreFiles(workspaceRoot: URI, ignoreFiles: IgnoreFileContent[]): void {\n        if (!this.isActive) {\n            return\n        }\n\n        this.ensureAbsolute('workspaceRoot', workspaceRoot)\n\n        const rules = this.getDefaultIgnores()\n        for (const ignoreFile of ignoreFiles) {\n            this.ensureValidCodyIgnoreFile('ignoreFile.uri', ignoreFile.uri)\n\n            // Compute the relative path from the workspace root to the folder this ignore\n            // file applies to.\n            const effectiveDir = ignoreFileEffectiveDirectory(ignoreFile.uri)\n            const relativeFolderUriPath = pathFunctionsForURI(workspaceRoot).relative(\n                workspaceRoot.path,\n                effectiveDir.path\n            )\n\n            // Build the ignore rule with the relative folder path applied to the start of each rule.\n            for (let ignoreLine of ignoreFile.content.split('\\n')) {\n                // Trim off any trailing comments.\n                ignoreLine = ignoreLine.split('#')[0]\n\n                // Skip any lines that are now empty.\n                ignoreLine = ignoreLine.trim()\n                if (!ignoreLine.length) {\n                    continue\n                }\n\n                let isInverted = false\n                if (ignoreLine.startsWith('!')) {\n                    ignoreLine = ignoreLine.slice(1)\n                    isInverted = true\n                }\n\n                // Gitignores always use POSIX/forward slashes, even on Windows.\n                const ignoreRule = relativeFolderUriPath.length\n                    ? `${relativeFolderUriPath}/${ignoreLine}`\n                    : ignoreLine\n                rules.add((isInverted ? '!' : '') + ignoreRule)\n            }\n        }\n\n        this.workspaceIgnores.set(workspaceRoot.toString(), rules)\n        if (ignoreFiles.length && !this.hasCodyIgnoreFiles) {\n            this.hasCodyIgnoreFiles = true\n        }\n    }\n\n    public clearIgnoreFiles(workspaceRoot: URI): void {\n        this.workspaceIgnores.delete(workspaceRoot.toString())\n    }\n\n    public isIgnored(uri: URI): boolean {\n        // Do not ignore if the feature is not enabled\n        if (!this.isActive) {\n            return false\n        }\n\n        // Return all https URIs on the assumption that they origin from\n        // remote context (e.g. unified, multi-repo) files, which are already\n        // filtered by the backend to respect codyignore files during sync time.\n        if (uri.scheme === 'https') {\n            return false\n        }\n\n        // Ignore all other non-file URIs\n        if (uri.scheme !== 'file') {\n            return true\n        }\n\n        this.ensureFileUri('uri', uri)\n        this.ensureAbsolute('uri', uri)\n        const workspaceRoot = this.findWorkspaceRoot(uri)\n\n        // Not in workspace so just use default rules against the filename.\n        // This ensures we'll never send something like `.env` but it won't handle\n        // if default rules include folders like `a/b` because we have nothing to make\n        // a relative path from.\n        if (!workspaceRoot) {\n            return this.getDefaultIgnores().ignores(uriBasename(uri))\n        }\n\n        const relativePath = pathFunctionsForURI(workspaceRoot).relative(workspaceRoot.path, uri.path)\n        const rules = this.workspaceIgnores.get(workspaceRoot.toString()) ?? this.getDefaultIgnores()\n        return rules.ignores(relativePath) ?? false\n    }\n\n    private findWorkspaceRoot(file: URI): URI | undefined {\n        const candidates = Array.from(this.workspaceIgnores.keys()).filter(workspaceRoot =>\n            uriHasPrefix(file, URI.parse(workspaceRoot), isWindows())\n        )\n        // If this file was inside multiple workspace roots, take the shortest one since it will include\n        // everything the nested one does (plus potentially extra rules).\n        candidates.sort((a, b) => a.length - b.length)\n        const selected = candidates.at(0)\n        return selected ? URI.parse(selected) : undefined\n    }\n\n    private ensureFileUri(name: string, uri: URI): void {\n        if (uri.scheme !== 'file') {\n            throw new Error(`${name} should be a file URI: \""${uri}\""`)\n        }\n    }\n\n    private ensureAbsolute(name: string, uri: URI): void {\n        if (!uri.path.startsWith('/')) {\n            throw new Error(`${name} should be absolute: \""${uri.toString()}\""`)\n        }\n    }\n\n    private ensureValidCodyIgnoreFile(name: string, uri: URI): void {\n        this.ensureAbsolute('ignoreFile.uri', uri)\n        if (!uri.path.endsWith(CODY_IGNORE_URI_PATH)) {\n            throw new Error(`${name} should end with \""${CODY_IGNORE_URI_PATH}\"": \""${uri.toString()}\""`)\n        }\n    }\n\n    private getDefaultIgnores(): Ignore {\n        return ignore().add('.env')\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/cody-ignore.test.ts:46-69"",""content"":""\n    // Start new chat\n    const [chatPanel, chatInput] = await createEmptyChatPanel(page)\n\n    /* TEST: Chat Context - Ignored file do not show up with context */\n    await chatInput.focus()\n    await chatInput.fill('Ignore me')\n    await chatInput.press('Enter')\n    // Assistant should response to your chat question,\n    // but the current file is excluded (ignoredByCody.css) and not on the context list\n    await expect(chatPanel.getByText('hello from the assistant')).toBeVisible()\n    const contextCell = getContextCell(chatPanel)\n    await expect(contextCell).not.toBeVisible()\n\n    /* TEST: At-file - Ignored file does not show up as context when using @-mention */\n    await chatInput.focus()\n    await chatInput.clear()\n    await chatInput.fill('@ignoredByCody')\n    await expect(chatPanel.getByRole('heading', { name: 'No files found' })).toBeVisible()\n    await chatInput.clear()\n    await chatInput.fill('@ignore')\n    await expect(\n        chatPanel.getByRole('option', { name: withPlatformSlashes('ignore .cody') })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/cody-ignore/ignore-helper.ts:162-186"",""content"":""\n    private ensureValidCodyIgnoreFile(name: string, uri: URI): void {\n        this.ensureAbsolute('ignoreFile.uri', uri)\n        if (!uri.path.endsWith(CODY_IGNORE_URI_PATH)) {\n            throw new Error(`${name} should end with \""${CODY_IGNORE_URI_PATH}\"": \""${uri.toString()}\""`)\n        }\n    }\n\n    private getDefaultIgnores(): Ignore {\n        return ignore().add('.env')\n    }\n}\n\nexport interface IgnoreFileContent {\n    uri: URI\n    content: string\n}\n\n/**\n * Return the directory that a .cody/ignore file applies to.\n */\nexport function ignoreFileEffectiveDirectory(ignoreFile: URI): URI {\n    return Utils.joinPath(ignoreFile, '..', '..')\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/cody-ignore.ts:207-217"",""content"":""async function tryReadFile(fileUri: vscode.Uri): Promise<string> {\n    return vscode.workspace.fs.readFile(fileUri).then(\n        content => utf8.decode(content),\n        error => {\n            logDebug('CodyIgnore:clearIgnoreFiles:tryReadFile', 'failed', {\n                verbose: `Skipping unreadable ignore file ${fileUri}: ${error}`,\n            })\n            return ''\n        }\n    )\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/doc/codyignore.md:16-23"",""content"":""src/\n5. To test if it's working, open a file from the directory you've chosen to ignore and highlight some code.\n6. Ask Cody a question about the highlighted code.\n7. Check the file context in Cody's response. You should not see any files from the ignored directory being used as context.\n8. Note that autocomplete features will also not work on files specified in the `.cody/ignore` file.\n\nRemember, this is an experimental feature for internal testing only, so use it with caution and report any issues you encounter to help improve the functionality.""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/editor/utils/findWorkspaceFiles.ts:51-77"",""content"":""async function readIgnoreFile(uri: vscode.Uri): Promise<IgnoreRecord> {\n    const ignore: IgnoreRecord = {}\n    try {\n        const data = await vscode.workspace.fs.readFile(uri)\n        for (let line of Buffer.from(data).toString('utf-8').split('\\n')) {\n            if (line.startsWith('!')) {\n                continue\n            }\n\n            // Strip comment and trailing whitespace.\n            line = line.replace(/\\s*(#.*)?$/, '')\n\n            if (line === '') {\n                continue\n            }\n\n            if (line.endsWith('/')) {\n                line = line.slice(0, -1)\n            }\n            if (!line.startsWith('/') && !line.startsWith('**/')) {\n                line = `**/${line}`\n            }\n            ignore[line] = true\n        }\n    } catch {}\n    return ignore\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/cody-ignore.ts:31-55"",""content"":""\n    // Refresh ignore rules when any ignore file in the workspace changes.\n    const watcher = vscode.workspace.createFileSystemWatcher(CODY_IGNORE_POSIX_GLOB)\n    watcher.onDidChange(refresh)\n    watcher.onDidCreate(refresh)\n    watcher.onDidDelete(refresh)\n\n    // Handle any added/removed workspace folders.\n    const didChangeSubscription = vscode.workspace.onDidChangeWorkspaceFolders(e => {\n        e.added.map(wf => refresh(wf.uri))\n        e.removed.map(wf => clear(wf))\n    })\n\n    const onDidChangeConfig = vscode.workspace.onDidChangeConfiguration(e => {\n        // NOTE This can be removed once cody ignore is stable.\n        if (e.affectsConfiguration('cody')) {\n            onConfigChange()\n        }\n        // NOTE This allows us to search for the ignore files again\n        // if the user changes the search.symlinks setting.\n        if (e.affectsConfiguration('search')) {\n            // Only refresh if the ignore sidebar is empty,\n            // which means the setup step has initially failed.\n            if (ignores.isActive && !ignores.hasCodyIgnoreFiles) {\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/cody-ignore/context-filter.ts:14-16"",""content"":""export function isCodyIgnoredFile(uri: URI): boolean {\n    return ignores.isIgnored(uri)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/cody-ignore/ignore-helper.test.ts:75-95"",""content"":""\n    it('returns true for a top-level file ignored at the top level', () => {\n        setWorkspace1Ignores(['ignored.txt'])\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'ignored.txt'))).toBe(true)\n    })\n\n    it('returns false for a top-level file not ignored at the top level', () => {\n        setWorkspace1Ignores(['ignored.txt'])\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'not_ignored.txt'))).toBe(false)\n    })\n\n    it('returns false for a top-level file unignored at the top level', () => {\n        setWorkspace1Ignores(['*ignored.txt', '!not_ignored.txt'])\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'not_ignored.txt'))).toBe(false)\n    })\n\n    it('returns true for a nested file ignored at the top level', () => {\n        setWorkspace1Ignores(['always_ignored.txt', 'a/explitly_ignored.txt'])\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'a/always_ignored.txt'))).toBe(true)\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'a/explitly_ignored.txt'))).toBe(true)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/cody-ignore.ts:172-178"",""content"":""function setCodyIgnoreFiles(ws: vscode.Uri, files: IgnoreFileContent[]): void {\n    ignores.setIgnoreFiles(ws, files)\n    if (files.length) {\n        telemetryService.log('CodyVSCodeExtension:codyIgnore:hasFile')\n        telemetryRecorder.recordEvent('cody.codyIgnore', 'hasFile')\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/__tests__/example-ts/src/isIgnored.ts:0-4"",""content"":""function isIgnoredByCody() {\n    console.log('This file is ignored by Cody via .cody/ignore.')\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/fixtures/workspace2/ignoreTests/ignoreTest.ws2:0-5"",""content"":""This file should be ignored.\n\n.ws1 files are ignored only in the \""workspace\"" folder\n.ws2 files are ignored only in the \""workspace2\"" folder\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/fixtures/workspace/ignoreTests/ignoreTest.ws1:0-5"",""content"":""This file should be ignored.\n\n.ws1 files are ignored only in the \""workspace\"" folder\n.ws2 files are ignored only in the \""workspace2\"" folder\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/cody-ignore/ignore-helper.test.ts:116-134"",""content"":""\n    it('returns false for a nested file unignored at the nested level', () => {\n        setWorkspace1NestedIgnores('a', ['*ignored.txt', '!not_ignored.txt'])\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'a/not_ignored.txt'))).toBe(false)\n    })\n\n    it('tracks ignores independently for each workspace root', () => {\n        setWorkspace1Ignores(['ignored_1.txt'])\n        setWorkspace2Ignores(['ignored_2.txt'])\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'ignored_1.txt'))).toBe(true)\n        expect(ignore.isIgnored(Utils.joinPath(workspace1Root, 'ignored_2.txt'))).toBe(false)\n        expect(ignore.isIgnored(Utils.joinPath(workspace2Root, 'ignored_1.txt'))).toBe(false)\n        expect(ignore.isIgnored(Utils.joinPath(workspace2Root, 'ignored_2.txt'))).toBe(true)\n    })\n\n    it('throws on an empty file: URI', () => {\n        expect(() => ignore.isIgnored(URI.parse('file:///'))).toThrow()\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/integration/multi-root/ignore.test.ts:27-42"",""content"":""        )\n    }\n\n    test('ignores ws1 files in workspace1', () =>\n        checkIgnore(`${workspace1Path}/ignoreTests/ignoreTest.ws1`, true))\n\n    test('does not ignore ws2 files in workspace1', () =>\n        checkIgnore(`${workspace1Path}/ignoreTests/ignoreTest.ws2`, false))\n\n    test('does not ignore ws1 files in workspace2', () =>\n        checkIgnore(`${workspace2Path}/ignoreTests/ignoreTest.ws1`, false))\n\n    test('ignores ws2 files in workspace2', () =>\n        checkIgnore(`${workspace2Path}/ignoreTests/ignoreTest.ws2`, true))\n})\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/cody-ignore/ignore-helper.ts:0-33"",""content"":""import ignore, { type Ignore } from 'ignore'\nimport { URI, Utils } from 'vscode-uri'\n\nimport { pathFunctionsForURI } from '../common/path'\nimport { isWindows } from '../common/platform'\nimport { uriBasename } from '../common/uri'\nimport { uriHasPrefix } from '../editor/displayPath'\n\n/**\n * The Cody ignore URI path.\n */\nexport const CODY_IGNORE_URI_PATH = '.cody/ignore'\n\n/**\n * A glob matching the Cody ignore URI path.\n */\nexport const CODY_IGNORE_POSIX_GLOB = `**/${CODY_IGNORE_URI_PATH}`\n\ntype ClientWorkspaceRootURI = string\n\n/**\n * A helper to efficiently check if a file should be ignored from a set\n * of nested ignore files.\n *\n * Callers must call `setIgnoreFiles` for each workspace root with the full set of ignore files (even\n * if there are zero) at startup (or when new workspace folders are added) and any time an ignore file\n * is modified/created/deleted.\n *\n * `clearIgnoreFiles` should be called for workspace roots as they are removed.\n */\nexport class IgnoreHelper {\n    /**\n     * A map of workspace roots to their ignore rules.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/fixtures/workspace2/ignoreTests/ignoreTest.ws1:0-5"",""content"":""This file should NOT be ignored.\n\n.ws1 files are ignored only in the \""workspace\"" folder\n.ws2 files are ignored only in the \""workspace2\"" folder\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/bindings/kotlin/lib/src/main/kotlin/com/sourcegraph/cody/protocol_generated/Check_IsCodyIgnoredFileParams.kt:0-8"",""content"":""@file:Suppress(\""FunctionName\"", \""ClassName\"", \""unused\"", \""EnumEntryName\"", \""UnusedImport\"")\npackage com.sourcegraph.cody.protocol_generated\n\ndata class Check_IsCodyIgnoredFileParams(\n  val urls: List<String>? = null,\n)\n\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/fixtures/workspace/ignoreTests/ignoreTest.ws2:0-5"",""content"":""This file should NOT be ignored.\n\n.ws1 files are ignored only in the \""workspace\"" folder\n.ws2 files are ignored only in the \""workspace2\"" folder\n""}]",Find logic,,,1,,0,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_011/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context provided, the build and lint tools seem to be configured in the following files:

1. **Build tools**:
   - `vscode/package.json`: This file contains various scripts for building the VS Code extension, such as `build`, `build:dev:desktop`, `build:dev:web`, `_build:esbuild:desktop`, `_build:esbuild:web`, and `_build:webviews`.
   - `vscode/webviews/vite.config.ts`: This is likely the configuration file for the Vite build tool used for building the webviews.

2. **Lint tools**:
   - `pnpm-lock.yaml`: This file lists the project dependencies, including linting tools like `stylelint` and `stylelint-config-standard`.

Additionally, the `pnpm-lock.yaml` file also lists other development dependencies that might be related to build and lint tools, such as `@babel/core`, `@babel/plugin-*`, and `@types/*`.",Where are the build and lint tools configured?,"[{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:1746-1760"",""content"":""      '@babel/core': 7.24.0\n      '@babel/helper-compilation-targets': 7.23.6\n      '@babel/helper-plugin-utils': 7.24.0\n      '@babel/helper-validator-option': 7.23.5\n      '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression': 7.23.3(@babel/core@7.24.0)\n      '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining': 7.23.3(@babel/core@7.24.0)\n      '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly': 7.23.7(@babel/core@7.24.0)\n      '@babel/plugin-proposal-private-property-in-object': 7.21.0-placeholder-for-preset-env.2(@babel/core@7.24.0)\n      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.24.0)\n      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.24.0)\n      '@babel/plugin-syntax-class-static-block': 7.14.5(@babel/core@7.24.0)\n      '@babel/plugin-syntax-dynamic-import': 7.8.3(@babel/core@7.24.0)\n      '@babel/plugin-syntax-export-namespace-from': 7.8.3(@babel/core@7.24.0)\n      '@babel/plugin-syntax-import-assertions': 7.23.3(@babel/core@7.24.0)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/common/markdown/contributions.ts:43-72"",""content"":"" */\nexport function registerHighlightContributions(): void {\n    if (registered) {\n        // Don't double-register these. (There is no way to unregister them.)\n        return\n    }\n    registered = true\n    registerLanguage('go', goLang)\n    registerLanguage('javascript', javascript)\n    registerLanguage('typescript', typescript)\n    registerLanguage('java', java)\n    registerLanguage('python', python)\n    registerLanguage('php', php)\n    registerLanguage('bash', bash)\n    registerLanguage('clojure', clojure)\n    // This is a dependency of cpp.\n    registerLanguage('c-like', cLike)\n    registerLanguage('cpp', cpp)\n    registerLanguage('cs', csharp)\n    registerLanguage('csharp', csharp)\n    registerLanguage('css', css)\n    registerLanguage('dockerfile', dockerfile)\n    registerLanguage('elixir', elixir)\n    registerLanguage('haskell', haskell)\n    registerLanguage('html', xml)\n    registerLanguage('lua', lua)\n    registerLanguage('ocaml', ocaml)\n    registerLanguage('r', rLang)\n    registerLanguage('ruby', ruby)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:44-81"",""content"":""      '@testing-library/jest-dom':\n        specifier: ^6.4.2\n        version: 6.4.2(vitest@1.5.0)\n      '@testing-library/react':\n        specifier: ^14.2.2\n        version: 14.2.2(react-dom@18.2.0)(react@18.2.0)\n      '@types/node':\n        specifier: 20.12.7\n        version: 20.12.7\n      '@types/react':\n        specifier: 18.2.79\n        version: 18.2.79\n      '@types/react-dom':\n        specifier: 18.2.25\n        version: 18.2.25\n      '@vitejs/plugin-react':\n        specifier: ^4.2.1\n        version: 4.2.1(vite@5.2.9)\n      esbuild:\n        specifier: ^0.18.20\n        version: 0.18.20\n      happy-dom:\n        specifier: ^14.3.10\n        version: 14.3.10\n      jsdom:\n        specifier: ^22.1.0\n        version: 22.1.0\n      knip:\n        specifier: ^3.13.2\n        version: 3.13.2(@types/node@20.12.7)(typescript@5.4.2)\n      storybook:\n        specifier: ^8.0.5\n        version: 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      stylelint:\n        specifier: ^15.11.0\n        version: 15.11.0(typescript@5.4.2)\n      stylelint-config-standard:\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:4219-4245"",""content"":""      '@storybook/csf-tools': 8.0.5\n      '@storybook/global': 5.0.0\n      '@storybook/node-logger': 8.0.5\n      '@storybook/preview-api': 8.0.5\n      '@storybook/react-dom-shim': 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/theming': 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/types': 8.0.5\n      '@types/react': 18.2.79\n      fs-extra: 11.2.0\n      react: 18.2.0\n      react-dom: 18.2.0(react@18.2.0)\n      rehype-external-links: 3.0.0\n      rehype-slug: 6.0.0\n      ts-dedent: 2.2.0\n    transitivePeerDependencies:\n      - encoding\n      - supports-color\n    dev: true\n\n  /@storybook/addon-essentials@8.0.5(@types/react@18.2.79)(react-dom@18.2.0)(react@18.2.0):\n    resolution: {integrity: sha512-1yjwf9ibKn2rVqv+fqxACoIjsaUsimSEx8QwjIl2krDNhMULXzFeVubTQ09gXSVEnHUR1nKX3X9qOXJQ2bOFlQ==}\n    dependencies:\n      '@storybook/addon-actions': 8.0.5\n      '@storybook/addon-backgrounds': 8.0.5\n      '@storybook/addon-controls': 8.0.5(@types/react@18.2.79)(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/addon-docs': 8.0.5\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:409-453"",""content"":""        version: 10.0.0\n      mkdirp:\n        specifier: ^3.0.1\n        version: 3.0.1\n      os-browserify:\n        specifier: ^0.3.0\n        version: 0.3.0\n      parse-git-diff:\n        specifier: ^0.0.14\n        version: 0.0.14\n      proxy-agent:\n        specifier: ^6.4.0\n        version: 6.4.0\n      re2-wasm:\n        specifier: ^1.0.2\n        version: 1.0.2\n      semver:\n        specifier: ^7.5.4\n        version: 7.6.0\n      socks-proxy-agent:\n        specifier: ^8.0.1\n        version: 8.0.1\n      unzipper:\n        specifier: ^0.10.14\n        version: 0.10.14\n      uuid:\n        specifier: ^9.0.0\n        version: 9.0.0\n      vscode-languageserver-textdocument:\n        specifier: ^1.0.8\n        version: 1.0.8\n      vscode-uri:\n        specifier: ^3.0.7\n        version: 3.0.7\n      web-tree-sitter:\n        specifier: ^0.21.0\n        version: 0.21.0\n      wink-nlp-utils:\n        specifier: ^2.1.0\n        version: 2.1.0\n    devDependencies:\n      '@google-cloud/pubsub':\n        specifier: ^3.7.3\n        version: 3.7.3\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:16-24"",""content"":""    \""dev:web\"": \""pnpm run -s build:dev:web && pnpm run -s _dev:vscode-test-web --browserType none\"",\n    \""watch:dev:web\"": \""concurrently \\\""pnpm run -s watch:build:dev:web\\\"" \\\""pnpm run -s _dev:vscode-test-web --browserType none\\\""\"",\n    \""_dev:vscode-test-web\"": \""vscode-test-web --extensionDevelopmentPath=. ${WORKSPACE-test/fixtures/workspace}\"",\n    \""build\"": \""tsc --build && pnpm run -s _build:esbuild:desktop && pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\"",\n    \""_build:desktop\"": \""pnpm run -s _build:esbuild:desktop && pnpm run -s _build:webviews --mode production\"",\n    \""_build:web\"": \""pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\"",\n    \""build:dev:desktop\"": \""concurrently \\\""pnpm run -s _build:esbuild:desktop --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\"" \\\""pnpm run -s _build:webviews --mode development\\\""\"",\n    \""build:dev:web\"": \""concurrently \\\""pnpm run -s _build:esbuild:web --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\"" \\\""pnpm run -s _build:webviews --mode development\\\""\"",\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/AgentWorkspaceConfiguration.ts:8-138"",""content"":""export class AgentWorkspaceConfiguration implements vscode.WorkspaceConfiguration {\n    constructor(\n        private prefix: string[],\n        private clientInfo: () => ClientInfo | undefined,\n        private extensionConfig: () => ExtensionConfiguration | undefined,\n        private dictionary: Record<string, any> = {}\n    ) {}\n\n    public withPrefix(prefix: string): AgentWorkspaceConfiguration {\n        return new AgentWorkspaceConfiguration(\n            this.prefix.concat(prefix),\n            this.clientInfo,\n            this.extensionConfig,\n            this.dictionary\n        )\n    }\n\n    private actualSection(section: string): string {\n        if (this.prefix.length === 0) {\n            return section\n        }\n        return [...this.prefix, section].join('.')\n    }\n\n    private clientNameToIDE(value: string): Configuration['agentIDE'] | undefined {\n        switch (value.toLowerCase()) {\n            case 'vscode':\n                return 'VSCode'\n            case 'jetbrains':\n                return 'JetBrains'\n            case 'emacs':\n                return 'Emacs'\n            case 'neovim':\n                return 'Neovim'\n            default:\n                return undefined\n        }\n    }\n\n    public get(userSection: string, defaultValue?: unknown): any {\n        const section = this.actualSection(userSection)\n\n        const fromDictionary = this.dictionary?.[section]\n        if (fromDictionary !== undefined) {\n            return fromDictionary\n        }\n        const extensionConfig = this.extensionConfig()\n\n        const fromCustomConfiguration = extensionConfig?.customConfiguration?.[section]\n        if (fromCustomConfiguration !== undefined) {\n            return fromCustomConfiguration\n        }\n        switch (section) {\n            case 'cody.serverEndpoint':\n                return extensionConfig?.serverEndpoint\n            case 'cody.proxy':\n                return extensionConfig?.proxy ?? null\n            case 'cody.customHeaders':\n                return extensionConfig?.customHeaders\n            case 'cody.telemetry.level':\n                // Use the dedicated `telemetry/recordEvent` to send telemetry from\n                // agent clients.  The reason we disable telemetry via config is\n                // that we don't want to submit vscode-specific events when\n                // running inside the agent.\n                return 'agent'\n            case 'cody.autocomplete.enabled':\n                return true\n            case 'cody.autocomplete.advanced.provider':\n                return extensionConfig?.autocompleteAdvancedProvider ?? null\n            case 'cody.autocomplete.advanced.model':\n                return extensionConfig?.autocompleteAdvancedModel ?? null\n            case 'cody.advanced.agent.running':\n                return true\n            case 'cody.debug.verbose':\n                return extensionConfig?.verboseDebug ?? false\n            case 'cody.experimental.tracing':\n                return extensionConfig?.verboseDebug ?? false\n            case 'cody.useContext':\n                // Disable embeddings by default.\n                return 'keyword'\n            case 'cody.codebase':\n                return extensionConfig?.codebase\n            case 'cody.advanced.agent.ide':\n                return this.clientNameToIDE(this.clientInfo()?.name ?? '')\n            case 'editor.insertSpaces':\n                return true // TODO: override from IDE clients\n            default:\n                // VS Code picks up default value in package.json, and only uses\n                // the `defaultValue` parameter if package.json provides no\n                // default.\n                return defaultConfigurationValue(section) ?? defaultValue\n        }\n    }\n\n    public has(section: string): boolean {\n        const actual = this.actualSection(section)\n        for (const key in this.dictionary) {\n            if (key.startsWith(actual)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public inspect<T>(section: string):\n        | {\n              key: string\n              defaultValue?: T | undefined\n              globalValue?: T | undefined\n              workspaceValue?: T | undefined\n              workspaceFolderValue?: T | undefined\n              defaultLanguageValue?: T | undefined\n              globalLanguageValue?: T | undefined\n              workspaceLanguageValue?: T | undefined\n              workspaceFolderLanguageValue?: T | undefined\n              languageIds?: string[] | undefined\n          }\n        | undefined {\n        return undefined\n    }\n\n    public async update(\n        section: string,\n        value: any,\n        _configurationTarget?: boolean | vscode.ConfigurationTarget | null | undefined,\n        _overrideInLanguage?: boolean | undefined\n    ): Promise<void> {\n        this.dictionary[this.actualSection(section)] = value\n        return Promise.resolve()\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/testutils/mocks.ts:653-709"",""content"":""            'yaml',\n            'tailwindcss',\n            'editorconfig',\n            'graphql',\n            'vue',\n            'go.mod',\n            'go.work',\n            'go.sum',\n            'gotmpl',\n            'govulncheck',\n            'kotlin',\n            'kotlinscript',\n            'lisp',\n            'toml',\n            'jinja',\n            'pip-requirements',\n            'raw',\n            'prisma',\n            'starlark',\n            'bazel',\n            'bazelrc',\n            'vimrc',\n        ])\n    },\n}\n\nexport enum TextDocumentChangeReason {\n    Undo = 1,\n    Redo = 2,\n}\nexport enum UIKind {\n    Desktop = 1,\n    Web = 2,\n}\n\nexport class FileSystemError extends Error {}\n\nexport const vsCodeMocks = {\n    FileSystemError,\n    FileType,\n    Range,\n    Position,\n    InlineCompletionItem,\n    EventEmitter,\n    EndOfLine,\n    CancellationTokenSource,\n    ThemeColor,\n    ThemeIcon,\n    TreeItem,\n    WorkspaceEdit,\n    UIKind,\n    QuickInputButtons,\n    Uri,\n    languages,\n    env: {\n        uiKind: 1 satisfies vscode_types.UIKind.Desktop,\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:4554-4589"",""content"":""      '@storybook/builder-manager': 8.0.5\n      '@storybook/channels': 8.0.5\n      '@storybook/core-common': 8.0.5\n      '@storybook/core-events': 8.0.5\n      '@storybook/csf': 0.1.2\n      '@storybook/csf-tools': 8.0.5\n      '@storybook/docs-mdx': 3.0.0\n      '@storybook/global': 5.0.0\n      '@storybook/manager': 8.0.5\n      '@storybook/manager-api': 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/node-logger': 8.0.5\n      '@storybook/preview-api': 8.0.5\n      '@storybook/telemetry': 8.0.5\n      '@storybook/types': 8.0.5\n      '@types/detect-port': 1.3.5\n      '@types/node': 18.19.31\n      '@types/pretty-hrtime': 1.0.3\n      '@types/semver': 7.5.8\n      better-opn: 3.0.2\n      chalk: 4.1.2\n      cli-table3: 0.6.3\n      compression: 1.7.4\n      detect-port: 1.5.1\n      express: 4.18.3\n      fs-extra: 11.2.0\n      globby: 11.1.0\n      ip: 2.0.1\n      lodash: 4.17.21\n      open: 8.4.2\n      pretty-hrtime: 1.0.3\n      prompts: 2.4.2\n      read-pkg-up: 7.0.1\n      semver: 7.6.0\n      telejson: 7.2.0\n      tiny-invariant: 1.3.3\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration-keys.ts:6-9"",""content"":""export function defaultConfigurationValue(key: string): any {\n    const value = (properties as any)[key as any]?.default\n    return value\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:66-97"",""content"":""} from './commands/types'\nexport { CustomCommandType } from './commands/types'\nexport { type DefaultCodyCommands, DefaultChatCommands, DefaultEditCommands } from './commands/types'\nexport { dedupeWith, isDefined, isErrorLike, pluralize } from './common'\nexport { type RangeData, toRangeData, displayLineRange, displayRange } from './common/range'\nexport {\n    ProgrammingLanguage,\n    languageFromFilename,\n    markdownCodeBlockLanguageIDForFilename,\n    extensionForLanguage,\n} from './common/languages'\nexport { renderMarkdown, escapeHTML } from './common/markdown'\nexport { posixFilePaths, pathFunctionsForURI } from './common/path'\nexport { isWindows, isMacOS } from './common/platform'\nexport {\n    assertFileURI,\n    isFileURI,\n    uriBasename,\n    uriDirname,\n    uriExtname,\n    uriParseNameAndExtension,\n    type FileURI,\n} from './common/uri'\nexport type {\n    AutocompleteTimeouts,\n    Configuration,\n    ConfigurationUseContext,\n    ConfigurationWithAccessToken,\n    OllamaGenerateParameters,\n    OllamaOptions,\n    ConfigGetter,\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/configuration.ts:93-97"",""content"":""export interface ConfigurationWithAccessToken extends Configuration {\n    serverEndpoint: string\n    /** The access token, which is stored in the secret storage (not configuration). */\n    accessToken: string | null\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1321-1329"",""content"":""    \""ovsx\"": \""^0.8.2\"",\n    \""pako\"": \""^2.1.0\"",\n    \""path-browserify\"": \""^1.0.1\"",\n    \""playwright\"": \""1.39.0\"",\n    \""progress\"": \""^2.0.3\"",\n    \""yaml\"": \""^2.3.4\""\n  }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/configuration.ts:20-86"",""content"":""export interface Configuration {\n    proxy?: string | null\n    codebase?: string\n    debugFilter: RegExp | null\n    debugVerbose: boolean\n    telemetryLevel: 'all' | 'off' | 'agent'\n    useContext: ConfigurationUseContext\n    customHeaders: Record<string, string>\n    chatPreInstruction: PromptString\n    editPreInstruction: PromptString\n    codeActions: boolean\n    commandHints: boolean\n    commandCodeLenses: boolean\n\n    /**\n     * Autocomplete\n     */\n    autocomplete: boolean\n    autocompleteLanguages: Record<string, boolean>\n    autocompleteAdvancedProvider:\n        | 'anthropic'\n        | 'fireworks'\n        | 'unstable-openai'\n        | 'experimental-openaicompatible'\n        | 'experimental-ollama'\n        | null\n    autocompleteAdvancedModel: string | null\n    autocompleteCompleteSuggestWidgetSelection?: boolean\n    autocompleteFormatOnAccept?: boolean\n    autocompleteDisableInsideComments: boolean\n\n    /**\n     * Experimental\n     */\n    experimentalGuardrails: boolean\n    experimentalSymfContext: boolean\n    experimentalTracing: boolean\n    experimentalSimpleChatContext: boolean\n    experimentalChatContextRanker: boolean | undefined\n    experimentalOllamaChat: boolean\n    experimentalSupercompletions: boolean\n\n    /**\n     * Unstable Features for internal testing only\n     */\n    internalUnstable: boolean\n\n    /**\n     * Experimental autocomplete\n     */\n    autocompleteExperimentalHotStreak?: boolean\n    autocompleteExperimentalGraphContext: 'bfg' | 'bfg-mixed' | null\n    autocompleteExperimentalOllamaOptions: OllamaOptions\n    autocompleteExperimentalFireworksOptions?: FireworksOptions\n    autocompleteExperimentalSmartThrottle?: boolean\n\n    /**\n     * Hidden settings\n     */\n    isRunningInsideAgent?: boolean\n    agentIDE?: 'VSCode' | 'JetBrains' | 'Neovim' | 'Emacs'\n    autocompleteTimeouts: AutocompleteTimeouts\n\n    testingLocalEmbeddingsModel: string | undefined\n    testingLocalEmbeddingsEndpoint: string | undefined\n    testingLocalEmbeddingsIndexLibraryPath: string | undefined\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/doc/dev/index.md:0-18"",""content"":""## Development\n\n### Setup\n\n1. Install [asdf](https://asdf-vm.com/)\n1. Run `asdf install` (if needed, run `asdf plugin add NAME` for any missing plugins)\n1. Run `pnpm install && pnpm build`\n\n### Build and run the VS Code extension\n\nOpen this repository in VS Code and run the `Launch VS Code Extension (Desktop)` build/debug task (or run `pnpm -C vscode run dev`).\n\nSee [vscode/CONTRIBUTING.md](../../vscode/CONTRIBUTING.md) for more information.\n\n### Other topics\n\n- [Quality tools](quality/index.md)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration.ts:28-183"",""content"":""export function getConfiguration(\n    config: ConfigGetter = vscode.workspace.getConfiguration()\n): Configuration {\n    const isTesting = process.env.CODY_TESTING === 'true'\n\n    function getHiddenSetting<T>(configKey: string, defaultValue?: T): T {\n        return config.get<T>(`cody.${configKey}` as any, defaultValue)\n    }\n\n    let debugRegex: RegExp | null = null\n    try {\n        const debugPattern: string | null = config.get<string | null>(CONFIG_KEY.debugFilter, null)\n        if (debugPattern) {\n            if (debugPattern === '*') {\n                debugRegex = /.*/\n            } else {\n                debugRegex = new RegExp(debugPattern)\n            }\n        }\n    } catch (error: any) {\n        void vscode.window.showErrorMessage(\n            \""Error parsing cody.debug.filter regex - using default '*'\"",\n            error\n        )\n        debugRegex = /.*/\n    }\n\n    let autocompleteAdvancedProvider = config.get<\n        | Configuration['autocompleteAdvancedProvider']\n        | 'unstable-ollama'\n        | 'unstable-fireworks'\n        | 'experimental-openaicompatible'\n    >(CONFIG_KEY.autocompleteAdvancedProvider, null)\n\n    // Handle deprecated provider identifiers\n    switch (autocompleteAdvancedProvider) {\n        case 'unstable-fireworks':\n            autocompleteAdvancedProvider = 'fireworks'\n            break\n        case 'unstable-ollama':\n            autocompleteAdvancedProvider = 'experimental-ollama'\n            break\n    }\n\n    // check if the configured enum values are valid\n    const configKeys = [\n        'autocompleteAdvancedProvider',\n        'autocompleteAdvancedModel',\n    ] as (keyof ConfigurationKeysMap)[]\n\n    for (const configVal of configKeys) {\n        const key = configVal.replaceAll(/([A-Z])/g, '.$1').toLowerCase()\n        const value: string | null = config.get(CONFIG_KEY[configVal])\n        checkValidEnumValues(key, value)\n    }\n\n    const autocompleteExperimentalGraphContext: 'bfg' | null = getHiddenSetting(\n        'autocomplete.experimental.graphContext',\n        null\n    )\n\n    return {\n        proxy: config.get<string | null>(CONFIG_KEY.proxy, null),\n        codebase: sanitizeCodebase(config.get(CONFIG_KEY.codebase)),\n        customHeaders: config.get<object>(CONFIG_KEY.customHeaders, {}) as Record<string, string>,\n        useContext: config.get<ConfigurationUseContext>(CONFIG_KEY.useContext) || 'embeddings',\n        debugVerbose: config.get<boolean>(CONFIG_KEY.debugVerbose, false),\n        debugFilter: debugRegex,\n        telemetryLevel: config.get<'all' | 'off'>(CONFIG_KEY.telemetryLevel, 'all'),\n        autocomplete: config.get(CONFIG_KEY.autocompleteEnabled, true),\n        autocompleteLanguages: config.get(CONFIG_KEY.autocompleteLanguages, {\n            '*': true,\n        }),\n        chatPreInstruction: PromptString.fromConfig(config, CONFIG_KEY.chatPreInstruction, ps``),\n        editPreInstruction: PromptString.fromConfig(config, CONFIG_KEY.editPreInstruction, ps``),\n        commandCodeLenses: config.get(CONFIG_KEY.commandCodeLenses, false),\n        autocompleteAdvancedProvider,\n        autocompleteAdvancedModel: config.get<string | null>(CONFIG_KEY.autocompleteAdvancedModel, null),\n        autocompleteCompleteSuggestWidgetSelection: config.get(\n            CONFIG_KEY.autocompleteCompleteSuggestWidgetSelection,\n            true\n        ),\n        autocompleteFormatOnAccept: config.get(CONFIG_KEY.autocompleteFormatOnAccept, true),\n        autocompleteDisableInsideComments: config.get(\n            CONFIG_KEY.autocompleteDisableInsideComments,\n            false\n        ),\n        codeActions: config.get(CONFIG_KEY.codeActionsEnabled, true),\n        commandHints: config.get(CONFIG_KEY.commandHintsEnabled, false),\n\n        /**\n         * Hidden settings for internal use only.\n         */\n\n        internalUnstable: getHiddenSetting('internal.unstable', isTesting),\n\n        autocompleteExperimentalGraphContext,\n        experimentalSimpleChatContext: getHiddenSetting('experimental.simpleChatContext', true),\n        experimentalSymfContext: getHiddenSetting('experimental.symfContext', true),\n\n        experimentalGuardrails: getHiddenSetting('experimental.guardrails', isTesting),\n        experimentalTracing: getHiddenSetting('experimental.tracing', false),\n\n        experimentalOllamaChat: getHiddenSetting('experimental.ollamaChat', false),\n        experimentalSupercompletions: getHiddenSetting('experimental.supercompletions', false),\n\n        experimentalChatContextRanker: getHiddenSetting('experimental.chatContextRanker', false),\n\n        autocompleteExperimentalHotStreak: getHiddenSetting(\n            'autocomplete.experimental.hotStreak',\n            false\n        ),\n        autocompleteExperimentalOllamaOptions: getHiddenSetting(\n            'autocomplete.experimental.ollamaOptions',\n            {\n                url: OLLAMA_DEFAULT_URL,\n                model: 'codellama:7b-code',\n            }\n        ),\n        autocompleteExperimentalFireworksOptions: getHiddenSetting(\n            'autocomplete.experimental.fireworksOptions',\n            undefined\n        ),\n        autocompleteExperimentalSmartThrottle: getHiddenSetting(\n            'autocomplete.experimental.smartThrottle',\n            false\n        ),\n\n        // Note: In spirit, we try to minimize agent-specific code paths in the VSC extension.\n        // We currently use this flag for the agent to provide more helpful error messages\n        // when something goes wrong, and to suppress event logging in the agent.\n        // Rely on this flag sparingly.\n        isRunningInsideAgent: getHiddenSetting('advanced.agent.running', false),\n        agentIDE: getHiddenSetting<'VSCode' | 'JetBrains' | 'Neovim' | 'Emacs'>('advanced.agent.ide'),\n        autocompleteTimeouts: {\n            multiline: getHiddenSetting<number | undefined>(\n                'autocomplete.advanced.timeout.multiline',\n                undefined\n            ),\n            singleline: getHiddenSetting<number | undefined>(\n                'autocomplete.advanced.timeout.singleline',\n                undefined\n            ),\n        },\n\n        testingLocalEmbeddingsModel: isTesting\n            ? getHiddenSetting<string | undefined>('testing.localEmbeddings.model', undefined)\n            : undefined,\n        testingLocalEmbeddingsEndpoint: isTesting\n            ? getHiddenSetting<string | undefined>('testing.localEmbeddings.endpoint', undefined)\n            : undefined,\n        testingLocalEmbeddingsIndexLibraryPath: isTesting\n            ? getHiddenSetting<string | undefined>('testing.localEmbeddings.indexLibraryPath', undefined)\n            : undefined,\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:24-32"",""content"":""    \""watch:build:dev:web\"": \""concurrently \\\""pnpm run -s _build:esbuild:web --watch\\\"" \\\""pnpm run -s _build:webviews --mode development --watch\\\""\"",\n    \""watch:build:dev:desktop\"": \""concurrently \\\""pnpm run -s _build:esbuild:desktop --watch\\\"" \\\""pnpm run -s _build:webviews --mode development --watch\\\""\"",\n    \""_build:esbuild:desktop\"": \""pnpm download-wasm && esbuild ./src/extension.node.ts --bundle --outfile=dist/extension.node.js --external:vscode --format=cjs --platform=node --sourcemap\"",\n    \""_build:esbuild:web\"": \""esbuild ./src/extension.web.ts --platform=browser --bundle --outfile=dist/extension.web.js --alias:path=path-browserify --alias:node:path=path-browserify --alias:node:os=os-browserify --external:vscode --define:process='{\\\""env\\\"":{}}' --define:window=self --format=cjs --sourcemap\"",\n    \""_build:webviews\"": \""vite -c webviews/vite.config.ts build\"",\n    \""release\"": \""ts-node-transpile-only ./scripts/release.ts\"",\n    \""download-wasm\"": \""ts-node-transpile-only ./scripts/download-wasm-modules.ts\"",\n    \""release:dry-run\"": \""pnpm run download-wasm && CODY_RELEASE_DRY_RUN=1 ts-node ./scripts/release.ts\"",\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/CodePrinter.ts:43-45"",""content"":""    public build(): string {\n        return this.out.join('')\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/package.json:64-78"",""content"":""    \""@types/diff\"": \""^5.0.9\"",\n    \""@types/google-protobuf\"": \""3.15.12\"",\n    \""@types/minimatch\"": \""^5.1.2\"",\n    \""@types/uuid\"": \""^9.0.2\"",\n    \""@types/vscode\"": \""^1.80.0\"",\n    \""@types/ws\"": \""^8.5.10\"",\n    \""diff\"": \""^5.2.0\"",\n    \""esbuild\"": \""^0.18.19\"",\n    \""google-protobuf\"": \""^3.21.2\"",\n    \""parse-git-diff\"": \""^0.0.14\"",\n    \""pkg\"": \""^5.8.1\"",\n    \""rimraf\"": \""^5.0.5\""\n  }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/custom-commands.ts:147-174"",""content"":""    public async build(type: CustomCommandType): Promise<Map<string, CodyCommand> | null> {\n        const uri = this.getConfigFileByType(type)\n        if (!uri || (type === CustomCommandType.Workspace && !vscode.workspace.isTrusted)) {\n            return null\n        }\n        try {\n            const content = await getDocText(uri)\n            if (!content.trim()) {\n                return null\n            }\n            const customCommandsMap = buildCodyCommandMap(type, content)\n            this.customCommandsMap = new Map([...this.customCommandsMap, ...customCommandsMap])\n\n            // Register Custom Commands as VS Code commands\n            for (const [key, _command] of customCommandsMap) {\n                this.registeredCommands.push(\n                    vscode.commands.registerCommand(`cody.command.custom.${key}`, () =>\n                        vscode.commands.executeCommand('cody.action.command', key, {\n                            source: 'editor',\n                        })\n                    )\n                )\n            }\n        } catch (error) {\n            console.error('CustomCommandsProvider:build', 'failed', { verbose: error })\n        }\n        return this.customCommandsMap\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/language-file-extensions.json:115-192"",""content"":""    \""ant\"",\n    \""axml\"",\n    \""builds\"",\n    \""ccxml\"",\n    \""clixml\"",\n    \""cproject\"",\n    \""csl\"",\n    \""csproj\"",\n    \""ct\"",\n    \""dita\"",\n    \""ditamap\"",\n    \""ditaval\"",\n    \""dll.config\"",\n    \""dotsettings\"",\n    \""filters\"",\n    \""fsproj\"",\n    \""fxml\"",\n    \""glade\"",\n    \""gml\"",\n    \""grxml\"",\n    \""iml\"",\n    \""ivy\"",\n    \""jelly\"",\n    \""jsproj\"",\n    \""kml\"",\n    \""launch\"",\n    \""mdpolicy\"",\n    \""mjml\"",\n    \""mod\"",\n    \""mxml\"",\n    \""nproj\"",\n    \""nuspec\"",\n    \""odd\"",\n    \""osm\"",\n    \""pkgproj\"",\n    \""plist\"",\n    \""props\"",\n    \""ps1xml\"",\n    \""psc1\"",\n    \""pt\"",\n    \""rdf\"",\n    \""resx\"",\n    \""rss\"",\n    \""scxml\"",\n    \""sfproj\"",\n    \""srdf\"",\n    \""storyboard\"",\n    \""stTheme\"",\n    \""sublime-snippet\"",\n    \""targets\"",\n    \""tmCommand\"",\n    \""tml\"",\n    \""tmLanguage\"",\n    \""tmPreferences\"",\n    \""tmSnippet\"",\n    \""tmTheme\"",\n    \""ui\"",\n    \""urdf\"",\n    \""ux\"",\n    \""vbproj\"",\n    \""vcxproj\"",\n    \""vsixmanifest\"",\n    \""vssettings\"",\n    \""vstemplate\"",\n    \""vxml\"",\n    \""wixproj\"",\n    \""wsdl\"",\n    \""wsf\"",\n    \""wxi\"",\n    \""wxl\"",\n    \""wxs\"",\n    \""x3d\"",\n    \""xacro\"",\n    \""xaml\"",\n    \""xib\"",\n    \""xlf\"",\n    \""xliff\"",\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/prompt-builder/index.ts:39-41"",""content"":""    public build(): Message[] {\n        return this.prefixMessages.concat([...this.reverseMessages].reverse())\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:97-130"",""content"":""} from './configuration'\nexport { NoopEditor } from './editor'\nexport type {\n    ActiveTextEditor,\n    ActiveTextEditorDiagnostic,\n    ActiveTextEditorDiagnosticType,\n    ActiveTextEditorSelection,\n    ActiveTextEditorVisibleContent,\n    Editor,\n} from './editor'\nexport {\n    displayPath,\n    displayPathBasename,\n    displayPathDirname,\n    displayPathWithoutWorkspaceFolderPrefix,\n    setDisplayPathEnvInfo,\n    type DisplayPathEnvInfo,\n} from './editor/displayPath'\nexport { hydrateAfterPostMessage } from './editor/hydrateAfterPostMessage'\nexport * from './editor/utils'\nexport {\n    FeatureFlag,\n    FeatureFlagProvider,\n    featureFlagProvider,\n} from './experimentation/FeatureFlagProvider'\nexport { GuardrailsPost, summariseAttribution } from './guardrails'\nexport type { Attribution, Guardrails } from './guardrails'\nexport { SourcegraphGuardrailsClient } from './guardrails/client'\nexport {\n    CompletionStopReason,\n    type CodeCompletionsClient,\n    type CodeCompletionsParams,\n    type CompletionResponseGenerator,\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_012/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context provided, the model used for edits is configured in several places:

1. In `vscode/src/edit/manager.ts`, the `EditManager` class initializes the `models` property with the available edit models for the user. The `getEditModelsForUser` function from `vscode/src/edit/utils/edit-models.ts` is used to retrieve the available edit models based on the user's authentication status.

2. In `vscode/src/edit/utils/edit-models.ts`, the `getOverridenModelForIntent` function allows overriding the model based on the edit intent (e.g., 'fix', 'doc', 'add', 'edit'). For example, it sets a specific model for the 'fix' intent to ensure a reliable model is used.

3. In `vscode/src/models/index.ts`, the `getModel` function retrieves the selected edit model from local storage or sets a default model based on the user's authentication status and available models.

4. In `vscode/src/edit/input/get-items/model.ts`, the `getModelOptionItems` function generates the list of available edit models for the user to select from in the edit input UI. It also handles separating Cody Pro-only models based on the user's subscription status.

5. In `vscode/src/edit/input/get-input.ts`, the selected edit model is passed as part of the `EditConfiguration` object when initiating an edit.

So, in summary, the available edit models are determined based on the user's authentication status and subscription level, and the specific model for an edit can be configured by the user through the edit input UI or overridden based on the edit intent.",Where is the model used for edits configured?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-items/model.ts:54-74"",""content"":""export const getModelInputItems = (\n    modelOptions: ModelProvider[],\n    activeModel: EditModel,\n    isCodyPro: boolean\n): GetItemsResult => {\n    const modelItems = getModelOptionItems(modelOptions, isCodyPro)\n    const activeItem = modelItems.find(item => item.model === activeModel)\n\n    if (activeItem) {\n        // Update the label of the active item\n        activeItem.label = activeItem.label.replace(\n            QUICK_PICK_ITEM_EMPTY_INDENT_PREFIX,\n            QUICK_PICK_ITEM_CHECKED_PREFIX\n        )\n    }\n\n    return {\n        items: modelItems,\n        activeItem,\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/chat/markdown.ts:76-79"",""content"":""        ...options,\n    })\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-items/model.ts:27-52"",""content"":""export const getModelOptionItems = (\n    modelOptions: ModelProvider[],\n    isCodyPro: boolean\n): EditModelItem[] => {\n    const allOptions = modelOptions.map(modelOption => {\n        const icon = getModelProviderIcon(modelOption.provider)\n        return {\n            label: `${QUICK_PICK_ITEM_EMPTY_INDENT_PREFIX} ${icon} ${modelOption.title}`,\n            description: `by ${modelOption.provider}`,\n            alwaysShow: true,\n            model: modelOption.model,\n            modelTitle: modelOption.title,\n            codyProOnly: modelOption.codyProOnly,\n        }\n    })\n\n    if (!isCodyPro) {\n        return [\n            ...allOptions.filter(option => !option.codyProOnly),\n            { label: 'upgrade to cody pro', kind: vscode.QuickPickItemKind.Separator } as EditModelItem,\n            ...allOptions.filter(option => option.codyProOnly),\n        ]\n    }\n\n    return allOptions\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-input.ts:511-526"",""content"":""                    instruction: instruction.trim(),\n                    userContextFiles: Array.from(selectedContextItems)\n                        .filter(([key]) => instruction.toString().includes(`@${key}`))\n                        .map(([, value]) => value),\n                    model: activeModel,\n                    range: activeRange,\n                    intent: isGenerateIntent(document, activeRange) ? 'add' : 'edit',\n                })\n            },\n        })\n\n        editInput.render(activeTitle, initialValues.initialInputValue?.toString() || '')\n        editInput.input.activeItems = []\n    })\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-items/model.ts:10-25"",""content"":""const getModelProviderIcon = (provider: string): string => {\n    switch (provider) {\n        case 'Anthropic':\n            return '$(anthropic-logo)'\n        case 'OpenAI':\n            return '$(openai-logo)'\n        case 'Mistral':\n            return '$(mistral-logo)'\n        case 'Ollama':\n            return '$(ollama-logo)'\n        case 'Google':\n            return '$(gemini-logo)'\n        default:\n            return ''\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/constants.ts:0-5"",""content"":""import type { EditIntent, EditMode } from './types'\n\nexport const DEFAULT_EDIT_MODE: EditMode = 'edit'\nexport const DEFAULT_EDIT_INTENT: EditIntent = 'edit'\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-items/types.ts:0-13"",""content"":""import type { EditModel } from '@sourcegraph/cody-shared'\nimport type * as vscode from 'vscode'\n\nexport interface EditRangeItem extends vscode.QuickPickItem {\n    range: vscode.Range | (() => Promise<vscode.Range>)\n}\n\nexport interface EditModelItem extends vscode.QuickPickItem {\n    modelTitle: string\n    model: EditModel\n    codyProOnly: boolean\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-items/edit.ts:9-12"",""content"":""export const MODEL_ITEM: vscode.QuickPickItem = {\n    label: 'Model',\n    alwaysShow: true,\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/models/index.ts:0-29"",""content"":""import { fetchLocalOllamaModels } from '../llm-providers/ollama/utils'\nimport { CHAT_INPUT_TOKEN_BUDGET, CHAT_OUTPUT_TOKEN_BUDGET } from '../token/constants'\nimport type { ModelContextWindow } from './types'\nimport type { ModelUsage } from './types'\nimport { getModelInfo } from './utils'\n\n/**\n * ModelProvider manages available chat and edit models.\n * It stores a set of available providers and methods to add,\n * retrieve and select between them.\n */\nexport class ModelProvider {\n    // Whether the model is the default model\n    public default = false\n    // Whether the model is only available to Pro users\n    public codyProOnly = false\n    // The name of the provider of the model, e.g. \""Anthropic\""\n    public provider: string\n    // The title of the model, e.g. \""Claude 2.0\""\n    public readonly title: string\n\n    constructor(\n        /**\n         * The model id that includes the provider name & the model name,\n         * e.g. \""anthropic/claude-2.0\""\n         */\n        public readonly model: string,\n        /**\n         * The usage of the model, e.g. chat or edit.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/models/claude.ts:15-20"",""content"":""    getEdit(options) {\n        return {\n            ...SHARED_PARAMETERS,\n            prompt: buildGenericPrompt('edit', options),\n        }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/models/index.ts:0-25"",""content"":""import type { ChatModel, EditModel, ModelProvider } from '@sourcegraph/cody-shared'\nimport type { AuthProvider } from '../services/AuthProvider'\nimport { localStorage } from '../services/LocalStorageProvider'\n\nasync function setModel(modelID: EditModel, storageKey: string) {\n    // Store the selected model in local storage to retrieve later\n    return localStorage.set(storageKey, modelID)\n}\n\nfunction getModel<T extends string>(\n    authProvider: AuthProvider,\n    models: ModelProvider[],\n    storageKey: string\n): T {\n    const authStatus = authProvider.getAuthStatus()\n    // Free user can only use the default model\n    if (authStatus.isDotCom && authStatus.userCanUpgrade) {\n        return models[0].model as T\n    }\n\n    // Enterprise user can only use the default model\n    // We only support a single model for enterprise users right now\n    if (!authStatus.isDotCom) {\n        return models[0].model as T\n    }\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/models/openai.ts:14-19"",""content"":""    getEdit(options) {\n        return {\n            ...SHARED_PARAMETERS,\n            prompt: buildGenericPrompt('edit', options),\n        }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/index.ts:0-32"",""content"":""import * as vscode from 'vscode'\n\nimport {\n    BotResponseMultiplexer,\n    type ChatMessage,\n    type CompletionParameters,\n    type EditModel,\n    type Message,\n    ModelProvider,\n    PromptString,\n    TokenCounter,\n    getSimplePreamble,\n    ps,\n} from '@sourcegraph/cody-shared'\n\nimport type { VSCodeEditor } from '../../editor/vscode-editor'\nimport type { FixupTask } from '../../non-stop/FixupTask'\nimport type { EditIntent } from '../types'\n\nimport { PromptBuilder } from '../../prompt-builder'\nimport { getContext } from './context'\nimport { claude } from './models/claude'\nimport { openai } from './models/openai'\nimport type { EditLLMInteraction, GetLLMInteractionOptions, LLMInteraction } from './type'\n\nconst INTERACTION_MODELS: Record<EditModel, EditLLMInteraction> = {\n    'anthropic/claude-2.0': claude,\n    'anthropic/claude-2.1': claude,\n    'anthropic/claude-instant-1.2': claude,\n    'anthropic/claude-3-opus-20240229': claude,\n    'anthropic/claude-3-sonnet-20240229': claude,\n    'anthropic/claude-3-haiku-20240307': claude,\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/manager.ts:98-122"",""content"":""\n        const editor = getEditor()\n        if (editor.ignored) {\n            void vscode.window.showInformationMessage('Cannot edit Cody ignored file.')\n            return\n        }\n\n        const document = configuration.document || editor.active?.document\n        if (!document) {\n            void vscode.window.showErrorMessage('Please open a file before running a command.')\n            return\n        }\n\n        const proposedRange = configuration.range || editor.active?.selection\n        if (!proposedRange) {\n            return\n        }\n\n        // Set default edit configuration, if not provided\n        // It is possible that these values may be overriden later, e.g. if the user changes them in the edit input.\n        const range = getEditLineSelection(document, proposedRange)\n        const mode = configuration.mode || DEFAULT_EDIT_MODE\n        const model = configuration.model || editModel.get(this.options.authProvider, this.models)\n        const intent = getEditIntent(document, range, configuration.intent)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/models/utils.ts:85-106"",""content"":""export function getChatModelsFromConfiguration(): ModelProvider[] {\n    const codyConfig = vscode.workspace.getConfiguration('cody')\n    const modelsConfig = codyConfig?.get<ChatModelProviderConfig[]>('dev.models')\n    if (!modelsConfig?.length) {\n        return []\n    }\n\n    const providers: ModelProvider[] = []\n    for (const m of modelsConfig) {\n        const provider = new ModelProvider(\n            `${m.provider}/${m.model}`,\n            [ModelUsage.Chat, ModelUsage.Edit],\n            { input: m.inputTokens ?? CHAT_INPUT_TOKEN_BUDGET, output: m.outputTokens ?? ANSWER_TOKENS },\n            { apiKey: m.apiKey, apiEndpoint: m.apiEndpoint }\n        )\n        provider.codyProOnly = true\n        providers.push(provider)\n    }\n\n    ModelProvider.addProviders(providers)\n    return providers\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/provider.ts:28-55"",""content"":""\ninterface EditProviderOptions extends EditManagerOptions {\n    task: FixupTask\n    controller: FixupController\n}\n\n// Initiates a completion and responds to the result from the LLM. Implements\n// \""tools\"" like directing the response into a specific file. Code is forwarded\n// to the FixupTask.\nexport class EditProvider {\n    private insertionResponse: string | null = null\n    private insertionInProgress = false\n    private insertionPromise: Promise<void> | null = null\n    private abortController: AbortController | null = null\n\n    constructor(public config: EditProviderOptions) {}\n\n    public async startEdit(): Promise<void> {\n        return wrapInActiveSpan('command.edit.start', async span => {\n            this.config.controller.startTask(this.config.task)\n            const model = this.config.task.model\n            const contextWindow = ModelProvider.getContextWindowByID(model)\n            const {\n                messages,\n                stopSequences,\n                responseTopic,\n                responsePrefix = '',\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/models/chatModelContext.tsx:17-20"",""content"":""export function useCurrentChatModel(): ModelProvider | undefined {\n    const { chatModels } = useChatModelContext()\n    return chatModels?.find(model => model.default) ?? chatModels?.[0]\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:48-63"",""content"":""- [ ] Verify that you can see a list of code lenses with a Cody icon above the generated code: `Show diff`, `Accept`, `Retry`, and `Undo`.\n- [ ] Verify that you can see a diff view of the edit in a new tab by clicking `Show diff`.\n- [ ] Verify that you can prompt Cody to retry the command by clicking `Retry` and entering new instructions.\n- [ ] Verify that you can undo the edit by clicking `Undo`.\n- [ ] Verify that the ghost text disappears by clicking `Accept`.\n\n#### Editing code (Additional Configuration)\n\n- [ ] Highlight a section of code.\n- [ ] Trigger the Edit shortcut with Option+K\n- [ ] Try to add a file to the Edit instruction, by using \""@\"" and searching for a file\n- [ ] Try to add a symbol to the Edit instruction, by using \""@#\"" and searching for a symbol\n- [ ] Try to change the range of the Edit, by selecting \""Range\"". Check that navigating through the options correctly updates the range shown in the editor.\n- [ ] Try to change the model of the Edit, by selecting \""Model\"".\n- [ ] Submit edits after changing the above values, and check that the Edit performs correctly (e.g. uses correct range, uses correct context)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/models/chatModelContext.tsx:13-15"",""content"":""export function useChatModelContext(): ChatModelContext {\n    return useContext(context)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/types.ts:0-13"",""content"":""/**\n * The intent classification for the edit.\n * Manually determined depending on how the edit is triggered.\n */\nexport type EditIntent = 'add' | 'edit' | 'fix' | 'doc' | 'test'\n\n/**\n * The edit modes that can be used when applying an edit.\n * - 'edit': Modify selected code in place.\n * - 'insert': Insert new code at the selected location.\n */\nexport type EditMode = 'edit' | 'insert'\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/models/index.ts:50-53"",""content"":""\nexport const chatModel = createModelAccessor<ChatModel>('model')\nexport const editModel = createModelAccessor<EditModel>('editModel')\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/utils/edit-models.ts:0-27"",""content"":""import { type AuthStatus, type EditModel, ModelProvider, ModelUsage } from '@sourcegraph/cody-shared'\nimport type { EditIntent } from '../types'\n\nexport function getEditModelsForUser(authStatus: AuthStatus): ModelProvider[] {\n    return ModelProvider.getProviders(ModelUsage.Edit, !authStatus.userCanUpgrade)\n}\n\nexport function getOverridenModelForIntent(intent: EditIntent, currentModel: EditModel): EditModel {\n    switch (intent) {\n        case 'fix':\n            // Fix is a case where we want to ensure that users do not end up with a broken edit model.\n            // It is outside of the typical Edit flow so it is more likely a user could become \""stuck\"" here.\n            // TODO: Make the model usage more visible to users outside of the normal edit flow. This means\n            // we could let the user provide any model they want for `fix`.\n            // Issue: https://github.com/sourcegraph/cody/issues/3512\n            return 'anthropic/claude-3-sonnet-20240229'\n        case 'doc':\n            // Doc is a case where we can sacrifice LLM performnace for improved latency and get comparable results.\n            return 'anthropic/claude-3-haiku-20240307'\n        case 'test':\n        case 'add':\n        case 'edit':\n            // Support all model usage for add and edit intents.\n            return currentModel\n    }\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/manager.ts:25-50"",""content"":""import { getEditIntent } from './utils/edit-intent'\nimport { getEditModelsForUser } from './utils/edit-models'\nimport { getEditLineSelection, getEditSmartSelection } from './utils/edit-selection'\n\nexport interface EditManagerOptions {\n    editor: VSCodeEditor\n    chat: ChatClient\n    ghostHintDecorator: GhostHintDecorator\n    authProvider: AuthProvider\n    extensionClient: ExtensionClient\n}\n\n// EditManager handles translating specific edit intents (document, edit) into\n// generic FixupTasks, and pairs a FixupTask with an EditProvider to generate\n// a completion.\nexport class EditManager implements vscode.Disposable {\n    private readonly controller: FixupController\n    private disposables: vscode.Disposable[] = []\n    private editProviders = new WeakMap<FixupTask, EditProvider>()\n    private models: ModelProvider[] = []\n\n    constructor(public options: EditManagerOptions) {\n        this.controller = new FixupController(options.authProvider, options.extensionClient)\n        /**\n         * Entry point to triggering a new Edit.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:86-114"",""content"":""### Changed\n\n- Chat: A new design for chat messages, with avatars and a separate context row. [pull/3639](https://github.com/sourcegraph/cody/pull/3639)\n- Chat: The Enhanced Context Settings modal is opened by default for the first chat session. [pull/3547](https://github.com/sourcegraph/cody/pull/3547)\n- Add information on which Cody tier is being used to analytics events. [pull/3508](https://github.com/sourcegraph/cody/pull/3508)\n- Auth: Enable the new onboarding flow that does not require the redirect back to VS Code for everyone. [pull/3574](https://github.com/sourcegraph/cody/pull/3574)\n- Chat: Claude 3 Sonnet is now the default model for every Cody Free or Pro user. [pull/3575](https://github.com/sourcegraph/cody/pull/3575)\n- Edit: Removed a previous Edit shortcut (`Shift+Cmd/Ctrl+v`), use `Opt/Alt+K` to trigger Edits. [pull/3591](https://github.com/sourcegraph/cody/pull/3591)\n- Commands: The `Editor Title Icon` configuration option has been removed from the Cody Settings menu. Users can configure the title bar icon by right-clicking on the title bar. [pull/3677](https://github.com/sourcegraph/cody/pull/3677)\n\n### Feature Flags\n\n> This section covers experiments that run behind feature flags for non-Enterprise users.\n\n- Hover Commands: Cody commands are now integrated with the native hover provider, allowing you to seamlessly access essential commands on mouse hover. [pull/3585](https://github.com/sourcegraph/cody/pull/3585)\n\n## [1.10.2]\n\n### Added\n\n- Cody Enterprise users now have access to an `experimental-openaicompatible` which allows bringing your own LLM via any OpenAI-compatible API. For now, this is only supported with Starchat and specific configurations - but we continue to generalize this work to support more models and OpenAI-compatible endpoints. [pull/3218](https://github.com/sourcegraph/cody/pull/3218)\n\n## [1.10.1]\n\n### Added\n\n- Autocomplete: Add Claude 3 Haiku experimental autocomplete support. [pull/3538](https://github.com/sourcegraph/cody/pull/3538)\n\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/models/types.ts:0-62"",""content"":""import type { ModelProvider } from '.'\n\nexport enum ModelUsage {\n    Chat = 'chat',\n    Edit = 'edit',\n}\n\n// Utility to narrow a model type to a specific model usage\ntype HasUsage<T, I> = T extends { usage: readonly ModelUsage[] }\n    ? I extends T['usage'][number]\n        ? T\n        : never\n    : never\n\ntype Models = typeof ModelProvider\n\n/**\n * Available models for Edit.\n * This is either:\n * - one of the availble options (dotcom)\n * - an unknown `string` (enterprise)\n */\nexport type EditModel =\n    | {\n          [K in keyof Models]: HasUsage<Models[K], ModelUsage.Edit>\n      }[keyof Models]['model']\n    | (string & {})\n\n/**\n * Available models for Chat.\n * This is either:\n * - one of the availble options (dotcom)\n * - an unknown `string` (enterprise)\n */\nexport type ChatModel =\n    | {\n          [K in keyof Models]: HasUsage<Models[K], ModelUsage.Chat>\n      }[keyof Models]['model']\n    | (string & {})\n\nexport interface ModelContextWindow {\n    /**\n     * The token limit reserved for chat input.\n     */\n    input: number\n    /**\n     * The maximum number of tokens that the model can respond with in a single request.\n     */\n    output: number\n    /**\n     * The additional tokens reserved for context.\n     * When not defined, context shares the same token limit as input.\n     */\n    context?: {\n        /**\n         * The token limit reserved for user-added context.\n         * Example: @-mentions.\n         */\n        user?: number\n    }\n}\n""}]",Find logic,,,1,,0,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_013/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_014/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_015/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context, the selection of context items from different sources seems to happen in the `context-mixer.ts` file, specifically in the `GetContextResult` interface and the `ContextMixer` class.

The `ContextMixer` is responsible for combining multiple context retrieval strategies into a single proposed context list. It does this by ranking the order of documents using reciprocal rank fusion and then combining the snippets from each retriever into a single list using top-k.

The `GetContextResult` interface defines the result of the context mixing process, which includes an array of `AutocompleteContextSnippet` objects representing the selected context, and a `ContextSummary` object containing information about the different retrievers that were used, such as the strategy, duration, and which positions in the result set each retriever contributed to.

The specific context retrieval strategies are defined in the `context-strategy.ts` file, where the `ContextStrategy` type lists the available strategies like `bfg`, `jaccard-similarity`, `bfg-mixed`, etc. Each strategy is implemented by a different `ContextRetriever` class, such as `BfgRetriever` or `JaccardSimilarityRetriever`.

So, in summary, the `ContextMixer` class orchestrates the selection of context items from different retrieval strategies (e.g., BFG, Jaccard similarity, local context, etc.), ranks and combines them into a single list, and provides information about the contribution of each strategy.",Where do we choose the context items from different sources?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/context-ranking.ts:168-197"",""content"":""    public async rankContextItems(\n        query: PromptString,\n        contextItems: ContextItem[]\n    ): Promise<ContextItem[]> {\n        const repoUri = this.getRepoUri()\n        if (!repoUri || !this.endpointIsDotcom || !this.serviceStarted) {\n            return contextItems\n        }\n\n        try {\n            const service = await this.getService()\n            const rankItems = this.convertContextItemsToRankItems(repoUri.fsPath, contextItems)\n            const rankedItemsOrder = await service.request('context-ranking/rank-items', {\n                repoPath: repoUri.path,\n                contextItems: rankItems,\n                query: query.toString(),\n            })\n\n            if (rankedItemsOrder.prediction.length !== contextItems.length) {\n                return contextItems\n            }\n            const reRankedContextItems = this.orderContextItemsAsRankItems(\n                contextItems,\n                rankedItemsOrder.prediction\n            )\n            return reRankedContextItems\n        } catch (error) {\n            return contextItems\n        }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:26-66"",""content"":""export type {\n    ChatError,\n    EventSource,\n    ChatHistory,\n    ChatMessage,\n    UserLocalHistory,\n    SerializedChatMessage,\n} from './chat/transcript/messages'\nexport {\n    CODY_PASSTHROUGH_VSCODE_OPEN_COMMAND_ID,\n    webviewOpenURIForContextItem,\n} from './chat/transcript/display-text'\nexport { Typewriter } from './chat/typewriter'\nexport { reformatBotMessageForChat } from './chat/viewHelpers'\nexport type {\n    ContextGroup,\n    ContextProvider,\n    ContextStatusProvider,\n    Disposable,\n    EnhancedContextContextT,\n    LocalEmbeddingsProvider,\n    LocalSearchProvider,\n    RemoteSearchProvider,\n    SearchProvider,\n} from './codebase-context/context-status'\nexport {\n    type ContextItem,\n    type ContextItemFile,\n    ContextItemSource,\n    type ContextItemWithContent,\n    type ContextItemSymbol,\n    type ContextFileType,\n    type ContextMessage,\n    type SymbolKind,\n} from './codebase-context/messages'\nexport type {\n    CodyCommand,\n    CodyCommandContext,\n    CodyCommandType,\n    TerminalOutputArguments,\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:59-73"",""content"":""function convertContextItemMentionElement(domNode: HTMLElement): DOMConversionOutput | null {\n    const data = domNode.getAttribute(DOM_DATA_ATTR)\n    if (data !== null) {\n        try {\n            const contextItem: SerializedContextItem = JSON.parse(data)\n            const node = $createContextItemMentionNode(contextItem)\n            return { node }\n        } catch (error) {\n            console.error(error)\n            return null\n        }\n    }\n\n    return null\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/cells/contextCell/ContextCell.tsx:0-27"",""content"":""import type { ContextItem } from '@sourcegraph/cody-shared'\nimport classNames from 'classnames'\nimport type React from 'react'\nimport { FileLink } from '../../../Components/FileLink'\nimport { SourcegraphLogo } from '../../../icons/SourcegraphLogo'\nimport { MENTION_CLASS_NAME } from '../../../promptEditor/nodes/ContextItemMentionNode'\nimport { getVSCodeAPI } from '../../../utils/VSCodeApi'\nimport { LoadingDots } from '../../components/LoadingDots'\nimport { Cell } from '../Cell'\nimport styles from './ContextCell.module.css'\n\n/**\n * A component displaying the context for a human message.\n */\nexport const ContextCell: React.FunctionComponent<{\n    contextFiles: ContextItem[] | undefined\n    disabled?: boolean\n    className?: string\n\n    /** For use in storybooks only. */\n    __storybook__initialOpen?: boolean\n}> = ({ contextFiles, disabled, className, __storybook__initialOpen }) => {\n    const usedContext = []\n    const excludedAtContext = []\n    if (contextFiles) {\n        for (const f of contextFiles) {\n            if (f.isTooLarge) {\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/execute/cody.json:16-24"",""content"":""      \""context\"": {\n        \""currentFile\"": true\n      },\n      \""type\"": \""default\""\n    },\n    \""test\"": {\n      \""description\"": \""Generate unit tests\"",\n      \""prompt\"": \""Review the shared context to identify the testing framework and libraries in use. Then, generate a suite of multiple unit tests for the selected function using the detected test framework and libraries. Be sure to import the function being tested. Use the same patterns, testing framework, conventions, and libraries as shown in the shared context. Only import modules, functions, dependencies, and mocks based on shared code. If a test suite for the selected code is in the shared context, focus on generating new tests for uncovered cases. If none are detected, import common unit test libraries for {languageName}. Focus on validating key functionality with simple and complete assertions. Before writing the tests, identify which testing libraries and frameworks to use and import. At the end, enclose the fully completed code for the new unit tests without any comments, fragments, or TODOs. The new tests should validate the expected functionality and cover edge cases for with all required imports, including the function being tested. Do not repeat tests from the shared context. Enclose only the complete runnable tests.\"",\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:190-199"",""content"":""export function $createContextItemMentionNode(\n    contextItem: ContextItem | SerializedContextItem\n): ContextItemMentionNode {\n    const node = new ContextItemMentionNode(contextItem)\n    node.setMode('token').toggleDirectionless()\n    contextItem.type === 'file' &&\n        contextItem.isTooLarge &&\n        node.setStyle('color: var(--vscode-list-errorForeground)')\n    return $applyNodeReplacement(node)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:130-167"",""content"":""} from './inferenceClient/misc'\nexport type {\n    ContextResult,\n    FilenameContextFetcher,\n    IndexedKeywordContextFetcher,\n    LocalEmbeddingsFetcher,\n    IRemoteSearch,\n    Result,\n    SearchPanelFile,\n    SearchPanelSnippet,\n} from './local-context'\nexport { logDebug, logError, setLogger } from './logger'\nexport {\n    createOllamaClient,\n    ollamaChatClient,\n    type OllamaGenerateParams,\n    OLLAMA_DEFAULT_URL,\n} from './llm-providers/ollama'\nexport {\n    MAX_BYTES_PER_FILE,\n    MAX_CURRENT_FILE_TOKENS,\n    ANSWER_TOKENS,\n    NUM_CODE_RESULTS,\n    NUM_TEXT_RESULTS,\n    SURROUNDING_LINES,\n} from './prompt/constants'\nexport { PromptMixin, newPromptMixin } from './prompt/prompt-mixin'\nexport * from './prompt/templates'\nexport {\n    truncateText,\n    truncateTextNearestLine,\n    truncatePromptStringStart,\n    truncatePromptString,\n} from './prompt/truncation'\nexport type { Message } from './sourcegraph-api'\nexport { SourcegraphBrowserCompletionsClient } from './sourcegraph-api/completions/browserClient'\nexport { SourcegraphCompletionsClient } from './sourcegraph-api/completions/client'\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:213-217"",""content"":""export function $createContextItemTextNode(contextItem: ContextItem | SerializedContextItem): TextNode {\n    const atNode = new ContextItemMentionNode(contextItem)\n    const textNode = new TextNode(atNode.__text)\n    return $applyNodeReplacement(textNode)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/openaicompatible.ts:418-421"",""content"":""\n    return context.concat(currentFileNameComment, prompt.prefix)\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/bindings/kotlin/lib/src/main/kotlin/com/sourcegraph/cody/protocol_generated/ContextItem.kt:22-53"",""content"":""\ndata class ContextItemFile(\n  val uri: Uri? = null,\n  val range: RangeData? = null,\n  val content: String? = null,\n  val repoName: String? = null,\n  val revision: String? = null,\n  val title: String? = null,\n  val source: ContextItemSource? = null, // Oneof: embeddings, user, keyword, editor, filename, search, unified, selection, terminal, uri\n  val size: Int? = null,\n  val isTooLarge: Boolean? = null,\n  val type: TypeEnum? = null, // Oneof: file\n) : ContextItem() {\n\n  enum class TypeEnum {\n    @SerializedName(\""file\"") File,\n  }\n}\n\ndata class ContextItemSymbol(\n  val uri: Uri? = null,\n  val range: RangeData? = null,\n  val content: String? = null,\n  val repoName: String? = null,\n  val revision: String? = null,\n  val title: String? = null,\n  val source: ContextItemSource? = null, // Oneof: embeddings, user, keyword, editor, filename, search, unified, selection, terminal, uri\n  val size: Int? = null,\n  val isTooLarge: Boolean? = null,\n  val type: TypeEnum? = null, // Oneof: symbol\n  val symbolName: String? = null,\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:77-173"",""content"":""export class ContextItemMentionNode extends TextNode {\n    static getType(): string {\n        return 'contextItemMention'\n    }\n\n    static clone(node: ContextItemMentionNode): ContextItemMentionNode {\n        return new ContextItemMentionNode(node.contextItem, node.__text, node.__key)\n    }\n    static importJSON(serializedNode: SerializedContextItemMentionNode): ContextItemMentionNode {\n        const node = $createContextItemMentionNode(serializedNode.contextItem)\n        node.setTextContent(serializedNode.text)\n        node.setFormat(serializedNode.format)\n        node.setDetail(serializedNode.detail)\n        node.setMode(serializedNode.mode)\n        node.setStyle(serializedNode.style)\n        return node\n    }\n\n    private contextItem: SerializedContextItem\n\n    constructor(\n        contextItemWithAllFields: ContextItem | SerializedContextItem,\n        text?: string,\n        key?: NodeKey\n    ) {\n        // Make sure we only bring over the fields on the context item that we need, or else we\n        // could accidentally include tons of data (including the entire contents of files).\n        const contextItem = serializeContextItem(contextItemWithAllFields)\n\n        super(text ?? contextItemMentionNodeDisplayText(contextItem), key)\n\n        this.contextItem = contextItem\n    }\n\n    exportJSON(): SerializedContextItemMentionNode {\n        return {\n            ...super.exportJSON(),\n            contextItem: this.contextItem,\n            type: ContextItemMentionNode.getType(),\n            version: 1,\n        }\n    }\n\n    private static CLASS_NAMES = `context-item-mention-node ${styles.contextItemMentionNode}`\n\n    createDOM(config: EditorConfig): HTMLElement {\n        const element = super.createDOM(config)\n        element.className = ContextItemMentionNode.CLASS_NAMES\n        return element\n    }\n\n    exportDOM(): DOMExportOutput {\n        const element = document.createElement('span')\n        element.setAttribute(DOM_DATA_ATTR, JSON.stringify(this.contextItem))\n        element.className = ContextItemMentionNode.CLASS_NAMES\n\n        const link = document.createElement('a')\n        const { href, target } = webviewOpenURIForContextItem({\n            uri: URI.parse(this.contextItem.uri),\n            range: this.contextItem.range,\n        })\n        link.href = href\n        if (target) {\n            link.target = target\n        }\n        link.textContent = this.__text\n        element.appendChild(link)\n\n        return { element }\n    }\n\n    static importDOM(): DOMConversionMap | null {\n        return {\n            span: (domNode: HTMLElement) => {\n                if (!domNode.hasAttribute(DOM_DATA_ATTR)) {\n                    return null\n                }\n                return {\n                    conversion: convertContextItemMentionElement,\n                    priority: 1,\n                }\n            },\n        }\n    }\n\n    isTextEntity(): true {\n        return true\n    }\n\n    canInsertTextBefore(): boolean {\n        return false\n    }\n\n    canInsertTextAfter(): boolean {\n        return false\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-input.ts:396-419"",""content"":""\n                const matchingContext = await getMatchingContext(mentionQuery)\n                if (matchingContext.length === 0) {\n                    // Attempted to match but found nothing\n                    input.items = [\n                        {\n                            alwaysShow: true,\n                            label:\n                                mentionQuery.type === 'symbol'\n                                    ? mentionQuery.text.length === 0\n                                        ? SYMBOL_HELP_LABEL\n                                        : NO_SYMBOL_MATCHES_LABEL\n                                    : mentionQuery.text.length === 0\n                                      ? FILE_HELP_LABEL\n                                      : NO_FILE_MATCHES_LABEL,\n                        },\n                    ]\n                    return\n                }\n\n                // Update stored context items so we can retrieve them later\n                for (const { key, item } of matchingContext) {\n                    contextItems.set(key, item)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/mentions/urlContextItems.ts:40-68"",""content"":""export async function fetchContentForURLContextItem(\n    url: string,\n    signal?: AbortSignal\n): Promise<string | null> {\n    const resp = await fetch(url.toString(), { signal })\n    if (!resp.ok) {\n        return null\n    }\n    const body = await resp.text()\n\n    // HACK(sqs): Rudimentarily strip HTML tags, script, and other unneeded elements from body using\n    // regexp. This is NOT intending to be a general-purpose HTML parser and is NOT sanitizing the\n    // value for security.\n    const bodyWithoutTags = body\n        .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n        .replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\n        .replace(/<svg\\b[^<]*(?:(?!<\\/svg>)<[^<]*)*<\\/svg>/gi, '')\n        .replace(/<!--.*?-->/gs, '')\n        .replace(/\\s(?:class|style)=[\""'][^\""']*[\""']/gi, '')\n        .replace(/\\sdata-[\\w-]+(=[\""'][^\""']*[\""'])?/gi, '')\n\n    // TODO(sqs): Arbitrarily trim the response text to avoid overflowing the context window for the\n    // LLM. Ideally we would make the prompt builder prioritize this context item over other context\n    // because it is explicitly from the user.\n    const MAX_LENGTH = 14000\n    return bodyWithoutTags.length > MAX_LENGTH\n        ? `${bodyWithoutTags.slice(0, MAX_LENGTH)}... (web page content was truncated)`\n        : bodyWithoutTags\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-string.ts:294-320"",""content"":""\n    public static fromContextItem(contextItem: ContextItem) {\n        const ref = [contextItem.uri]\n        return {\n            content: contextItem.content\n                ? internal_createPromptString(contextItem.content, ref)\n                : undefined,\n            repoName: contextItem.repoName\n                ? internal_createPromptString(contextItem.repoName, ref)\n                : undefined,\n        }\n    }\n\n    // 🚨 Use this function only for user-generated queries.\n    // TODO: Can we detect if the user is pasting in content from a document?\n    public static unsafe_fromUserQuery(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 Use this function only for LLM responses queries.\n    public static unsafe_fromLLMResponse(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 We slam chats in and out of storage quite a bit, so it seems weird to\n    // have references on a chat transcript, but closing and opening the chat\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:35-48"",""content"":""export function serializeContextItem(\n    contextItem: ContextItem | SerializedContextItem\n): SerializedContextItem {\n    // Make sure we only bring over the fields on the context item that we need, or else we\n    // could accidentally include tons of data (including the entire contents of files).\n    return {\n        ...contextItem,\n        uri: contextItem.uri.toString(),\n\n        // Don't include the `content` (if it's present) because it's quite large, and we don't need\n        // to serialize it here. It can be hydrated on demand.\n        content: undefined,\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/context/context-mixer.ts:0-33"",""content"":""import type * as vscode from 'vscode'\n\nimport {\n    type AutocompleteContextSnippet,\n    type DocumentContext,\n    isCodyIgnoredFile,\n    wrapInActiveSpan,\n} from '@sourcegraph/cody-shared'\n\nimport type { LastInlineCompletionCandidate } from '../get-inline-completions'\nimport type { ContextStrategy, ContextStrategyFactory } from './context-strategy'\nimport { fuseResults } from './reciprocal-rank-fusion'\n\ninterface GetContextOptions {\n    document: vscode.TextDocument\n    position: vscode.Position\n    docContext: DocumentContext\n    abortSignal?: AbortSignal\n    maxChars: number\n    lastCandidate?: LastInlineCompletionCandidate\n}\n\nexport interface ContextSummary {\n    /** Name of the strategy being used */\n    strategy: ContextStrategy\n    /** Total duration of the context retrieval phase */\n    duration: number\n    /** Total characters of combined context snippets */\n    totalChars: number\n    /** Detailed information for each retriever that has run */\n    retrieverStats: {\n        [identifier: string]: {\n            /** Number of items that are ended up being suggested to be used by the context mixer */\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:50-52"",""content"":""export function deserializeContextItem(contextItem: SerializedContextItem): ContextItem {\n    return { ...contextItem, uri: URI.parse(contextItem.uri) }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/get-matching-context.ts:0-31"",""content"":""import type { ContextItem, MentionQuery } from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\n\nimport { getChatContextItemsForMention } from '../../chat/context/chatContext'\nimport { getLabelForContextItem } from './utils'\n\ninterface FixupMatchingContext {\n    /* Unique identifier for the context, shown in the input value but not necessarily in the quick pick selector */\n    key: string\n    /* If present, will override the key shown in the quick pick selector */\n    shortLabel?: string\n    item: ContextItem\n}\n\nexport async function getMatchingContext(mentionQuery: MentionQuery): Promise<FixupMatchingContext[]> {\n    const token = new vscode.CancellationTokenSource()?.token\n    const results = await getChatContextItemsForMention(mentionQuery, token)\n    return results.map(result => {\n        return {\n            key: getLabelForContextItem(result),\n            item: result,\n            shortLabel:\n                result.type === 'symbol'\n                    ? `${result.kind === 'class' ? '$(symbol-structure)' : '$(symbol-method)'} ${\n                          result.symbolName\n                      }`\n                    : undefined,\n        }\n    })\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/mentions/urlContextItems.ts:7-34"",""content"":""export async function getURLContextItems(\n    urlInput: string,\n    signal?: AbortSignal\n): Promise<ContextItem[]> {\n    const url = tryParsePossiblyIncompleteURL(urlInput)\n    if (url === null) {\n        return []\n    }\n\n    try {\n        const content = await fetchContentForURLContextItem(url.toString(), signal)\n        if (content === null) {\n            return []\n        }\n        return [\n            {\n                type: 'file',\n                uri: url,\n                content,\n                title: tryGetHTMLDocumentTitle(content),\n                source: ContextItemSource.Uri,\n            },\n        ]\n    } catch (error) {\n        // Suppress errors because the user might be typing a URL that is not yet valid.\n        return []\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/context/context-strategy.ts:0-25"",""content"":""import * as vscode from 'vscode'\n\nimport type { ContextRetriever } from '../types'\n\nimport type { BfgRetriever } from './retrievers/bfg/bfg-retriever'\nimport { JaccardSimilarityRetriever } from './retrievers/jaccard-similarity/jaccard-similarity-retriever'\nimport { SectionHistoryRetriever } from './retrievers/section-history/section-history-retriever'\n\nexport type ContextStrategy =\n    | 'bfg'\n    | 'jaccard-similarity'\n    | 'new-jaccard-similarity'\n    | 'bfg-mixed'\n    | 'local-mixed'\n    | 'none'\n\nexport interface ContextStrategyFactory extends vscode.Disposable {\n    getStrategy(document: vscode.TextDocument): { name: ContextStrategy; retrievers: ContextRetriever[] }\n}\n\nexport class DefaultContextStrategyFactory implements ContextStrategyFactory {\n    private disposables: vscode.Disposable[] = []\n\n    private localRetriever: ContextRetriever | undefined\n    private graphRetriever: ContextRetriever | undefined\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/mentions/urlContextItems.ts:36-38"",""content"":""export function isURLContextItem(item: Pick<ContextItem, 'uri'>): boolean {\n    return item.uri.scheme === 'http' || item.uri.scheme === 'https'\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/context/context-mixer.ts:33-61"",""content"":""            suggestedItems: number\n            /** Number of total snippets */\n            retrievedItems: number\n            /** Duration of the individual retriever */\n            duration: number\n            /**\n             * A bitmap that indicates at which position in the result set an entry from the given\n             * retriever is included. It only includes information about the first 32 entries.\n             *\n             * The lowest bit indicates if the first entry is included, the second lowest bit\n             * indicates if the second entry is included, and so on.\n             */\n            positionBitmap: number\n        }\n    }\n}\n\nexport interface GetContextResult {\n    context: AutocompleteContextSnippet[]\n    logSummary: ContextSummary\n}\n\n/**\n * The context mixer is responsible for combining multiple context retrieval strategies into a\n * single proposed context list.\n *\n * This is done by ranking the order of documents using reciprocal rank fusion and then combining\n * the snippets from each retriever into a single list using top-k (so we will pick all returned\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/context-ranking.ts:212-226"",""content"":""    private orderContextItemsAsRankItems(\n        contextItems: ContextItem[],\n        rankedItemsOrder: RankerPrediction[]\n    ): ContextItem[] {\n        rankedItemsOrder.sort((a, b) => b.score - a.score)\n        const orderedContextItems: ContextItem[] = []\n        for (const item of rankedItemsOrder) {\n            const newIndex = item.document_id\n            if (newIndex < 0 || newIndex >= contextItems.length) {\n                return contextItems\n            }\n            orderedContextItems.push(contextItems[newIndex])\n        }\n        return orderedContextItems\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:38-88"",""content"":""\n    /**\n     * The token count of the item's content.\n     */\n    size?: number\n\n    /**\n     * Whether the content of the item is too large to be included as context.\n     */\n    isTooLarge?: boolean\n}\n\n/**\n * The source of this context.\n */\nexport enum ContextItemSource {\n    /** From embeddings search */\n    Embeddings = 'embeddings',\n\n    /** Explicitly @-mentioned by the user in chat */\n    User = 'user',\n\n    /** From local keyword search */\n    Keyword = 'keyword',\n\n    /** From the current editor state and open tabs/documents */\n    Editor = 'editor',\n\n    Filename = 'filename',\n\n    /** From symf search */\n    Search = 'search',\n\n    /** Remote search */\n    Unified = 'unified',\n\n    /** Selected code from the current editor */\n    Selection = 'selection',\n\n    /** Output from the terminal */\n    Terminal = 'terminal',\n\n    /** From URI */\n    Uri = 'uri',\n}\n\n/**\n * An item (such as a file or symbol) that is included as context in a chat message.\n */\nexport type ContextItem = ContextItemFile | ContextItemSymbol\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/context-ranking.ts:199-210"",""content"":""    private convertContextItemsToRankItems(\n        baseRepoPath: string,\n        contextItems: ContextItem[]\n    ): RankContextItem[] {\n        const rankContextItems = contextItems.map((item, index) => ({\n            documentId: index,\n            filePath: item.uri?.path ? path.relative(baseRepoPath, item.uri?.path) : '',\n            content: item.content ?? '',\n            source: item.source,\n        }))\n        return rankContextItems\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/completion-provider-config.ts:55-77"",""content"":""        )\n    }\n\n    public get contextStrategy(): ContextStrategy {\n        const { config } = this\n\n        const bfgMixedContextFlag = this.getPrefetchedFlag(FeatureFlag.CodyAutocompleteContextBfgMixed)\n\n        const contextStrategy: ContextStrategy =\n            config.autocompleteExperimentalGraphContext === 'bfg'\n                ? 'bfg'\n                : config.autocompleteExperimentalGraphContext === 'bfg-mixed'\n                  ? 'bfg-mixed'\n                  : config.autocompleteExperimentalGraphContext === 'local-mixed'\n                      ? 'local-mixed'\n                      : config.autocompleteExperimentalGraphContext === 'jaccard-similarity'\n                          ? 'jaccard-similarity'\n                          : config.autocompleteExperimentalGraphContext === 'new-jaccard-similarity'\n                              ? 'new-jaccard-similarity'\n                              : bfgMixedContextFlag\n                                  ? 'bfg-mixed'\n                                  : 'jaccard-similarity'\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/bindings/kotlin/lib/src/main/kotlin/com/sourcegraph/cody/protocol_generated/ContextItemSource.kt:0-6"",""content"":""@file:Suppress(\""FunctionName\"", \""ClassName\"", \""unused\"", \""EnumEntryName\"", \""UnusedImport\"")\npackage com.sourcegraph.cody.protocol_generated\n\ntypealias ContextItemSource = String // One of: embeddings, user, keyword, editor, filename, search, unified, selection, terminal, uri\n\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:88-121"",""content"":""\n/**\n * A file (or a subset of a file given by a range) that is included as context in a chat message.\n */\nexport interface ContextItemFile extends ContextItemCommon {\n    type: 'file'\n}\n\n/**\n * A symbol (which is a range within a file) that is included as context in a chat message.\n */\nexport interface ContextItemSymbol extends ContextItemCommon {\n    type: 'symbol'\n\n    /** The name of the symbol, used for presentation only (not semantically meaningful). */\n    symbolName: string\n\n    /** The kind of symbol, used for presentation only (not semantically meaningful). */\n    kind: SymbolKind\n}\n\n/** The valid kinds of a symbol. */\nexport type SymbolKind = 'class' | 'function' | 'method'\n\n/** {@link ContextItem} with the `content` field set to the content. */\nexport type ContextItemWithContent = ContextItem & Required<Pick<ContextItem, 'content'>>\n\n/**\n * A system chat message that adds a context item to the conversation.\n */\nexport interface ContextMessage extends Required<Message> {\n    /**\n     * Context messages are always \""from\"" the human. (In the future, this could be from \""system\"" for\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_016/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context provided, the content attribution check seems to be happening in the `ChatMessageContent` component in the `vscode/webviews/chat/ChatMessageContent.tsx` file.

Specifically, in the `useEffect` hook, there is a block of code that checks for `pre` elements (code blocks) in the rendered content. For each code block, it creates buttons (copy and insert) and then checks for content attribution if the `guardrails` prop is provided.

Here's the relevant code snippet:

```tsx
useEffect(() => {
    const preElements = rootRef.current?.querySelectorAll('pre')
    if (!preElements?.length || !copyButtonOnSubmit) {
        return
    }

    for (const preElement of preElements) {
        const preText = preElement.textContent
        if (preText?.trim() && preElement.parentNode) {
            const buttons = createButtons(preText, copyButtonOnSubmit, insertButtonOnSubmit)
            if (guardrails) {
                const container = document.createElement('div')
                container.classList.add(styles.attributionContainer)
                buttons.append(container)

                const g = new GuardrailsStatusController(container)
                g.setPending()

                guardrails
                    .searchAttribution(preText)
                    .then(attribution => {
                        // ... handle attribution result
                    })
                    .catch(error => {
                        g.setUnavailable(error)
                        return
                    })
            }

            // ... insert buttons and event listeners
        }
    }
}, [copyButtonOnSubmit, insertButtonOnSubmit, guardrails])
```

The `guardrails.searchAttribution(preText)` call is likely making a request to the server to check for content attribution for the given code snippet (`preText`). The result is then handled based on whether attribution was found, not found, or an error occurred.

So, in summary, the content attribution check happens in the `ChatMessageContent` component when rendering code blocks, and it uses the `guardrails` prop (which is likely an instance of the `Guardrails` class) to perform the attribution search.",Where do we check for content attribution?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration.ts:203-214"",""content"":""function checkValidEnumValues(configName: string, value: string | null): void {\n    const validEnumValues = getConfigEnumValues(`cody.${configName}`)\n    if (value) {\n        if (!validEnumValues.includes(value)) {\n            void vscode.window.showErrorMessage(\n                `Invalid value for ${configName}: ${value}. Valid values are: ${validEnumValues.join(\n                    ', '\n                )}`\n            )\n        }\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:4054-4078"",""content"":""            2n1Tofe+i1bW2ZHXhNA1apTk30hqndqL17plySGZAuO/ijE6yxkED6hm8fHpRnN1d85\\\n            U0Fl9xzhFnlzIk0U01WnbfsaZ+ggLtCTg1vgaeba2Ftnty9VlgYeyasRZaHWuzPYroh\\\n            NXPcXi8sDBeqyj0c78bJM/rORz+8//94VUrS/3Bbt2rP/37lbbFnzsfnL9W/NdPr5X9\\\n            tFdP7f/+sPu03/xf/4gb8+F/fWjeVZt//mr++ue//PO3fz6//tfP/b8VbfFj9fo38+5\\\n            p8/jtXv74f17kj/XT5s1fDn99fFcXPz63/7K7WPz4Xdw0/3hb/Ni+/PX/+Uv9rx/r47\\\n            /++enbv/7zH2/Vj388Fj/+4/j5/Q/vfvrlw9sP5mD+Pv1e/vOP3YcnZz7Yb//n1X/+8\\\n            5///P8BAAD//0QFQV3tCQIA\\\""]\""\n        cookies: []\n        headers:\n          - name: date\n            value: Mon, 15 Apr 2024 06:32:13 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: keep-alive\n          - name: retry-after\n            value: \""282\""\n          - name: access-control-allow-credentials\n            value: \""true\""\n          - name: access-control-allow-origin\n            value: \""\""\n          - name: cache-control\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/attribution.test.ts:12-33"",""content"":""const test = baseTest\n    .extend<DotcomUrlOverride>({ dotcomUrl: mockServer.SERVER_URL })\n    .extend<ExpectedEvents>({\n        // list of events we expect this test to log, add to this list as needed\n        expectedEvents: [\n            'CodyInstalled',\n            'CodyVSCodeExtension:auth:clickOtherSignInOptions',\n            'CodyVSCodeExtension:login:clicked',\n            'CodyVSCodeExtension:auth:selectSigninMenu',\n            'CodyVSCodeExtension:auth:fromToken',\n            'CodyVSCodeExtension:Auth:connected',\n            'CodyVSCodeExtension:chat-question:submitted',\n            'CodyVSCodeExtension:chat-question:executed',\n            'CodyVSCodeExtension:chatResponse:hasCode',\n        ],\n    })\n    .extend<ExtraWorkspaceSettings>({\n        extraWorkspaceSettings: {\n            // TODO(#59720): Remove experimental setting.\n            'cody.experimental.guardrails': true,\n        },\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:105-138"",""content"":""      _order: 0\n      cache: {}\n      request:\n        bodySize: 10486\n        cookies: []\n        headers:\n          - name: content-type\n            value: application/json\n          - name: accept-encoding\n            value: gzip;q=0\n          - name: authorization\n            value: token\n              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69\n          - name: user-agent\n            value: enterpriseClient / v1\n          - name: host\n            value: demo.sourcegraph.com\n        headersSize: 265\n        httpVersion: HTTP/1.1\n        method: POST\n        postData:\n          mimeType: application/json\n          params: []\n          textJSON:\n            maxTokensToSample: 1000\n            messages:\n              - speaker: human\n                text: You are Cody, an AI coding assistant from Sourcegraph.\n              - speaker: assistant\n                text: I am Cody, an AI coding assistant from Sourcegraph.\n              - speaker: human\n                text: >-\n                  Codebase context from file /agent/README.md in repository\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:7357-7384"",""content"":""            TV68pkB+nxayTnfUxFI4Sug+6FETlcN5vseCqWw5dIsYKxBKg01OJm6s+D7T1NbQBqQ\\\n            BtYz94lGT6PUejuxbG/2wJv7Mk6JUl+MJxEct3461Pyk7GO6O4yONy+fXDayr6VVyAL\\\n            CfoVP1ChiONKzIspRcrOLM251/n8/kPAAAA//8DANaF7gAtBAAA\\\""]\""\n        cookies: []\n        headers:\n          - name: date\n            value: Wed, 06 Mar 2024 08:51:31 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: close\n          - name: access-control-allow-credentials\n            value: \""true\""\n          - name: access-control-allow-origin\n            value: \""\""\n          - name: cache-control\n            value: no-cache, max-age=0\n          - name: vary\n            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,\n              Cookie\n          - name: x-content-type-options\n            value: nosniff\n          - name: x-frame-options\n            value: DENY\n          - name: x-xss-protection\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:5321-5347"",""content"":""            z//9zYtWVuqDWdsXf/j3C2XKP3bOW3ct3o+fXhfm0654aP/rw/bTbvXnn8JKf/jth+a\\\n            7zeofP+q//vEv//j5H0+v//VD/1vZln/avP5Zf/ewevNqV7z9/3bln+pG/fD79l//+K\\\n            n+6z8/Pa5+eP1m9ebTZvXnj6H880+vVm//0v78j6fvPz5Xrz69+9jzey//+Zf657d/b\\\n            1dvvtWf9Qe97pfMf/7zn//8vwAAAP//7inTaSEHAgA=\\\""]\""\n        cookies: []\n        headers:\n          - name: date\n            value: Mon, 15 Apr 2024 06:38:54 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: keep-alive\n          - name: access-control-allow-credentials\n            value: \""true\""\n          - name: access-control-allow-origin\n            value: \""\""\n          - name: cache-control\n            value: no-cache, max-age=0\n          - name: content-encoding\n            value: gzip\n          - name: vary\n            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,\n              Cookie\n          - name: x-content-type-options\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/.github/workflows/pr-auditor.yml:0-23"",""content"":""# See https://sourcegraph.com/docs/dev/background-information/ci#pr-auditor\nname: pr-auditor\non:\n  pull_request_target:\n    types: [ closed, edited, opened, synchronize, ready_for_review ]\n  workflow_dispatch:\n\njobs:\n  check-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          repository: 'sourcegraph/pr-auditor'\n      - uses: actions/setup-go@v4\n        with: { go-version: '1.21' }\n\n      - run: './check-pr.sh'\n        env:\n          GITHUB_EVENT_PATH: ${{ env.GITHUB_EVENT_PATH }}\n          GITHUB_TOKEN: ${{ secrets.PR_AUDITOR_TOKEN }}\n          GITHUB_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseMainBranchClient_759014996/recording.har.yaml:1776-1804"",""content"":""            value: null\n        url: https://sourcegraph.sourcegraph.com/.api/graphql?SnippetAttribution\n      response:\n        bodySize: 231\n        content:\n          encoding: base64\n          mimeType: application/json\n          size: 231\n          text: \""[\\\""H4sIAAAAAAAAA4SNMQrDMAxF76I5aXZv3Tr1AqWD4whHEEvGkqEl+O4lU10IdPt83uPts\\\n            Hjz4HZQppzRrmaF5mokfLwbJbIbGTgrFQdgWVDBPXYomEXJpLzv\\\"",\\\""PiE4iGRrnS9\\\n            B0qRSS8BYfF77DW048Tj/CrNXCmOQBUdiw+3c6mvRUG1KGP2B/ee72Dcz4suQlYQV2r\\\n            O19gEAAP//AwAoEJKNGwEAAA==\\\""]\""\n        cookies: []\n        headers:\n          - name: date\n            value: Sat, 27 Jan 2024 14:35:00 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: close\n          - name: access-control-allow-credentials\n            value: \""true\""\n          - name: access-control-allow-origin\n            value: \""\""\n          - name: cache-control\n            value: no-cache, max-age=0\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:3616-3645"",""content"":""                - github.com/sourcegraph/sourcegraph\n        queryString:\n          - name: Repositories\n            value: null\n        url: https://demo.sourcegraph.com/.api/graphql?Repositories\n      response:\n        bodySize: 171\n        content:\n          encoding: base64\n          mimeType: application/json\n          size: 171\n          text: \""[\\\""H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS/KTC0G8fPyU0CM6GqlvMTcVCUrpfTMk\\\n            ozSJL3k/Fz94vzSouTU9KLEggxktpKOUmaKkpVSaG5YeZKx\\\"",\\\""X0GKu2Vlakh+lW+\\\n            Io61SbWxtbS0AAAD//wMAsuY8XG8AAAA=\\\""]\""\n        cookies: []\n        headers:\n          - name: date\n            value: Wed, 06 Mar 2024 08:51:38 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: close\n          - name: access-control-allow-credentials\n            value: \""true\""\n          - name: access-control-allow-origin\n            value: \""\""\n          - name: cache-control\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/ChatMessageContent.tsx:21-30"",""content"":""interface ChatMessageContentProps {\n    displayMarkdown: string\n    wrapLinksWithCodyCommand: boolean\n\n    copyButtonOnSubmit?: CodeBlockActionsProps['copyButtonOnSubmit']\n    insertButtonOnSubmit?: CodeBlockActionsProps['insertButtonOnSubmit']\n\n    guardrails?: Guardrails\n    className?: string\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:138-147"",""content"":""                  github.com/sourcegraph/cody:\n\n                  ```markdown\n\n                  | -------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n                  | `pnpm test agent/src/index.test.ts`                                                                                  | Run agent tests in replay mode                                                                                                                                |\n\n                  | `source agent/scripts/export-cody-http-recording-tokens.sh`                                                          | Export access tokens to enable recording mode                                                                                                                 |\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/rateLimitedClient_2043004676/recording.har.yaml:1047-1076"",""content"":""                siteID: SourcegraphWeb\n        cookies: []\n        headers:\n          - name: date\n            value: Wed, 17 Apr 2024 09:12:26 GMT\n          - name: content-type\n            value: application/json\n          - name: transfer-encoding\n            value: chunked\n          - name: connection\n            value: keep-alive\n          - name: access-control-allow-credentials\n            value: \""true\""\n          - name: access-control-allow-origin\n            value: \""\""\n          - name: cache-control\n            value: no-cache, max-age=0\n          - name: vary\n            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,\n              X-Requested-With,Cookie\n          - name: x-content-type-options\n            value: nosniff\n          - name: x-frame-options\n            value: DENY\n          - name: x-xss-protection\n            value: 1; mode=block\n          - name: strict-transport-security\n            value: max-age=31536000; includeSubDomains; preload\n          - name: content-encoding\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/non-stop/FixupContentStore.ts:9-75"",""content"":""export class ContentProvider implements vscode.TextDocumentContentProvider, vscode.Disposable {\n    // This stores the content of the document for each task ID\n    // The content is initialized by the fixup task with the original content\n    // and then updated by the fixup task with the replacement content\n    private contentStore = new Map<FixupTaskID, fileContent>()\n    // This tracks the task IDs belong toe each file path\n    private tasksByFilePath = new Map<fileName, FixupTaskID[]>()\n    private _onDidChange = new vscode.EventEmitter<vscode.Uri>()\n    private _disposables: vscode.Disposable\n\n    constructor() {\n        // TODO: Handle applying fixups to files which are opened and closed.\n        // This is tricky because we need to re-sync the range we are tracking\n        // when the file is opened.\n        this._disposables = vscode.workspace.onDidCloseTextDocument(doc =>\n            this.deleteByFilePath(doc.uri.fsPath)\n        )\n    }\n    // Get content from the content store\n    public provideTextDocumentContent(uri: vscode.Uri): string | null {\n        const id = uri.fragment\n        return this.contentStore.get(id) || null\n    }\n    // Add to store - store origin content by fixup task id\n    public async set(id: string, docUri: vscode.Uri): Promise<void> {\n        const doc = await vscode.workspace.openTextDocument(docUri)\n        this.contentStore.set(id, doc.getText())\n        this.tasksByFilePath.set(docUri.fsPath, [...(this.tasksByFilePath.get(docUri.fsPath) || []), id])\n    }\n\n    // Remove by ID\n    public delete(id: string): void {\n        this.contentStore.delete(id)\n        // remove task from tasksByFilePath\n        for (const [filePath, tasks] of this.tasksByFilePath) {\n            const index = tasks.indexOf(id)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n            if (tasks.length === 0) {\n                this.deleteByFilePath(filePath)\n            }\n        }\n    }\n\n    // Remove by file path\n    private deleteByFilePath(fileName: string): void {\n        const files = this.tasksByFilePath.get(fileName)\n        if (!files) {\n            return\n        }\n        for (const id of files) {\n            this.contentStore.delete(id)\n        }\n    }\n\n    public get onDidChange(): vscode.Event<vscode.Uri> {\n        return this._onDidChange.event\n    }\n\n    public dispose(): void {\n        this._disposables.dispose()\n        this._onDidChange.dispose()\n        this.contentStore = new Map<FixupTaskID, fileContent>()\n        this.tasksByFilePath = new Map<fileName, FixupTaskID[]>()\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/agent-protocol.ts:156-175"",""content"":""\n    // Updates the extension configuration and returns the new\n    // authentication status, which indicates whether the provided credentials are\n    // valid or not. The agent can't support autocomplete or chat if the credentials\n    // are invalid.\n    'extensionConfiguration/change': [ExtensionConfiguration, AuthStatus | null]\n\n    // Returns the current authentication status without making changes to it.\n    'extensionConfiguration/status': [null, AuthStatus | null]\n\n    // Run attribution search for a code snippet displayed in chat.\n    // Attribution is an enterprise feature which allows to look for code generated\n    // by Cody in an open source code corpus. User is notified if any such attribution\n    // is found.\n    // For more details, please see:\n    // *   PRD: https://docs.google.com/document/d/1c3CLC7ICDaG63NOWjO6zWm-UElwuXkFrKbCKTw-7H6Q/edit\n    // *   RFC: https://docs.google.com/document/d/1zSxFDQPxZcn5b6yKx40etpJayoibVzj_Gnugzln1weI/edit\n    'attribution/search': [\n        { id: string; snippet: string },\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/ChatMessageContent.tsx:235-309"",""content"":""export const ChatMessageContent: React.FunctionComponent<ChatMessageContentProps> = ({\n    displayMarkdown,\n    wrapLinksWithCodyCommand,\n    copyButtonOnSubmit,\n    insertButtonOnSubmit,\n    guardrails,\n    className,\n}) => {\n    const rootRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        const preElements = rootRef.current?.querySelectorAll('pre')\n        if (!preElements?.length || !copyButtonOnSubmit) {\n            return\n        }\n\n        for (const preElement of preElements) {\n            const preText = preElement.textContent\n            if (preText?.trim() && preElement.parentNode) {\n                const buttons = createButtons(preText, copyButtonOnSubmit, insertButtonOnSubmit)\n                if (guardrails) {\n                    const container = document.createElement('div')\n                    container.classList.add(styles.attributionContainer)\n                    buttons.append(container)\n\n                    const g = new GuardrailsStatusController(container)\n                    g.setPending()\n\n                    guardrails\n                        .searchAttribution(preText)\n                        .then(attribution => {\n                            if (isError(attribution)) {\n                                g.setUnavailable(attribution)\n                            } else if (attribution.repositories.length === 0) {\n                                g.setSuccess()\n                            } else {\n                                g.setFailure(\n                                    attribution.repositories.map(r => r.name),\n                                    attribution.limitHit\n                                )\n                            }\n                        })\n                        .catch(error => {\n                            g.setUnavailable(error)\n                            return\n                        })\n                }\n\n                // Insert the buttons after the pre using insertBefore() because there is no insertAfter()\n                preElement.parentNode.insertBefore(buttons, preElement.nextSibling)\n\n                // capture copy events (right click or keydown) on code block\n                preElement.addEventListener('copy', () => {\n                    if (copyButtonOnSubmit) {\n                        copyButtonOnSubmit(preText, 'Keydown')\n                    }\n                })\n            }\n        }\n    }, [copyButtonOnSubmit, insertButtonOnSubmit, guardrails])\n\n    return (\n        <div\n            ref={rootRef}\n            className={classNames(styles.content, className)}\n            // biome-ignore lint/security/noDangerouslySetInnerHtml: the result is run through dompurify\n            dangerouslySetInnerHTML={{\n                // wrapLinksWithCodyCommand opens all links in assistant responses using the\n                // _cody.vscode.open command (but not human messages because those already\n                // have the right URIs and are trusted).\n                __html: renderCodyMarkdown(displayMarkdown, { wrapLinksWithCodyCommand }),\n            }}\n        />\n    )\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/doc/index.md:0-8"",""content"":""# Cody documentation\n\n> **Note**\n> We're in the process of moving Cody documentation from the [`sourcegraph/sourcegraph` repository `doc/cody` directory](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/tree/doc/cody) to this repository.\n\n- [Development](development/index.md)\n- [All other Cody documentation](https://sourcegraph.com/docs/cody)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/README.md:0-4"",""content"":""# Cody shared library\n\nThe `@sourcegraph/cody-shared` package contains code that is shared among Cody clients.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/TextDocumentWithUri.ts:45-47"",""content"":""    public get content(): string | undefined {\n        return this.underlying.content\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/.github/PULL_REQUEST_TEMPLATE.md:0-5"",""content"":""\n## Test plan\n\n<!-- Required. See https://sourcegraph.com/docs/dev/background-information/testing_principles. -->\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/AgentTextDocument.ts:23-25"",""content"":""    public get content(): string {\n        return this.protocolDocument.underlying.content ?? ''\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-string.ts:294-320"",""content"":""\n    public static fromContextItem(contextItem: ContextItem) {\n        const ref = [contextItem.uri]\n        return {\n            content: contextItem.content\n                ? internal_createPromptString(contextItem.content, ref)\n                : undefined,\n            repoName: contextItem.repoName\n                ? internal_createPromptString(contextItem.repoName, ref)\n                : undefined,\n        }\n    }\n\n    // 🚨 Use this function only for user-generated queries.\n    // TODO: Can we detect if the user is pasting in content from a document?\n    public static unsafe_fromUserQuery(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 Use this function only for LLM responses queries.\n    public static unsafe_fromLLMResponse(string: string): PromptString {\n        return internal_createPromptString(string, [])\n    }\n\n    // 🚨 We slam chats in and out of storage quite a bit, so it seems weird to\n    // have references on a chat transcript, but closing and opening the chat\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/guardrails/index.ts:3-6"",""content"":""export interface Attribution {\n    limitHit: boolean\n    repositories: RepositoryAttribution[]\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/ChatMessageContent.module.css:44-100"",""content"":""\n.attribution-container {\n    all: unset;\n    display: flex;\n    margin-left: auto;\n}\n\n\n.attribution-icon-unavailable {\n    color: var(--hl-orange);\n}\n\n.attribution-icon-found {\n    color: var(--hl-dark-red);\n}\n\n.status {\n    display: flex;\n    align-items: center;\n}\n\n.codicon-loading {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n\n/*\n * Content\n */\n:root {\n    --spacing: 1rem;\n}\n\n.content {\n    word-break: break-word;\n    line-height: 150%;\n    text-wrap: wrap;\n}\n\n/* Style @-file tokens to match TranscriptAction context files */\n.content a[href^=\""vscode://file\""] em,\n.content a[href^=\""vscode-insiders://file\""] em,\n.content a[href^=\""vscodium://file\""] em,\n.content a[href^=\""cursor://file\""] em\n{\n    padding: 1px 2px;\n    box-sizing: border-box;\n    background-color: color-mix(in srgb, var(--vscode-textLink-foreground) 15%, transparent);\n    border-radius: 2px;\n    font-style: normal;\n    word-break: break-all;\n}\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_017/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_018/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context provided, the decision to use enhanced context for chat is determined in the `getEnhancedContext` function in the file `cody_test/vscode/src/chat/chat-view/context.ts`.

Specifically, the `strategy` parameter passed to `getEnhancedContext` determines whether and how enhanced context is used:

1. If `strategy` is `'none'`, only the visible editor context is used, and no enhanced context is retrieved.
2. If `strategy` is `'keyword'`, only local and remote search results (symf and remote search) are used as enhanced context, but not embeddings.
3. If `strategy` is `'embeddings'`, only local embeddings search results are used as enhanced context, but not keyword search results.
4. For any other value of `strategy`, both local embeddings and keyword search results are used as enhanced context.

The `strategy` parameter is likely determined by user configuration or settings.

Additionally, if a `ContextRankingController` is provided, the `getEnhancedContextFromRanker` function is called, which retrieves various sources of context (embeddings, keyword search, model-specific embeddings) and then ranks them using the `ContextRankingController`.",Where do we determine whether to use enhanced context for chat?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/can-use-partial-completion.ts:0-41"",""content"":""import type { TextDocument } from 'vscode'\n\nimport type { DocumentContext } from '@sourcegraph/cody-shared'\nimport { hasCompleteFirstLine } from './text-processing'\nimport { parseAndTruncateCompletion } from './text-processing/parse-and-truncate-completion'\nimport type { InlineCompletionItemWithAnalytics } from './text-processing/process-inline-completions'\n\ninterface CanUsePartialCompletionParams {\n    document: TextDocument\n    docContext: DocumentContext\n}\n\n/**\n * Evaluates a partial completion response and returns it when we can already use it. This is used\n * to terminate any streaming responses where we can get a token-by-token access to the result and\n * want to terminate as soon as stop conditions are triggered.\n *\n * Right now this handles two cases:\n *  1. When a single line completion is requested, it terminates after the first full line was\n *     received.\n *  2. For a multi-line completion, it terminates when the completion will be truncated based on the\n *     multi-line indentation logic.\n */\nexport function canUsePartialCompletion(\n    partialResponse: string,\n    params: CanUsePartialCompletionParams\n): InlineCompletionItemWithAnalytics | null {\n    const { docContext } = params\n\n    if (!hasCompleteFirstLine(partialResponse)) {\n        return null\n    }\n\n    const item = parseAndTruncateCompletion(partialResponse, params)\n\n    if (docContext.multilineTrigger) {\n        return (item.lineTruncatedCount || 0) > 0 ? item : null\n    }\n\n    return item.insertText.trim() === '' ? null : item\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/token/counter.ts:26-43"",""content"":""     * Indicates whether the Chat and User-Context share the same token budget.\n     * - If true, all types of messages share the same token budget with Chat.\n     * - If false (Feature Flag required), the User-Context will has a separated budget.\n     * NOTE: Used in remainingTokens for calculating the remaining token budget for each budget type.\n     */\n    private shareChatAndUserBudget = true\n\n    constructor(contextWindow: ModelContextWindow) {\n        // If there is no context window reserved for context.user,\n        // context will share the same token budget with chat.\n        this.shareChatAndUserBudget = !contextWindow.context?.user\n        this.maxChatTokens = contextWindow.input\n        this.maxContextTokens = {\n            user: contextWindow.context?.user ?? contextWindow.input,\n            enhanced: Math.floor(contextWindow.input * ENHANCED_CONTEXT_ALLOCATION),\n        }\n    }\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/plugins/atMentions/chatContextClient.tsx:51-53"",""content"":""function useChatContextClient(): ChatContextClient {\n    return useContext(ChatContextClientContext)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/editor/active-editor.ts:0-26"",""content"":""import * as vscode from 'vscode'\n\nimport { isCodyIgnoredFile } from '@sourcegraph/cody-shared'\n\n/**\n * Interface for tracking the last active text editor that is not a webview panel for\n * the new Chat Panel UI.\n *\n * active: The current valid active/supported text editor instance.\n * ignored: Whether the active editor is ignored by Cody or not.\n */\ninterface LastActiveTextEditor {\n    active?: vscode.TextEditor\n    ignored?: boolean\n}\n\n/**\n * This returns the current active text editor instance if available,\n * along with a boolean indicating if the text editor is on the Cody ignored list.\n * Returns undefined if no editor is active.\n *\n * NOTE: ALL USERS of chat interface in VS Code should use this to get the correct Active Editor instead of using\n * 'vscode.window.activeTextEditor' as this handles cases where the activeTextEditor API will always return\n * 'undefined' when user is focused on the webview chat panel.\n *\n * NOTE: Users that operate within an actual text editor (non-webview panels) do not need to use this API as calling\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/plugins/atMentions/chatContextClient.tsx:56-108"",""content"":""export function useChatContextItems(query: string | null): ContextItem[] | undefined {\n    const chatContextClient = useChatContextClient()\n    const [results, setResults] = useState<ContextItem[]>()\n    // biome-ignore lint/correctness/useExhaustiveDependencies: we only want to run this when query changes.\n    useEffect(() => {\n        // An empty query is a valid query that we use to get open tabs context,\n        // while a null query means this is not an at-mention query.\n        if (query === null) {\n            setResults(undefined)\n            return\n        }\n\n        // If the query ends with a colon, we will reuse current results but remove the range.\n        if (query.endsWith(':')) {\n            const selected = results?.find(r => displayPath(r.uri) === query.slice(0, -1))\n            setResults(\n                selected\n                    ? [{ ...selected, range: undefined }]\n                    : results?.map(r => ({ ...r, range: undefined }))\n            )\n            return\n        }\n\n        // If user is typing a line range, fetch new chat context items only if there are no results\n        if (results?.length && RANGE_MATCHES_REGEXP.test(query) && !LINE_RANGE_REGEXP.test(query)) {\n            return\n        }\n\n        // Track if the query changed since this request was sent (which would make our results\n        // no longer valid).\n        let invalidated = false\n\n        if (chatContextClient) {\n            chatContextClient\n                .getChatContextItems(query)\n                .then(mentions => {\n                    if (invalidated) {\n                        return\n                    }\n                    setResults(mentions)\n                })\n                .catch(error => {\n                    setResults(undefined)\n                    console.error(error)\n                })\n        }\n\n        return () => {\n            invalidated = true\n        }\n    }, [query])\n    return results\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/prompt.ts:98-116"",""content"":""            }\n            const enhancedContext = prevContext.filter(c => c.source !== 'user')\n            if (promptBuilder.tryAddContext('enhanced', enhancedContext).limitReached) {\n                logDebug('DefaultPrompter.makePrompt', 'Ignored prior enhanced context due to limit')\n                return { prompt: promptBuilder.build(), newContextUsed, newContextIgnored }\n            }\n\n            // Add additional context from current editor or broader search when enhanced context is enabled\n            if (this.getEnhancedContext) {\n                const lastMessage = reverseTranscript[0]\n                if (!lastMessage?.text) {\n                    throw new Error('No last message or last message text was empty')\n                }\n                if (lastMessage.speaker === 'assistant') {\n                    throw new Error('Last message in prompt needs speaker \""human\"", but was \""assistant\""')\n                }\n                const newEnhancedContext = await this.getEnhancedContext(lastMessage.text)\n                sortContextItems(newEnhancedContext)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/squirrel.ts:0-11"",""content"":""interface CodeIntelligence {\n    symbols: string[]\n}\n\n/**\n * Squirrel is a code intelligence API.\n */\ninterface Squirrel {\n    symbolInformation(file: string): CodeIntelligence\n}\n\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/local-embeddings.test.ts:140-164"",""content"":""    await openFile(page, 'main.c')\n    await sidebarSignin(page, sidebar)\n    const chatFrame = await newChat(page)\n\n    const enableEmbeddingsButton = chatFrame.getByText('Enable Embeddings')\n    // This may take a while, we download and start cody-engine\n    await expect(enableEmbeddingsButton).toBeVisible({ timeout: 60000 })\n    await enableEmbeddingsButton.click()\n\n    await expect(chatFrame.getByText('Embeddings — Indexed')).toBeVisible({\n        timeout: 30000,\n    })\n\n    // Search the embeddings. This test uses the \""stub\"" embedding model, which\n    // is deterministic, but the searches are not semantic.\n    const chatInput = chatFrame.getByRole('textbox', { name: 'Chat message' })\n    await chatInput.fill('hello world')\n    await chatInput.press('Enter')\n    const contextCell = getContextCell(chatFrame)\n    await expectContextCellCounts(contextCell, {\n        files: 2,\n        timeout: 10000,\n    })\n})\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/animal.ts:0-5"",""content"":""interface Animal {\n    name: string;\n    age: number;\n}\n\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:32-64"",""content"":""    }\n    contextRanking: ContextRankingController | null\n    // TODO(@philipp-spiess): Add abort controller to be able to cancel expensive retrievers\n}\nexport async function getEnhancedContext({\n    strategy,\n    editor,\n    text,\n    providers,\n    contextRanking,\n}: GetEnhancedContextOptions): Promise<ContextItem[]> {\n    if (contextRanking) {\n        return getEnhancedContextFromRanker({\n            strategy,\n            editor,\n            text,\n            providers,\n            contextRanking,\n        })\n    }\n\n    return wrapInActiveSpan('chat.enhancedContext', async () => {\n        // use user attention context only if config is set to none\n        if (strategy === 'none') {\n            logDebug('SimpleChatPanelProvider', 'getEnhancedContext > none')\n            return getVisibleEditorContext(editor)\n        }\n\n        // Get embeddings context if useContext Config is not set to 'keyword' only\n        const embeddingsContextItemsPromise =\n            strategy !== 'keyword'\n                ? retrieveContextGracefully(\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/README.md:0-5"",""content"":""# Cody Agent\n\nThe `@sourcegraph/cody-agent` package implements a JSON-RPC server to interact\nwith Cody via stdout/stdin. This package is intended to be used by\nnon-ECMAScript clients such as the JetBrains and NeoVim plugins.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:682-694"",""content"":""\n### Changed\n\n- Chat: Uses the new Chat UI by default. [pull/2079](https://github.com/sourcegraph/cody/pull/2079)\n- Inline Chat is now deprecated and removed. [pull/2079](https://github.com/sourcegraph/cody/pull/2079)\n- Fixup Tree View is now deprecated and removed. [pull/2079](https://github.com/sourcegraph/cody/pull/2079)\n- Enhanced Context used to turn off automatically after the first chat. Now it stays enabled until you disable it. [pull/2069](https://github.com/sourcegraph/cody/pull/2069)\n- Chat: Reuse existing New Chat panel to prevent having multiple new chats open at once. [pull/2087](https://github.com/sourcegraph/cody/pull/2087)\n- Chat: Close the Enhanced Context popover on chat input focus. [pull/2091](https://github.com/sourcegraph/cody/pull/2091)\n- Chat: Show onboarding glowy dot guide until first time opening Enhanced Context. [pull/2097](https://github.com/sourcegraph/cody/pull/2097)\n- In 0.12, we simplified the sign-in process and removed the option to sign into\n  Cody App from VScode. If you were still signed in to Cody App, we invite you to\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx:67-69"",""content"":""function useEnhancedContextEventHandlers(): EnhancedContextEventHandlersT {\n    return React.useContext(EnhancedContextEventHandlers)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/doc/dev/quality/index.md:16-32"",""content"":""\n## Chat\n\n### Influencing chat performance\n\nThe VS Code extension has _Cody commands_, which are pre-formed prompts you can ask Cody with e.g. the click of a button. There is also an initial pre-text given to the LLM, explaining what Cody is and how it should behave.\n\nRelevant context from many different sources (the open file in your editor, tree-sitter, precise code intel, and more) is included in the prompt when asking Cody a question. Different LLMs handle context in different ways, some LLMs might do better with more context, while that might simply confuse others.\n\nWe can influence chat performance by altering prompting AND context amount/relevancy.\n\n## Testing a new LLM with Cody\n\nThis guide demonstrates how to test LLM models from Google Gemini, Groq, or any OpenAI-compatible APIs using your API keys in Cody.\n\nThis feature is intended solely for internal QA testing and development purposes and is concealed behind an unregistered configuration setting (`cody.dev.models`) that functions exclusively in [Dev/Debug mode](../../../vscode/CONTRIBUTING.md).\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:94-157"",""content"":""async function getEnhancedContextFromRanker({\n    editor,\n    text,\n    providers,\n    contextRanking,\n}: GetEnhancedContextOptions): Promise<ContextItem[]> {\n    return wrapInActiveSpan('chat.enhancedContextRanker', async span => {\n        // Get all possible context items to rank\n        let searchContext = getVisibleEditorContext(editor)\n\n        const numResults = 50\n        const embeddingsContextItemsPromise = retrieveContextGracefully(\n            searchEmbeddingsLocal(providers.localEmbeddings, text, numResults),\n            'local-embeddings'\n        )\n\n        const modelSpecificEmbeddingsContextItemsPromise = contextRanking\n            ? retrieveContextGracefully(\n                  contextRanking.searchModelSpecificEmbeddings(text, numResults),\n                  'model-specific-embeddings'\n              )\n            : []\n\n        const precomputeQueryEmbeddingPromise = contextRanking?.precomputeContextRankingFeatures(text)\n\n        const localSearchContextItemsPromise = providers.symf\n            ? retrieveContextGracefully(searchSymf(providers.symf, editor, text), 'symf')\n            : []\n\n        const remoteSearchContextItemsPromise = providers.remoteSearch\n            ? await retrieveContextGracefully(\n                  searchRemote(providers.remoteSearch, text),\n                  'remote-search'\n              )\n            : []\n\n        const keywordContextItemsPromise = (async () => [\n            ...(await localSearchContextItemsPromise),\n            ...(await remoteSearchContextItemsPromise),\n        ])()\n\n        const [embeddingsContextItems, keywordContextItems, modelEmbeddingContextItems] =\n            await Promise.all([\n                embeddingsContextItemsPromise,\n                keywordContextItemsPromise,\n                modelSpecificEmbeddingsContextItemsPromise,\n                precomputeQueryEmbeddingPromise,\n            ])\n\n        searchContext = searchContext\n            .concat(keywordContextItems)\n            .concat(embeddingsContextItems)\n            .concat(modelEmbeddingContextItems)\n        const editorContext = await getPriorityContext(text, editor, searchContext)\n        const allContext = editorContext.concat(searchContext)\n        if (!contextRanking) {\n            return allContext\n        }\n        const rankedContext = wrapInActiveSpan('chat.enhancedContextRanker.reranking', () =>\n            contextRanking.rankContextItems(text, allContext)\n        )\n        return rankedContext\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:88-121"",""content"":""\n/**\n * A file (or a subset of a file given by a range) that is included as context in a chat message.\n */\nexport interface ContextItemFile extends ContextItemCommon {\n    type: 'file'\n}\n\n/**\n * A symbol (which is a range within a file) that is included as context in a chat message.\n */\nexport interface ContextItemSymbol extends ContextItemCommon {\n    type: 'symbol'\n\n    /** The name of the symbol, used for presentation only (not semantically meaningful). */\n    symbolName: string\n\n    /** The kind of symbol, used for presentation only (not semantically meaningful). */\n    kind: SymbolKind\n}\n\n/** The valid kinds of a symbol. */\nexport type SymbolKind = 'class' | 'function' | 'method'\n\n/** {@link ContextItem} with the `content` field set to the content. */\nexport type ContextItemWithContent = ContextItem & Required<Pick<ContextItem, 'content'>>\n\n/**\n * A system chat message that adds a context item to the conversation.\n */\nexport interface ContextMessage extends Required<Message> {\n    /**\n     * Context messages are always \""from\"" the human. (In the future, this could be from \""system\"" for\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:24-35"",""content"":""interface GetEnhancedContextOptions {\n    strategy: ConfigurationUseContext\n    editor: VSCodeEditor\n    text: PromptString\n    providers: {\n        localEmbeddings: LocalEmbeddingsController | null\n        symf: SymfRunner | null\n        remoteSearch: RemoteSearch | null\n    }\n    contextRanking: ContextRankingController | null\n    // TODO(@philipp-spiess): Add abort controller to be able to cancel expensive retrievers\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/context-settings.test.ts:24-43"",""content"":""\n    // Opening the enhanced context settings should focus the checkbox for toggling it.\n    const enhancedContextCheckbox = chatFrame.locator('#enhanced-context-checkbox')\n    await expect(enhancedContextCheckbox).toBeFocused()\n\n    // Enhanced context should be enabled by default.\n    await expect(enhancedContextCheckbox).toBeChecked()\n    await page.keyboard.press('Space') // Disable enhanced context\n    // The keyboard should toggle the checkbox, but not dismiss the popup.\n    await expect(enhancedContextCheckbox).not.toBeChecked()\n    await expect(enhancedContextCheckbox).toBeVisible()\n\n    // The popup should be dismiss-able with the keyboard.\n    await page.keyboard.press('Escape')\n    // Closing the enhanced context settings should close the dialog...\n    await expect(enhancedContextCheckbox).not.toBeVisible()\n    // ... and the focus is moved to the chat input on close.\n    const contextSettingsButton = chatFrame.getByTitle('Configure Enhanced Context')\n    await expect(contextSettingsButton.and(page.locator(':focus'))).not.toBeVisible()\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:36-92"",""content"":""export async function getEnhancedContext({\n    strategy,\n    editor,\n    text,\n    providers,\n    contextRanking,\n}: GetEnhancedContextOptions): Promise<ContextItem[]> {\n    if (contextRanking) {\n        return getEnhancedContextFromRanker({\n            strategy,\n            editor,\n            text,\n            providers,\n            contextRanking,\n        })\n    }\n\n    return wrapInActiveSpan('chat.enhancedContext', async () => {\n        // use user attention context only if config is set to none\n        if (strategy === 'none') {\n            logDebug('SimpleChatPanelProvider', 'getEnhancedContext > none')\n            return getVisibleEditorContext(editor)\n        }\n\n        // Get embeddings context if useContext Config is not set to 'keyword' only\n        const embeddingsContextItemsPromise =\n            strategy !== 'keyword'\n                ? retrieveContextGracefully(\n                      searchEmbeddingsLocal(providers.localEmbeddings, text),\n                      'local-embeddings'\n                  )\n                : []\n\n        //  Get search (symf or remote search) context if config is not set to 'embeddings' only\n        const remoteSearchContextItemsPromise =\n            providers.remoteSearch && strategy !== 'embeddings'\n                ? await retrieveContextGracefully(\n                      searchRemote(providers.remoteSearch, text),\n                      'remote-search'\n                  )\n                : []\n        const localSearchContextItemsPromise =\n            providers.symf && strategy !== 'embeddings'\n                ? retrieveContextGracefully(searchSymf(providers.symf, editor, text), 'symf')\n                : []\n\n        // Combine all context sources\n        const searchContext = [\n            ...(await embeddingsContextItemsPromise),\n            ...(await remoteSearchContextItemsPromise),\n            ...(await localSearchContextItemsPromise),\n        ]\n\n        const priorityContext = await getPriorityContext(text, editor, searchContext)\n        return priorityContext.concat(searchContext)\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:38-88"",""content"":""\n    /**\n     * The token count of the item's content.\n     */\n    size?: number\n\n    /**\n     * Whether the content of the item is too large to be included as context.\n     */\n    isTooLarge?: boolean\n}\n\n/**\n * The source of this context.\n */\nexport enum ContextItemSource {\n    /** From embeddings search */\n    Embeddings = 'embeddings',\n\n    /** Explicitly @-mentioned by the user in chat */\n    User = 'user',\n\n    /** From local keyword search */\n    Keyword = 'keyword',\n\n    /** From the current editor state and open tabs/documents */\n    Editor = 'editor',\n\n    Filename = 'filename',\n\n    /** From symf search */\n    Search = 'search',\n\n    /** Remote search */\n    Unified = 'unified',\n\n    /** Selected code from the current editor */\n    Selection = 'selection',\n\n    /** Output from the terminal */\n    Terminal = 'terminal',\n\n    /** From URI */\n    Uri = 'uri',\n}\n\n/**\n * An item (such as a file or symbol) that is included as context in a chat message.\n */\nexport type ContextItem = ContextItemFile | ContextItemSymbol\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/models/chatModelContext.tsx:13-15"",""content"":""export function useChatModelContext(): ChatModelContext {\n    return useContext(context)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:270-287"",""content"":""\n### Chats lefthand panel\n\n- [ ] Verify that you can delete all chats by hovering over the header in the “Chats” panel and selecting the trashcan icon.\n- [ ] Verify that you can delete an individual chat by hovering over an individual chat in the “Chats” panel and selecting the trashcan icon.\n- [ ] Verify that you can start a new chat by hovering over the header in the “Chats” panel and selecting the speech bubble icon.\n- [ ] Verify that all new chats appear as a list in the “Chats” panel and that they persist across sessions.\n- [ ] Verify that selecting an individual chat within the “Chats” panel opens up the chat in a new window and that the conversation has persisted.\n\n### Enhanced Context\n\n- [ ] Open a chat window and select the \""Enhanced Context\"" icon next to the chat input.\n- [ ] Verify that \""Enhanced Context\"" is enabled by default.\n\n### Consumer\n\nSet up steps:\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx:63-65"",""content"":""function useEnhancedContextContext(): EnhancedContextContextT {\n    return React.useContext(EnhancedContextContext)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:377-385"",""content"":""- We now allocate no more than 60% of the overall LLM context window for enhanced context. This preserves more room for follow-up questions and context. [pull/2768](https://github.com/sourcegraph/cody/pull/2768)\n- Chat: Renamed the \""Restart Chat Session\"" button to \""New Chat Session\"". [pull/2786](https://github.com/sourcegraph/cody/pull/2786)\n- Removed the `cody.experimental.chatPredictions` setting. [pull/2848](https://github.com/sourcegraph/cody/pull/2848)\n- Removed support for the `context.codebase` custom command property. [pull/2848](https://github.com/sourcegraph/cody/pull/2848)\n- Autocomplete: Better cancellation of requests that are no longer relevant. [pull/2855](https://github.com/sourcegraph/cody/pull/2855)\n- Updated Enhanced Context popover copy and added a link to the docs. [pull/2864](https://github.com/sourcegraph/cody/pull/2864)\n- Include meta information about unit test files in Autocomplete analytics. [pull/2868](https://github.com/sourcegraph/cody/pull/2868)\n- Moved the Context Limit errors in chat into the deboug log output. [pull/2891](https://github.com/sourcegraph/cody/pull/2891)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/enhanced-context-status.test.ts:0-150"",""content"":""import { describe, expect, it } from 'vitest'\nimport * as vscode from 'vscode'\n\nimport type * as status from '@sourcegraph/cody-shared'\n\nimport { ContextStatusAggregator } from './enhanced-context-status'\n\nclass TestProvider implements status.ContextStatusProvider {\n    public emitter: vscode.EventEmitter<status.ContextStatusProvider> = new vscode.EventEmitter()\n\n    constructor(private status_: status.ContextGroup[] | undefined = undefined) {}\n\n    public onDidChangeStatus(\n        callback: (provider: status.ContextStatusProvider) => void\n    ): vscode.Disposable {\n        return this.emitter.event(callback)\n    }\n\n    public get status(): status.ContextGroup[] {\n        return (\n            this.status_ || [\n                {\n                    displayName: 'github.com/foo/bar',\n                    providers: [\n                        {\n                            kind: 'embeddings',\n                            state: 'unconsented',\n                        },\n                    ],\n                },\n            ]\n        )\n    }\n    public set status(status: status.ContextGroup[]) {\n        this.status_ = status\n    }\n}\n\ndescribe('ContextStatusAggregator', () => {\n    it('should fire status changed when providers are added and pass through simple status', async () => {\n        const aggregator = new ContextStatusAggregator()\n        const promise = new Promise<status.ContextGroup[]>(resolve => {\n            aggregator.onDidChangeStatus(provider => resolve(provider.status))\n        })\n        aggregator.addProvider(new TestProvider())\n        expect(await promise).toEqual<status.ContextGroup[]>([\n            {\n                displayName: 'github.com/foo/bar',\n                providers: [\n                    {\n                        kind: 'embeddings',\n                        state: 'unconsented',\n                    },\n                ],\n            },\n        ])\n        aggregator.dispose()\n    })\n    it('should fire aggregate status from multiple providers', async () => {\n        const aggregator = new ContextStatusAggregator()\n        let callbackCount = 0\n        const promise = new Promise<status.ContextGroup[]>(resolve => {\n            aggregator.onDidChangeStatus(provider => {\n                callbackCount++\n                resolve(provider.status)\n            })\n        })\n        aggregator.addProvider(new TestProvider())\n        aggregator.addProvider(\n            new TestProvider([\n                {\n                    displayName: 'host.example/foo',\n                    providers: [{ kind: 'search', type: 'local', state: 'ready' }],\n                },\n                {\n                    displayName: 'github.com/foo/bar',\n                    providers: [\n                        {\n                            kind: 'search',\n                            type: 'remote',\n                            state: 'ready',\n                            id: 'quux',\n                            inclusion: 'manual',\n                        },\n                    ],\n                },\n            ])\n        )\n        expect(await promise).toEqual<status.ContextGroup[]>([\n            {\n                displayName: 'github.com/foo/bar',\n                providers: [\n                    {\n                        kind: 'embeddings',\n                        state: 'unconsented',\n                    },\n                    {\n                        kind: 'search',\n                        type: 'remote',\n                        state: 'ready',\n                        id: 'quux',\n                        inclusion: 'manual',\n                    },\n                ],\n            },\n            {\n                displayName: 'host.example/foo',\n                providers: [{ kind: 'search', type: 'local', state: 'ready' }],\n            },\n        ])\n        // Not only does it aggregate status, it coalesces update events\n        expect(callbackCount).toBe(1)\n        aggregator.dispose()\n    })\n    it('should respond to child events by firing an event of its own', async () => {\n        const aggregator = new ContextStatusAggregator()\n        const provider = new TestProvider()\n        aggregator.addProvider(provider)\n        // Skip the first update event.\n        await Promise.resolve()\n        let callbackCount = 0\n        const promise = new Promise<status.ContextGroup[]>(resolve => {\n            aggregator.onDidChangeStatus(provider => {\n                callbackCount++\n                resolve(provider.status)\n            })\n        })\n        provider.status = [\n            {\n                displayName: 'github.com/foo/bar',\n                providers: [{ kind: 'search', type: 'local', state: 'indexing' }],\n            },\n        ]\n        provider.emitter.fire(provider)\n\n        expect(await promise).toEqual<status.ContextGroup[]>([\n            {\n                displayName: 'github.com/foo/bar',\n                providers: [\n                    {\n                        kind: 'search',\n                        type: 'local',\n                        state: 'indexing',\n                    },\n                ],\n            },\n        ])\n        expect(callbackCount).toBe(1)\n    })\n})\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Chat.tsx:64-89"",""content"":""\n    // Display the enhanced context settings on first chats\n    const [isEnhancedContextOpen, setIsEnhancedContextOpen] = useState(isNewInstall)\n\n    const editorRef = useRef<PromptEditorRefAPI>(null)\n    const setEditorState = useCallback((state: SerializedPromptEditorState | null) => {\n        editorRef.current?.setEditorState(state)\n    }, [])\n\n    // The only PromptEditor state we really need to track in our own state is whether it's empty.\n    const [isEmptyEditorValue, setIsEmptyEditorValue] = useState(true)\n    const onEditorChange = useCallback((value: SerializedPromptEditorValue): void => {\n        setIsEmptyEditorValue(!value?.text?.trim())\n    }, [])\n\n    const onAbortMessageInProgress = useCallback(() => {\n        vscodeAPI.postMessage({ command: 'abort' })\n    }, [vscodeAPI])\n\n    const addEnhancedContext = useEnhancedContextEnabled()\n\n    const onSubmit = useCallback(\n        (submitType: WebviewChatSubmitType) => {\n            if (!editorRef.current) {\n                throw new Error('Chat has no editorRef')\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/enhanced-context-status.ts:0-158"",""content"":""import * as vscode from 'vscode'\n\nimport type { ContextGroup, ContextStatusProvider } from '@sourcegraph/cody-shared'\n\nimport { logDebug } from '../log'\n\n// Collects context status from a set of ContextStatusProviders and produces\n// a merged status view.\nexport class ContextStatusAggregator implements vscode.Disposable, ContextStatusProvider {\n    private static TAG = 'ContextStatusAggregator'\n    private disposables: Set<vscode.Disposable> = new Set()\n    private statusEmitter: vscode.EventEmitter<ContextStatusProvider> =\n        new vscode.EventEmitter<ContextStatusProvider>()\n    private providerStatusMap: Map<ContextStatusProvider, ContextGroup[] | 'needs-status'> | undefined =\n        new Map()\n\n    // Whether we have been notified of status changes, but are yet to pass that\n    // notification on. We do this to de-bounce updates from multiple status\n    // providers in one turn of the event loop.\n    private pendingPublish = false\n\n    // Disposes this ContextStatusAggregator.\n    public dispose(): void {\n        for (const disposable of this.disposables) {\n            disposable.dispose()\n        }\n        this.providerStatusMap = undefined\n    }\n\n    // Adds a provider to this ContextStatusAggregator. The aggregator will\n    // subscribe to the provider and aggregate its updates into a merged status.\n    // To remove this provider, dispose of the returned disposable.\n    //\n    // If the provider is disposable, it should dispose of the registration in\n    // its dispose method. Otherwise this ContextStatusAggregator may continue\n    // to poll its status property, and show its status in the aggregate status.\n    public addProvider(provider: ContextStatusProvider): vscode.Disposable {\n        if (this.providerStatusMap === undefined) {\n            throw new Error('ContextStatusPublisher has been disposed')\n        }\n        const disposable = provider.onDidChangeStatus(putativeProvider => {\n            if (provider !== putativeProvider) {\n                logDebug(\n                    ContextStatusAggregator.TAG,\n                    'got onDidChangeStatus event but passed mismatched provider'\n                )\n            }\n            this.providerDidChangeStatus(provider)\n        })\n        this.disposables.add(disposable)\n        this.providerStatusMap.set(provider, 'needs-status')\n        this.providerDidChangeStatus(provider)\n        return {\n            dispose: (): void => {\n                if (this.providerStatusMap) {\n                    this.providerStatusMap.delete(provider)\n                    this.disposables.delete(disposable)\n                    disposable.dispose()\n                    this.publishStatus()\n                }\n            },\n        }\n    }\n\n    // Records that the provider's state is dirty, and schedules an update.\n    private providerDidChangeStatus(provider: ContextStatusProvider): void {\n        if (this.providerStatusMap === undefined) {\n            // We have been disposed\n            return\n        }\n        if (!this.providerStatusMap.has(provider)) {\n            // The provider has been removed. This should not happen if the\n            // providers are following the dispose protocol.\n            return\n        }\n        // Record that we need to get provider status next update.\n        this.providerStatusMap.set(provider, 'needs-status')\n        // Schedule an update.\n        this.publishStatus()\n    }\n\n    // Aggregates and publishes status asynchronously. Multiple context status\n    // providers updating \""at once\"" will be coalesced into one update.\n    private publishStatus(): void {\n        if (this.pendingPublish) {\n            // Coalesce multiple updates.\n            return\n        }\n        this.pendingPublish = true\n        void Promise.resolve().then(() => {\n            this.pendingPublish = false\n            this.statusEmitter.fire(this)\n        })\n    }\n\n    // ContextStatusProvider implementation of onDidChangeStatus. The\n    // ContextStatusAggregator can be stacked to combine per-workspace and\n    // per-chat context status.\n    public onDidChangeStatus(callback: (sender: ContextStatusProvider) => void): vscode.Disposable {\n        return this.statusEmitter.event(callback)\n    }\n\n    // Computes the merged context status. This may throw if any of the\n    // aggregated providers' status throw.\n    public get status(): ContextGroup[] {\n        if (this.providerStatusMap === undefined) {\n            throw new Error('ContextStatusPublisher has been disposed')\n        }\n        const groupBy: { [name: string]: ContextGroup } = {}\n        // Iterate through provider status map entries\n        for (let [provider, status] of this.providerStatusMap.entries()) {\n            if (status === 'needs-status') {\n                // The provider's status is stale; poll it.\n                status = provider.status\n                if (this.providerStatusMap.get(provider) !== 'needs-status') {\n                    logDebug(\n                        ContextStatusAggregator.TAG,\n                        'ContextStatusProvider.status should only report status, not change state',\n                        provider\n                    )\n                }\n                // Deep clone the status object so providers can't continue to change it without notifying.\n                status = JSON.parse(JSON.stringify(status)) as ContextGroup[]\n                // Cache the status so we don't re-poll this provider unless it changes.\n                this.providerStatusMap.set(provider, status)\n            }\n\n            // Collect context groups by name\n            for (const group of status) {\n                if (group.displayName in groupBy) {\n                    // Merge the items in the group.\n                    groupBy[group.displayName].providers.push(...group.providers)\n                } else {\n                    // Create a new group for the merged result.\n                    groupBy[group.displayName] = {\n                        displayName: group.displayName,\n                        providers: [...group.providers],\n                    }\n                }\n            }\n        }\n        // Order sources within the groups by a canonical order\n        for (const groups of Object.values(groupBy)) {\n            // Sort by a fixed locale for consistency. The 'kind' key is not a\n            // localized UI label.\n            groups.providers.sort((a, b) => a.kind.localeCompare(b.kind, 'en-US'))\n        }\n        return [...Object.values(groupBy)]\n    }\n\n    // TODO: Create a publisher to push into the webview\n    // TODO: Hook in local embeddings\n    // TODO: Hook in cloud embeddings\n    // TODO: Hook in symf\n    // TODO: Hook in graph\n    // TODO: Hook in the Cody: building code index ... notification pusher's\n    // state\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/common.ts:50-74"",""content"":""\n/**\n * Create and open a new chat panel, and close the enhanced context settings window.\n * Returns the chat panel frame locator.\n */\nexport async function createEmptyChatPanel(page: Page): Promise<[FrameLocator, Locator]> {\n    await page.getByRole('button', { name: 'New Chat', exact: true }).click()\n    const chatFrame = page.frameLocator('iframe.webview').last().frameLocator('iframe')\n    const enhancedContextCheckbox = chatFrame.locator('#enhanced-context-checkbox')\n    await expect(enhancedContextCheckbox).toBeFocused()\n    await page.keyboard.press('Escape')\n    await expect(enhancedContextCheckbox).not.toBeVisible()\n    const chatInput = chatFrame.getByRole('textbox', { name: 'Chat message' })\n    return [chatFrame, chatInput]\n}\n\n/**\n * Gets the chat context cell. If {@link counts} is specified, then validates that the context\n * exactly matches the specified file and line counts.\n */\nexport function getContextCell(\n    chatPanel: FrameLocator,\n    counts?: { files: number; lines: number }\n): Locator {\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/EnhancedContext.tsx:4-6"",""content"":""export function useEnhancedContextEnabled(): boolean {\n    return React.useContext(EnhancedContextEnabled)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/token/constants.ts:0-40"",""content"":""/**\n * The default context window for chat models.\n */\nexport const CHAT_INPUT_TOKEN_BUDGET = 7000\n\n/**\n * The default context window for fast chat models with a smaller context window.\n */\nexport const FAST_CHAT_INPUT_TOKEN_BUDGET = 4096\n\n/**\n * The default output token limit for chat models.\n */\nexport const CHAT_OUTPUT_TOKEN_BUDGET = 4000\n\n/**\n * Enhanced context takes up to 60% of the total context window for chat.\n * The % is the same for both fast and regular chat models.\n */\nexport const ENHANCED_CONTEXT_ALLOCATION = 0.6\n\n/**\n * NOTE: DotCom users with FeatureFlag.CodyChatContextBudget enabled for A/B testing only.\n *\n * The total context window reserved for user added context (@-mention, right-click, etc.)\n *\n * This is only being used for Claude-3 Sonnet and Opus when feature flag is enabled.\n * For those models, this is added on top of the chat context window.\n * For other models, this number is not used. Instead, they will share\n * the token budget for user-context with the chat context window.\n */\nexport const EXPERIMENTAL_USER_CONTEXT_TOKEN_BUDGET = 30000\n\n/**\n * NOTE: DotCom users with FeatureFlag.CodyChatContextBudget enabled for A/B testing only.\n *\n * The total context window reserved for chat input.\n */\nexport const EXPERIMENTAL_CHAT_INPUT_TOKEN_BUDGET = 15000\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_019/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_020/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"The functionality for running symf (the search engine used for code context) is primarily contained in the `vscode/src/local-context/symf.ts` file. This file exports the `SymfRunner` class, which has methods for:

1. Indexing code directories with `ensureIndex` and `reindexIfStale`
2. Querying the indexed code with `getResults`
3. Deleting indexes with `deleteIndex`
4. Checking index status with `getIndexStatus`

The `SymfRunner` class is instantiated and used in several places in the codebase:

1. In `vscode/src/extension.node.ts`, it is created and passed to the `activateCommon` function as part of the `platform` object.
2. In `vscode/src/main.ts`, if `config.experimentalSymfContext` is enabled, a `SearchViewProvider` is created using the `SymfRunner` instance.
3. The `SearchViewProvider` uses the `SymfRunner` to power the search functionality in the VS Code sidebar.

Additionally, the `vscode/src/local-context/download-symf.ts` file contains functionality for downloading the symf binary if it is not already present on the user's system.",Where is the functionality for running symf?,"[{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:4554-4589"",""content"":""      '@storybook/builder-manager': 8.0.5\n      '@storybook/channels': 8.0.5\n      '@storybook/core-common': 8.0.5\n      '@storybook/core-events': 8.0.5\n      '@storybook/csf': 0.1.2\n      '@storybook/csf-tools': 8.0.5\n      '@storybook/docs-mdx': 3.0.0\n      '@storybook/global': 5.0.0\n      '@storybook/manager': 8.0.5\n      '@storybook/manager-api': 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/node-logger': 8.0.5\n      '@storybook/preview-api': 8.0.5\n      '@storybook/telemetry': 8.0.5\n      '@storybook/types': 8.0.5\n      '@types/detect-port': 1.3.5\n      '@types/node': 18.19.31\n      '@types/pretty-hrtime': 1.0.3\n      '@types/semver': 7.5.8\n      better-opn: 3.0.2\n      chalk: 4.1.2\n      cli-table3: 0.6.3\n      compression: 1.7.4\n      detect-port: 1.5.1\n      express: 4.18.3\n      fs-extra: 11.2.0\n      globby: 11.1.0\n      ip: 2.0.1\n      lodash: 4.17.21\n      open: 8.4.2\n      pretty-hrtime: 1.0.3\n      prompts: 2.4.2\n      read-pkg-up: 7.0.1\n      semver: 7.6.0\n      telejson: 7.2.0\n      tiny-invariant: 1.3.3\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:565-582"",""content"":""\n### Changed\n\n- Settings: Relabel \""symf Context\"" as \""Search Context\"". [pull/2285](https://github.com/sourcegraph/cody/pull/2285)\n- Chat: Removed 'Chat Suggestions' setting. [pull/2284](https://github.com/sourcegraph/cody/pull/2284)\n- Edit: Completed edits are no longer scrolled back into view in the active file. [pull/2297](https://github.com/sourcegraph/cody/pull/2297)\n- Chat: Update welcome message. [pull/2298](https://github.com/sourcegraph/cody/pull/2298)\n- Edit: Decorations are no longer shown once an edit has been applied. [pull/2304](https://github.com/sourcegraph/cody/pull/2304)\n\n## [0.18.4]\n\n### Added\n\n### Fixed\n\n- Fixes an issue where the sidebar would not properly load when not signed in. [pull/2267](https://github.com/sourcegraph/cody/pull/2267)\n- Fixes an issue where telemetry events were not properly logged with the new chat experience. [pull/2291](https://github.com/sourcegraph/cody/pull/2291)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:19-30"",""content"":""export async function getSymfPath(context: vscode.ExtensionContext): Promise<string | null> {\n    // If user-specified symf path is set, use that\n    const config = vscode.workspace.getConfiguration()\n    const userSymfPath = config.get<string>('cody.experimental.symf.path')\n    if (userSymfPath) {\n        logDebug('symf', `using user symf: ${userSymfPath}`)\n        return userSymfPath\n    }\n\n    const symfContainingDir = path.join(context.globalStorageUri.fsPath, 'symf')\n    return await _getSymfPath(symfContainingDir)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/extension.node.ts:62-67"",""content"":""\n        onConfigurationChange: setCustomAgent,\n        extensionClient,\n    })\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/isRunningInsideAgent.ts:2-4"",""content"":""export function isRunningInsideAgent(): boolean {\n    return vscode.workspace.getConfiguration().get<boolean>('cody.advanced.agent.running', false)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration.test.ts:48-70"",""content"":""                        return true\n                    case 'cody.experimental.symf.path':\n                        return '/usr/local/bin/symf'\n                    case 'cody.experimental.simpleChatContext':\n                        return true\n                    case 'cody.experimental.symfContext':\n                        return true\n                    case 'cody.experimental.tracing':\n                        return true\n                    case 'cody.debug.verbose':\n                        return true\n                    case 'cody.debug.filter':\n                        return /.*/\n                    case 'cody.telemetry.level':\n                        return 'off'\n                    case 'cody.chat.preInstruction':\n                        return 'My name is Jeff.'\n                    case 'cody.edit.preInstruction':\n                        return 'My name is not Jeff.'\n                    case 'cody.autocomplete.advanced.provider':\n                        return 'unstable-openai'\n                    case 'cody.autocomplete.advanced.model':\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:14-14"",""content"":""const symfVersion = 'v0.0.9'\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:55-80"",""content"":""\n    const symfFilename = `symf-${symfVersion}-${arch}-${platform}`\n    const symfUnzippedFilename = `symf-${arch}-${zigPlatform}` // the filename inside the zip\n    const symfPath = path.join(symfContainingDir, symfFilename)\n    if (await fileExists(symfPath)) {\n        logDebug('symf', `using downloaded symf \""${symfPath}\""`)\n        return symfPath\n    }\n\n    const symfURL = `https://github.com/sourcegraph/symf/releases/download/${symfVersion}/symf-${arch}-${zigPlatform}.zip`\n\n    // Download symf binary with vscode progress api\n    try {\n        await downloadLock.acquire()\n        // Re-check if it has been downloaded\n        if (await fileExists(symfPath)) {\n            logDebug('symf', 'symf already downloaded, reusing')\n            return symfPath\n        }\n\n        await actualDownloadSymf({ symfPath, symfURL, symfFilename, symfUnzippedFilename })\n        void removeOldSymfBinaries(symfContainingDir, symfFilename)\n    } catch (error) {\n        captureException(error)\n        void vscode.window.showErrorMessage(`Failed to download symf: ${error}`)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:154-162"",""content"":""async function unzipSymf(zipFile: string, destinationDir: string): Promise<void> {\n    const zip = fs.createReadStream(zipFile).pipe(unzipper.Parse({ forceStream: true }))\n    for await (const entry of zip) {\n        if (entry.path.endsWith('/')) {\n            continue\n        }\n        entry.pipe(fs.createWriteStream(path.join(destinationDir, entry.path)))\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/SimpleChatPanelProvider.ts:36-59"",""content"":""import type { LocalEmbeddingsController } from '../../local-context/local-embeddings'\nimport type { SymfRunner } from '../../local-context/symf'\nimport { logDebug } from '../../log'\nimport type { AuthProvider } from '../../services/AuthProvider'\nimport { telemetryService } from '../../services/telemetry'\nimport { telemetryRecorder } from '../../services/telemetry-v2'\nimport type { TreeViewProvider } from '../../services/tree-views/TreeViewProvider'\nimport {\n    handleCodeFromInsertAtCursor,\n    handleCodeFromSaveToNewFile,\n    handleCopiedCode,\n} from '../../services/utils/codeblock-action-tracker'\nimport { openExternalLinks, openLocalFileWithRange } from '../../services/utils/workspace-action'\nimport { TestSupport } from '../../test-support'\nimport { countGeneratedCode } from '../utils'\n\nimport type { Span } from '@opentelemetry/api'\nimport { captureException } from '@sentry/core'\nimport type {\n    ContextItemFile,\n    ContextItemWithContent,\n} from '@sourcegraph/cody-shared/src/codebase-context/messages'\nimport { ModelUsage } from '@sourcegraph/cody-shared/src/models/types'\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/main.ts:261-285"",""content"":""    }\n\n    // Register tree views\n    disposables.push(\n        chatManager,\n        vscode.window.registerWebviewViewProvider('cody.chat', chatManager.sidebarViewController, {\n            webviewOptions: { retainContextWhenHidden: true },\n        }),\n        // Update external services when configurationChangeEvent is fired by chatProvider\n        contextProvider.configurationChangeEvent.event(async () => {\n            const newConfig = await getFullConfig()\n            await onConfigurationChange(newConfig)\n        })\n    )\n\n    const statusBar = createStatusBar()\n\n    // Important to respect `config.experimentalSymfContext`. The agent\n    // currently crashes with a cryptic error when running with symf enabled so\n    // we need a way to reliably disable symf until we fix the root problem.\n    if (symfRunner && config.experimentalSymfContext) {\n        const searchViewProvider = new SearchViewProvider(context.extensionUri, symfRunner)\n        disposables.push(searchViewProvider)\n        searchViewProvider.initialize()\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:88-125"",""content"":""async function downloadSymf({\n    symfPath,\n    symfFilename,\n    symfUnzippedFilename,\n    symfURL,\n}: {\n    symfPath: string\n    symfFilename: string\n    symfUnzippedFilename: string\n    symfURL: string\n}): Promise<void> {\n    logDebug('symf', `downloading symf from ${symfURL}`)\n\n    await vscode.window.withProgress(\n        {\n            location: vscode.ProgressLocation.Notification,\n            title: 'Downloading Cody search engine (symf)',\n            cancellable: false,\n        },\n        async progress => {\n            const symfTmpDir = `${symfPath}.tmp`\n            progress.report({ message: 'Downloading symf and extracting symf' })\n\n            await fspromises.mkdir(symfTmpDir, { recursive: true })\n            const symfZipFile = path.join(symfTmpDir, `${symfFilename}.zip`)\n            await downloadFile(symfURL, symfZipFile)\n            await unzipSymf(symfZipFile, symfTmpDir)\n            logDebug('symf', `downloaded symf to ${symfTmpDir}`)\n\n            const tmpFile = path.join(symfTmpDir, symfUnzippedFilename)\n            await fspromises.chmod(tmpFile, 0o755)\n            await fspromises.rename(tmpFile, symfPath)\n            await fspromises.rm(symfTmpDir, { recursive: true })\n\n            logDebug('symf', `extracted symf to ${symfPath}`)\n        }\n    )\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/extension.node.ts:46-62"",""content"":""\n    return activateCommon(context, {\n        createLocalEmbeddingsController: isLocalEmbeddingsDisabled\n            ? undefined\n            : (config: LocalEmbeddingsConfig): LocalEmbeddingsController =>\n                  createLocalEmbeddingsController(context, config),\n        createContextRankingController: (config: ContextRankerConfig) =>\n            createContextRankingController(context, config),\n        createCompletionsClient: (...args) => new SourcegraphNodeCompletionsClient(...args),\n        createCommandsProvider: () => new CommandsProvider(),\n        createSymfRunner: (...args) => new SymfRunner(...args),\n        createBfgRetriever: () => new BfgRetriever(context),\n        createSentryService: (...args) => new NodeSentryService(...args),\n        createOpenTelemetryService: (...args) => new OpenTelemetryService(...args),\n        getRemoteUrlGetters: () => [gitRemoteUrlFromGitCli],\n        startTokenReceiver: (...args) => startTokenReceiver(...args),\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/package.json:29-63"",""content"":""    \""update-symf-recordings\"": \""rm -rf recordings && CODY_RECORD_IF_MISSING=true vitest vscode/src/local-context/symf.test.ts\""\n  },\n  \""devDependencies\"": {\n    \""@biomejs/biome\"": \""1.5.2\"",\n    \""@sourcegraph/tsconfig\"": \""^4.0.1\"",\n    \""@storybook/addon-essentials\"": \""^8.0.5\"",\n    \""@storybook/react\"": \""^8.0.5\"",\n    \""@storybook/react-vite\"": \""^8.0.5\"",\n    \""@testing-library/jest-dom\"": \""^6.4.2\"",\n    \""@testing-library/react\"": \""^14.2.2\"",\n    \""@types/node\"": \""20.12.7\"",\n    \""@types/react\"": \""18.2.79\"",\n    \""@types/react-dom\"": \""18.2.25\"",\n    \""@vitejs/plugin-react\"": \""^4.2.1\"",\n    \""esbuild\"": \""^0.18.20\"",\n    \""happy-dom\"": \""^14.3.10\"",\n    \""jsdom\"": \""^22.1.0\"",\n    \""knip\"": \""^3.13.2\"",\n    \""storybook\"": \""^8.0.5\"",\n    \""stylelint\"": \""^15.11.0\"",\n    \""stylelint-config-standard\"": \""^34.0.0\"",\n    \""ts-node\"": \""^10.9.2\"",\n    \""typescript\"": \""^5.4.2\"",\n    \""vite\"": \""^5.2.9\"",\n    \""vitest\"": \""^1.5.0\""\n  },\n  \""dependencies\"": {\n    \""ignore\"": \""^5.3.1\"",\n    \""react\"": \""18.2.0\"",\n    \""react-dom\"": \""18.2.0\""\n  },\n  \""packageManager\"": \""pnpm@8.6.7\"",\n  \""resolutions\"": {\n    \""tslib\"": \""2.1.0\""\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:543-580"",""content"":""function parseSymfStdout(stdout: string): Result[] {\n    interface RawSymfResult extends Omit<Result, 'file'> {\n        file: string\n    }\n    const results = JSON.parse(stdout) as RawSymfResult[]\n    return results.map(result => {\n        const { fqname, name, type, doc, exported, lang, file: fsPath, range, summary } = result\n\n        const { row: startRow, col: startColumn } = range.startPoint\n        const { row: endRow, col: endColumn } = range.endPoint\n\n        const startByte = range.startByte\n        const endByte = range.endByte\n\n        return {\n            fqname,\n            name,\n            type,\n            doc,\n            exported,\n            lang,\n            file: vscode.Uri.file(fsPath),\n            summary,\n            range: {\n                startByte,\n                endByte,\n                startPoint: {\n                    row: startRow,\n                    col: startColumn,\n                },\n                endPoint: {\n                    row: endRow,\n                    col: endColumn,\n                },\n            },\n        } satisfies Result\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:1531-1567"",""content"":""            Module = 29,\n            Namespace = 30,\n            Null = 31,\n            Number = 32,\n            Object = 33,\n            Operator = 34,\n            Package = 35,\n            PackageObject = 36,\n            Parameter = 37,\n            ParameterLabel = 38,\n            Pattern = 39,\n            Predicate = 40,\n            Property = 41,\n            Protocol = 42,\n            ProtocolMethod = 68,\n            PureVirtualMethod = 69,\n            Quasiquoter = 43,\n            SelfParameter = 44,\n            Setter = 45,\n            Signature = 46,\n            SingletonClass = 75,\n            SingletonMethod = 76,\n            StaticDataMember = 77,\n            StaticEvent = 78,\n            StaticField = 79,\n            StaticMethod = 80,\n            StaticProperty = 81,\n            StaticVariable = 82,\n            String = 48,\n            Struct = 49,\n            Subscript = 47,\n            Tactic = 50,\n            Theorem = 51,\n            ThisParameter = 52,\n            Trait = 53,\n            TraitMethod = 70,\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:630-642"",""content"":""function toSymfError(error: unknown): Error {\n    const errorString = `${error}`\n    let errorMessage: string\n    if (errorString.includes('ENOENT')) {\n        errorMessage =\n            'symf binary not found. Do you have \""cody.experimental.symf.path\"" set and is it valid?'\n    } else if (errorString.includes('401')) {\n        errorMessage = `symf: Unauthorized. Is Cody signed in? ${error}`\n    } else {\n        errorMessage = `symf index creation failed: ${error}`\n    }\n    return new EvalError(errorMessage)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:27-55"",""content"":""\n    const symfContainingDir = path.join(context.globalStorageUri.fsPath, 'symf')\n    return await _getSymfPath(symfContainingDir)\n}\n\nconst downloadLock = new Mutex()\n\nexport async function _getSymfPath(\n    symfContainingDir: string,\n    actualDownloadSymf: (op: {\n        symfPath: string\n        symfFilename: string\n        symfUnzippedFilename: string\n        symfURL: string\n    }) => Promise<void> = downloadSymf\n): Promise<string | null> {\n    const { platform, arch } = getOSArch()\n    if (!platform || !arch) {\n        // show vs code error message\n        void vscode.window.showErrorMessage(\n            `No symf binary available for ${os.platform()}/${os.machine()}`\n        )\n        return null\n    }\n    // Releases (eg at https://github.com/sourcegraph/symf/releases) are named with the Zig platform\n    // identifier (linux-musl, windows-gnu, macos).\n    const zigPlatform =\n        platform === 'linux' ? 'linux-musl' : platform === 'windows' ? 'windows-gnu' : platform\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:49-486"",""content"":""export class SymfRunner implements IndexedKeywordContextFetcher, vscode.Disposable {\n    // The root of all symf index directories\n    private indexRoot: FileURI\n    private indexLocks: Map<string, RWLock> = new Map()\n\n    private status: IndexStatus = new IndexStatus()\n\n    constructor(\n        private context: vscode.ExtensionContext,\n        private sourcegraphServerEndpoint: string | null,\n        private authToken: string | null,\n        private completionsClient: SourcegraphCompletionsClient\n    ) {\n        const indexRoot = vscode.Uri.joinPath(context.globalStorageUri, 'symf', 'indexroot').with(\n            // On VS Code Desktop, this is a `vscode-userdata:` URI that actually just refers to\n            // file system paths.\n            vscode.env.uiKind === vscode.UIKind.Desktop ? { scheme: 'file' } : {}\n        )\n\n        if (!isFileURI(indexRoot)) {\n            throw new Error('symf only supports running on the file system')\n        }\n        this.indexRoot = indexRoot\n    }\n\n    public dispose(): void {\n        this.status.dispose()\n    }\n\n    public onIndexStart(cb: (e: IndexStartEvent) => void): vscode.Disposable {\n        return this.status.onDidStart(cb)\n    }\n\n    public onIndexEnd(cb: (e: IndexEndEvent) => void): vscode.Disposable {\n        return this.status.onDidEnd(cb)\n    }\n\n    public setSourcegraphAuth(endpoint: string | null, authToken: string | null): void {\n        this.sourcegraphServerEndpoint = endpoint\n        this.authToken = authToken\n    }\n\n    private async getSymfInfo(): Promise<{\n        symfPath: string\n        serverEndpoint: string\n        accessToken: string\n    }> {\n        const accessToken = this.authToken\n        if (!accessToken) {\n            throw new Error('SymfRunner.getResults: No access token')\n        }\n        const serverEndpoint = this.sourcegraphServerEndpoint\n        if (!serverEndpoint) {\n            throw new Error('SymfRunner.getResults: No Sourcegraph server endpoint')\n        }\n        const symfPath = await getSymfPath(this.context)\n        if (!symfPath) {\n            throw new Error('No symf executable')\n        }\n        return { accessToken, serverEndpoint, symfPath }\n    }\n\n    public getResults(userQuery: PromptString, scopeDirs: vscode.Uri[]): Promise<Promise<Result[]>[]> {\n        const expandedQuery = symfExpandQuery(this.completionsClient, userQuery)\n        return Promise.resolve(\n            scopeDirs\n                .filter(isFileURI)\n                .map(scopeDir => this.getResultsForScopeDir(expandedQuery, scopeDir))\n        )\n    }\n\n    /**\n     * Returns the list of results from symf for a single directory scope.\n     * @param keywordQuery is a promise, because query expansion might be an expensive\n     * operation that is best done concurrently with querying and (re)building the index.\n     */\n    private async getResultsForScopeDir(\n        keywordQuery: Promise<string>,\n        scopeDir: FileURI\n    ): Promise<Result[]> {\n        const maxRetries = 10\n\n        // Run in a loop in case the index is deleted before we can query it\n        for (let i = 0; i < maxRetries; i++) {\n            await this.getIndexLock(scopeDir).withWrite(async () => {\n                await this.unsafeEnsureIndex(scopeDir, {\n                    retryIfLastAttemptFailed: i === 0,\n                    ignoreExisting: false,\n                })\n            })\n\n            let indexNotFound = false\n            const stdout = await this.getIndexLock(scopeDir).withRead(async () => {\n                // Check again if index exists after we have the read lock\n                if (!(await this.unsafeIndexExists(scopeDir))) {\n                    indexNotFound = true\n                    return ''\n                }\n                return this.unsafeRunQuery(await keywordQuery, scopeDir)\n            })\n            if (indexNotFound) {\n                continue\n            }\n            const results = parseSymfStdout(stdout)\n            return results\n        }\n        throw new Error(`failed to find index after ${maxRetries} tries for directory ${scopeDir}`)\n    }\n\n    public async deleteIndex(scopeDir: FileURI): Promise<void> {\n        await this.getIndexLock(scopeDir).withWrite(async () => {\n            await this.unsafeDeleteIndex(scopeDir)\n        })\n    }\n\n    public async getIndexStatus(\n        scopeDir: FileURI\n    ): Promise<'unindexed' | 'indexing' | 'ready' | 'failed'> {\n        if (this.status.isInProgress(scopeDir)) {\n            // Check this before waiting on the lock\n            return 'indexing'\n        }\n        const hasIndex = await this.getIndexLock(scopeDir).withRead(async () => {\n            return this.unsafeIndexExists(scopeDir)\n        })\n        if (hasIndex) {\n            return 'ready'\n        }\n        if (await this.didIndexFail(scopeDir)) {\n            return 'failed'\n        }\n        return 'unindexed'\n    }\n\n    /**\n     * Check index freshness and reindex if needed. Currently reindexes daily if changes\n     * have been detected.\n     */\n    public async reindexIfStale(scopeDir: FileURI): Promise<void> {\n        logDebug('SymfRunner', 'reindexIfStale', scopeDir.fsPath)\n        try {\n            const diff = await this.statIndex(scopeDir)\n            if (!diff) {\n                await this.ensureIndex(scopeDir, {\n                    retryIfLastAttemptFailed: false,\n                    ignoreExisting: false,\n                })\n                return\n            }\n            if (\n                (diff.millisElapsed === undefined || diff.millisElapsed > oneDayMillis) &&\n                (diff.maybeChangedFiles || (diff.changedFiles && diff.changedFiles.length > 0))\n            ) {\n                // reindex targeting a temporary directory\n                // atomically replace index\n                await this.ensureIndex(scopeDir, {\n                    retryIfLastAttemptFailed: false,\n                    ignoreExisting: true,\n                })\n            }\n        } catch (error) {\n            logDebug('SymfRunner', `Error checking freshness of index at ${scopeDir.fsPath}`, error)\n        }\n    }\n\n    private async statIndex(scopeDir: FileURI): Promise<CorpusDiff | null> {\n        const { indexDir } = this.getIndexDir(scopeDir)\n        const { symfPath } = await this.getSymfInfo()\n        try {\n            const { stdout } = await execFile(symfPath, [\n                '--index-root',\n                indexDir.fsPath,\n                'status',\n                scopeDir.fsPath,\n            ])\n            return parseJSONToCorpusDiff(stdout)\n        } catch (error) {\n            logDebug('SymfRunner', 'symf status error', error)\n            return null\n        }\n    }\n\n    /**\n     * Triggers indexing for a scopeDir.\n     *\n     * Options:\n     * - retryIfLastAttemptFailed: if the last indexing run ended in failure, we don't retry\n     *   unless this value is true.\n     * - ignoreExisting: if an index already exists, we don't reindex unless this value is true.\n     *   This should be set to true when we want to update an index because files have changed.\n     */\n    public async ensureIndex(\n        scopeDir: FileURI,\n        options: IndexOptions = { retryIfLastAttemptFailed: false, ignoreExisting: false }\n    ): Promise<void> {\n        await this.getIndexLock(scopeDir).withWrite(async () => {\n            await this.unsafeEnsureIndex(scopeDir, options)\n        })\n    }\n\n    private getIndexLock(scopeDir: FileURI): RWLock {\n        const { indexDir } = this.getIndexDir(scopeDir)\n        let lock = this.indexLocks.get(indexDir.toString())\n        if (lock) {\n            return lock\n        }\n        lock = new RWLock()\n        this.indexLocks.set(indexDir.toString(), lock)\n        return lock\n    }\n\n    private async unsafeRunQuery(keywordQuery: string, scopeDir: FileURI): Promise<string> {\n        const { indexDir } = this.getIndexDir(scopeDir)\n        const { accessToken, symfPath, serverEndpoint } = await this.getSymfInfo()\n        try {\n            const { stdout } = await execFile(\n                symfPath,\n                [\n                    '--index-root',\n                    indexDir.fsPath,\n                    'query',\n                    '--scopes',\n                    scopeDir.fsPath,\n                    '--fmt',\n                    'json',\n                    keywordQuery,\n                ],\n                {\n                    env: {\n                        SOURCEGRAPH_TOKEN: accessToken,\n                        SOURCEGRAPH_URL: serverEndpoint,\n                        HOME: process.env.HOME,\n                    },\n                    maxBuffer: 1024 * 1024 * 1024,\n                    timeout: 1000 * 30, // timeout in 30 seconds\n                }\n            )\n            return stdout\n        } catch (error) {\n            throw toSymfError(error)\n        }\n    }\n\n    private async unsafeDeleteIndex(scopeDir: FileURI): Promise<void> {\n        const trashRootDir = vscode.Uri.joinPath(this.indexRoot, '.trash')\n        await mkdirp(trashRootDir.fsPath)\n        const { indexDir } = this.getIndexDir(scopeDir)\n\n        if (!(await fileExists(indexDir))) {\n            // index directory no longer exists, nothing to do\n            return\n        }\n\n        // Unique name for trash directory\n        const trashDir = vscode.Uri.joinPath(trashRootDir, `${uriBasename(indexDir)}-${Date.now()}`)\n        if (await fileExists(trashDir)) {\n            // if trashDir already exists, error\n            throw new Error(\n                `could not delete index ${indexDir}: target trash directory ${trashDir} already exists`\n            )\n        }\n\n        await rename(indexDir.fsPath, trashDir.fsPath)\n        void rm(trashDir.fsPath, { recursive: true, force: true }) // delete in background\n    }\n\n    private async unsafeIndexExists(scopeDir: FileURI): Promise<boolean> {\n        const { indexDir } = this.getIndexDir(scopeDir)\n        return fileExists(vscode.Uri.joinPath(indexDir, 'index.json'))\n    }\n\n    private async unsafeEnsureIndex(scopeDir: FileURI, options: IndexOptions): Promise<void> {\n        logDebug('SymfRunner', 'unsafeEnsureIndex', scopeDir.toString(), { verbose: { options } })\n        if (!options.ignoreExisting) {\n            const indexExists = await this.unsafeIndexExists(scopeDir)\n            if (indexExists) {\n                return\n            }\n        }\n\n        if (!options.retryIfLastAttemptFailed && (await this.didIndexFail(scopeDir))) {\n            // Index build previous failed, so don't try to rebuild\n            logDebug(\n                'symf',\n                'index build previously failed and retryIfLastAttemptFailed=false, not rebuilding'\n            )\n                //return\n        }\n\n        const { indexDir, tmpDir } = this.getIndexDir(scopeDir)\n        try {\n            await this.unsafeUpsertIndex(indexDir, tmpDir, scopeDir)\n        } catch (error) {\n            logDebug('symf', 'symf index creation failed', error)\n            await this.markIndexFailed(scopeDir)\n            throw error\n        }\n        await this.clearIndexFailure(scopeDir)\n    }\n\n    private getIndexDir(scopeDir: FileURI): { indexDir: FileURI; tmpDir: FileURI } {\n        let indexSubdir = scopeDir.path\n\n        // On Windows, we can't use an absolute path with a drive letter inside another path\n        // so we remove the colon, so `/c:/foo/` becomes `/c/foo` and `/c%3A/foo` becomes `/c/foo`.\n        if (isWindows()) {\n            if (indexSubdir[2] === ':') {\n                indexSubdir = indexSubdir.slice(0, 2) + indexSubdir.slice(3)\n            } else if (indexSubdir.slice(2, 5) === '%3A') {\n                indexSubdir = indexSubdir.slice(0, 2) + indexSubdir.slice(5)\n            }\n        }\n\n        return {\n            indexDir: assertFileURI(vscode.Uri.joinPath(this.indexRoot, indexSubdir)),\n            tmpDir: assertFileURI(vscode.Uri.joinPath(this.indexRoot, '.tmp', indexSubdir)),\n        }\n    }\n\n    private unsafeUpsertIndex(\n        indexDir: FileURI,\n        tmpIndexDir: FileURI,\n        scopeDir: FileURI\n    ): Promise<void> {\n        const cancellation = new vscode.CancellationTokenSource()\n        const upsert = this._unsafeUpsertIndex(indexDir, tmpIndexDir, scopeDir, cancellation.token)\n        this.status.didStart({ scopeDir, done: upsert, cancel: () => cancellation.cancel() })\n        void upsert.finally(() => {\n            this.status.didEnd({ scopeDir })\n            cancellation.dispose()\n        })\n        return upsert\n    }\n\n    private async _unsafeUpsertIndex(\n        indexDir: FileURI,\n        tmpIndexDir: FileURI,\n        scopeDir: FileURI,\n        cancellationToken: vscode.CancellationToken\n    ): Promise<void> {\n        const symfPath = await getSymfPath(this.context)\n        if (!symfPath) {\n            return\n        }\n        await rm(tmpIndexDir.fsPath, { recursive: true }).catch(() => undefined)\n\n        logDebug('symf', 'creating index', indexDir)\n        let maxCPUs = 1\n        if (os.cpus().length > 4) {\n            maxCPUs = 2\n        }\n\n        const disposeOnFinish: vscode.Disposable[] = []\n        if (cancellationToken.isCancellationRequested) {\n            throw new vscode.CancellationError()\n        }\n\n        let wasCancelled = false\n        let onExit: (() => void) | undefined\n        try {\n            const proc = spawn(symfPath, ['--index-root', tmpIndexDir.fsPath, 'add', scopeDir.fsPath], {\n                env: {\n                    ...process.env,\n                    GOMAXPROCS: `${maxCPUs}`, // use at most one cpu for indexing\n                },\n                stdio: ['ignore', 'ignore', 'ignore'],\n                timeout: 1000 * 60 * 10, // timeout in 10 minutes\n            })\n            onExit = () => {\n                proc.kill('SIGKILL')\n            }\n            process.on('exit', onExit)\n\n            if (cancellationToken.isCancellationRequested) {\n                wasCancelled = true\n                proc.kill('SIGKILL')\n            } else {\n                disposeOnFinish.push(\n                    cancellationToken.onCancellationRequested(() => {\n                        wasCancelled = true\n                        proc.kill('SIGKILL')\n                    })\n                )\n            }\n\n            // wait for proc to finish\n            await new Promise<void>((resolve, reject) => {\n                proc.on('error', reject)\n                proc.on('exit', code => {\n                    if (code === 0) {\n                        resolve()\n                    } else {\n                        reject(new Error(`symf exited with code ${code}`))\n                    }\n                })\n            })\n\n            // move just-built index to index path\n            await rm(indexDir.fsPath, { recursive: true }).catch(() => undefined)\n            await mkdirp(uriDirname(indexDir).fsPath)\n            await rename(tmpIndexDir.fsPath, indexDir.fsPath)\n        } catch (error) {\n            if (wasCancelled) {\n                throw new vscode.CancellationError()\n            }\n            throw toSymfError(error)\n        } finally {\n            if (onExit) {\n                process.removeListener('exit', onExit)\n            }\n            vscode.Disposable.from(...disposeOnFinish).dispose()\n            await rm(tmpIndexDir.fsPath, { recursive: true, force: true })\n        }\n    }\n\n    /**\n     * Helpers for tracking index failure\n     */\n\n    private async markIndexFailed(scopeDir: FileURI): Promise<void> {\n        const failureRoot = vscode.Uri.joinPath(this.indexRoot, '.failed')\n        await mkdirp(failureRoot.fsPath)\n        const failureSentinelFile = vscode.Uri.joinPath(failureRoot, scopeDir.path.replaceAll('/', '__'))\n        await writeFile(failureSentinelFile.fsPath, '')\n    }\n\n    private async didIndexFail(scopeDir: FileURI): Promise<boolean> {\n        const failureRoot = vscode.Uri.joinPath(this.indexRoot, '.failed')\n        const failureSentinelFile = vscode.Uri.joinPath(failureRoot, scopeDir.path.replaceAll('/', '__'))\n        return fileExists(failureSentinelFile)\n    }\n\n    private async clearIndexFailure(scopeDir: FileURI): Promise<void> {\n        const failureRoot = vscode.Uri.joinPath(this.indexRoot, '.failed')\n        const failureSentinelFile = vscode.Uri.joinPath(failureRoot, scopeDir.path.replaceAll('/', '__'))\n        await rm(failureSentinelFile.fsPath, { force: true })\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/external-services.ts:27-61"",""content"":""    symfRunner: SymfRunner | undefined\n\n    /** Update configuration for all of the services in this interface. */\n    onConfigurationChange: (newConfig: ExternalServicesConfiguration) => void\n}\n\ntype ExternalServicesConfiguration = Pick<\n    ConfigurationWithAccessToken,\n    | 'serverEndpoint'\n    | 'codebase'\n    | 'useContext'\n    | 'customHeaders'\n    | 'accessToken'\n    | 'debugVerbose'\n    | 'experimentalTracing'\n> &\n    LocalEmbeddingsConfig &\n    ContextRankerConfig\n\nexport async function configureExternalServices(\n    context: vscode.ExtensionContext,\n    initialConfig: ExternalServicesConfiguration,\n    platform: Pick<\n        PlatformContext,\n        | 'createLocalEmbeddingsController'\n        | 'createCompletionsClient'\n        | 'createSentryService'\n        | 'createOpenTelemetryService'\n        | 'createSymfRunner'\n        | 'createContextRankingController'\n    >,\n    authProvider: AuthProvider\n): Promise<ExternalServices> {\n    const sentryService = platform.createSentryService?.(initialConfig)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/CodebaseStatusProvider.ts:179-183"",""content"":""        this.symfIndexStatus = newSymfStatus\n        return didSymfStatusChange\n    }\n}\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_021/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the provided codebase context, the code that interacts with the `symf` binary is primarily located in the following files:

1. `vscode/src/local-context/download-symf.ts`: This file contains the `getSymfPath` function, which is responsible for downloading the `symf` binary if it's not already present on the user's machine.

2. `vscode/src/local-context/symf.ts`: This file contains the `SymfRunner` class, which is responsible for running the `symf` binary and indexing the codebase. The `SymfRunner` class has methods like `indexProject`, `getResults`, and `dispose` that interact with the `symf` binary.

3. `vscode/src/main.ts`: In this file, an instance of `SymfRunner` is created and initialized if the `config.experimentalSymfContext` setting is enabled.

4. `vscode/src/external-services.ts`: This file contains the `configureExternalServices` function, which creates an instance of `SymfRunner` using the `platform.createSymfRunner` function.

The `symf` binary is a tool developed by Sourcegraph to provide precise code navigation and context for code intelligence features. The codebase interacts with `symf` to index the user's codebase and retrieve information about symbols, references, and other code elements.",Where is the code that interacts with symf  binary ?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/test.ts:8-38"",""content"":""    public provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] {\n        const [testableNode] = execQueryWrapper({\n            document,\n            position: range.start,\n            queryWrapper: 'getTestableNode',\n        })\n        if (!testableNode) {\n            return []\n        }\n\n        const { range: testableRange, symbol: testableSymbol } = testableNode\n        if (!testableSymbol || !testableRange) {\n            return []\n        }\n\n        // Expand the range from the node to include the full line\n        const editorRange = new vscode.Range(\n            testableRange.node.startPosition.row,\n            testableRange.node.startPosition.column,\n            testableRange.node.endPosition.row,\n            testableRange.node.endPosition.column\n        )\n\n        return [\n            this.createCommandCodeAction(\n                document,\n                editorRange,\n                `Cody: Generate Tests for ${testableSymbol.node.text}`\n            ),\n        ]\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/non-stop/FixupTask.ts:59-79"",""content"":""\n    constructor(\n        /**\n         * The file that will be updated by Cody with the replacement text at the end of stream\n         * This is set by the FixupController when creating the task,\n         * and will be updated by the FixupController for tasks using the 'new' mode\n         */\n        public fixupFile: FixupFile,\n        public readonly instruction: PromptString,\n        public readonly userContextItems: ContextItem[],\n        /* The intent of the edit, derived from the source of the command. */\n        public readonly intent: EditIntent,\n        /* The range being edited. This range is tracked and updates as the user (or Cody) edits code. */\n        public selectionRange: vscode.Range,\n        /* The mode indicates how code should be inserted */\n        public readonly mode: EditMode,\n        public readonly model: EditModel,\n        /* the source of the instruction, e.g. 'code-action', 'doc', etc */\n        public source?: EventSource,\n        /* The file to write the edit to. If not provided, the edit will be applied to the fixupFile. */\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/external-services.ts:27-61"",""content"":""    symfRunner: SymfRunner | undefined\n\n    /** Update configuration for all of the services in this interface. */\n    onConfigurationChange: (newConfig: ExternalServicesConfiguration) => void\n}\n\ntype ExternalServicesConfiguration = Pick<\n    ConfigurationWithAccessToken,\n    | 'serverEndpoint'\n    | 'codebase'\n    | 'useContext'\n    | 'customHeaders'\n    | 'accessToken'\n    | 'debugVerbose'\n    | 'experimentalTracing'\n> &\n    LocalEmbeddingsConfig &\n    ContextRankerConfig\n\nexport async function configureExternalServices(\n    context: vscode.ExtensionContext,\n    initialConfig: ExternalServicesConfiguration,\n    platform: Pick<\n        PlatformContext,\n        | 'createLocalEmbeddingsController'\n        | 'createCompletionsClient'\n        | 'createSentryService'\n        | 'createOpenTelemetryService'\n        | 'createSymfRunner'\n        | 'createContextRankingController'\n    >,\n    authProvider: AuthProvider\n): Promise<ExternalServices> {\n    const sentryService = platform.createSentryService?.(initialConfig)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/CodeActionProvider.ts:10-12"",""content"":""interface CodeActionProviderOptions {\n    contextProvider: ContextProvider\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-workspace.yaml:0-6"",""content"":""packages:\n  - agent\n  - cli\n  - lib/*\n  - vscode\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/explain.ts:7-21"",""content"":""    public provideCodeActions(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        context: vscode.CodeActionContext\n    ): vscode.CodeAction[] {\n        const diagnostics = context.diagnostics.filter(\n            diagnostic =>\n                diagnostic.severity === vscode.DiagnosticSeverity.Error ||\n                diagnostic.severity === vscode.DiagnosticSeverity.Warning\n        )\n        if (diagnostics.length === 0) {\n            return []\n        }\n        return [this.createCommandCodeAction(document.uri, diagnostics)]\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/evaluate-autocomplete/queries/typescript/context.scm:0-12"",""content"":"";; Inherits from javascript/context.scm\n\n((function_declaration\n   name: (_) @name\n   (formal_parameters (_ (type_annotation) @search)))\n (#search! \""type_identifier\""))\n\n((variable_declarator\n  name: (_) @name\n  type: (type_annotation) @search)\n (#search! \""type_identifier\""))\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/fixup.ts:14-45"",""content"":""    public async provideCodeActions(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        context: vscode.CodeActionContext\n    ): Promise<vscode.CodeAction[]> {\n        const diagnostics = context.diagnostics.filter(\n            diagnostic =>\n                diagnostic.severity === vscode.DiagnosticSeverity.Error ||\n                diagnostic.severity === vscode.DiagnosticSeverity.Warning\n        )\n        if (diagnostics.length === 0) {\n            return []\n        }\n\n        // Expand range to include the full line for better fixup quality\n        const expandedRange = new vscode.Range(\n            document.lineAt(range.start.line).range.start,\n            document.lineAt(range.end.line).range.end\n        )\n\n        // TODO bee check if the diagnostics are related to imports and include import ranges instead of error lines\n        // const importDiagnostics = diagnostics.filter(diagnostic => diagnostic.message.includes('import'))\n\n        // Expand range by getting the folding range contains the target (error) area\n        const targetAreaRange = await getSmartSelection(document.uri, range.start)\n\n        const newRange = targetAreaRange\n            ? new vscode.Range(targetAreaRange.start, targetAreaRange.end)\n            : expandedRange\n        const codeAction = await this.createCommandCodeAction(document, diagnostics, newRange)\n        return [codeAction]\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:433-461"",""content"":""\n            // wait for proc to finish\n            await new Promise<void>((resolve, reject) => {\n                proc.on('error', reject)\n                proc.on('exit', code => {\n                    if (code === 0) {\n                        resolve()\n                    } else {\n                        reject(new Error(`symf exited with code ${code}`))\n                    }\n                })\n            })\n\n            // move just-built index to index path\n            await rm(indexDir.fsPath, { recursive: true }).catch(() => undefined)\n            await mkdirp(uriDirname(indexDir).fsPath)\n            await rename(tmpIndexDir.fsPath, indexDir.fsPath)\n        } catch (error) {\n            if (wasCancelled) {\n                throw new vscode.CancellationError()\n            }\n            throw toSymfError(error)\n        } finally {\n            if (onExit) {\n                process.removeListener('exit', onExit)\n            }\n            vscode.Disposable.from(...disposeOnFinish).dispose()\n            await rm(tmpIndexDir.fsPath, { recursive: true, force: true })\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/edit.ts:7-29"",""content"":""    public provideCodeActions(document: vscode.TextDocument): vscode.CodeAction[] {\n        const editor = vscode.window.activeTextEditor\n\n        if (!editor) {\n            return []\n        }\n\n        if (\n            editor.selection.isEmpty &&\n            !document.lineAt(editor.selection.start.line).isEmptyOrWhitespace\n        ) {\n            // Empty selection but a non-empty line, show nothing as the user likely won't want to generate here.\n            return []\n        }\n\n        if (editor.selection.isEmpty) {\n            // Empty selection and empty line, show generate action\n            return [this.createGenerateCodeAction(document, editor.selection)]\n        }\n\n        // Non-empty selection, show edit action\n        return [this.createEditCommandCodeAction(document, editor.selection)]\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/CodebaseStatusProvider.ts:179-183"",""content"":""        this.symfIndexStatus = newSymfStatus\n        return didSymfStatusChange\n    }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/CodeActionProvider.ts:14-54"",""content"":""export class CodeActionProvider implements vscode.Disposable {\n    private configurationChangeListener: vscode.Disposable\n    private actionProviders: vscode.Disposable[] = []\n\n    constructor(options: CodeActionProviderOptions) {\n        this.registerCodeActions(options.contextProvider.config)\n        this.configurationChangeListener = options.contextProvider.configurationChangeEvent.event(() => {\n            this.registerCodeActions(options.contextProvider.config)\n        })\n    }\n\n    private registerCodeActions(config: Omit<Config, 'codebase'>): void {\n        vscode.Disposable.from(...this.actionProviders).dispose()\n        this.actionProviders = []\n\n        if (!config.codeActions) {\n            return\n        }\n\n        this.addActionProvider(TestCodeAction)\n        this.addActionProvider(DocumentCodeAction)\n        this.addActionProvider(EditCodeAction)\n        this.addActionProvider(ExplainCodeAction)\n        this.addActionProvider(FixupCodeAction)\n    }\n\n    private addActionProvider(ActionType: {\n        new (): vscode.CodeActionProvider\n        providedCodeActionKinds: vscode.CodeActionKind[]\n    }): void {\n        const provider = vscode.languages.registerCodeActionsProvider('*', new ActionType(), {\n            providedCodeActionKinds: ActionType.providedCodeActionKinds,\n        })\n        this.actionProviders.push(provider)\n    }\n\n    public dispose(): void {\n        this.configurationChangeListener.dispose()\n        vscode.Disposable.from(...this.actionProviders).dispose()\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/main.ts:261-285"",""content"":""    }\n\n    // Register tree views\n    disposables.push(\n        chatManager,\n        vscode.window.registerWebviewViewProvider('cody.chat', chatManager.sidebarViewController, {\n            webviewOptions: { retainContextWhenHidden: true },\n        }),\n        // Update external services when configurationChangeEvent is fired by chatProvider\n        contextProvider.configurationChangeEvent.event(async () => {\n            const newConfig = await getFullConfig()\n            await onConfigurationChange(newConfig)\n        })\n    )\n\n    const statusBar = createStatusBar()\n\n    // Important to respect `config.experimentalSymfContext`. The agent\n    // currently crashes with a cryptic error when running with symf enabled so\n    // we need a way to reliably disable symf until we fix the root problem.\n    if (symfRunner && config.experimentalSymfContext) {\n        const searchViewProvider = new SearchViewProvider(context.extensionUri, symfRunner)\n        disposables.push(searchViewProvider)\n        searchViewProvider.initialize()\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:91-109"",""content"":""    private async getSymfInfo(): Promise<{\n        symfPath: string\n        serverEndpoint: string\n        accessToken: string\n    }> {\n        const accessToken = this.authToken\n        if (!accessToken) {\n            throw new Error('SymfRunner.getResults: No access token')\n        }\n        const serverEndpoint = this.sourcegraphServerEndpoint\n        if (!serverEndpoint) {\n            throw new Error('SymfRunner.getResults: No Sourcegraph server endpoint')\n        }\n        const symfPath = await getSymfPath(this.context)\n        if (!symfPath) {\n            throw new Error('No symf executable')\n        }\n        return { accessToken, serverEndpoint, symfPath }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:0-27"",""content"":""import * as fs from 'node:fs'\nimport fspromises from 'node:fs/promises'\nimport * as os from 'node:os'\nimport * as path from 'node:path'\n\nimport axios from 'axios'\nimport * as unzipper from 'unzipper'\nimport * as vscode from 'vscode'\n\nimport { Mutex } from 'async-mutex'\nimport { logDebug } from '../log'\nimport { getOSArch } from '../os'\nimport { captureException } from '../services/sentry/sentry'\n\nconst symfVersion = 'v0.0.9'\n\n/**\n * Get the path to `symf`. If the symf binary is not found, download it.\n */\nexport async function getSymfPath(context: vscode.ExtensionContext): Promise<string | null> {\n    // If user-specified symf path is set, use that\n    const config = vscode.workspace.getConfiguration()\n    const userSymfPath = config.get<string>('cody.experimental.symf.path')\n    if (userSymfPath) {\n        logDebug('symf', `using user symf: ${userSymfPath}`)\n        return userSymfPath\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/recordings/enterpriseClient_3965582033/recording.har.yaml:153-182"",""content"":""\n\n                  ## Debugging the agent\n\n\n                  ```\n              - speaker: assistant\n                text: Ok.\n              - speaker: human\n                text: >-\n                  Codebase context from file\n                  /agent/src/__tests__/example-ts/src/squirrel.ts in repository\n                  github.com/sourcegraph/cody:\n\n                  ```typescript\n\n                  /**\n                   * Squirrel is an interface that mocks something completely unrelated to squirrels.\n                   * It is related to the implementation of precise code navigation in Sourcegraph.\n                   */\n                  export interface Squirrel {}\n\n                  ```\n              - speaker: assistant\n                text: Ok.\n              - speaker: human\n                text: >-\n                  Codebase context from file /.bazelignore in repository\n                  github.com/sourcegraph/sourcegraph:\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/utils/code-count.test.ts:0-57"",""content"":""import { describe, expect, it } from 'vitest'\n\nimport { countCode, matchCodeSnippets } from './code-count'\n\ndescribe('countCode', () => {\n    it('counts lines correctly', () => {\n        const code = `line1\n  line2\n  line3`\n        const result = countCode(code)\n        expect(result.lineCount).toBe(3)\n    })\n\n    it('counts characters correctly', () => {\n        const code = 'foo bar'\n        const result = countCode(code)\n        expect(result.charCount).toBe(7)\n    })\n\n    it('handles windows line endings', () => {\n        const code = 'line1\\r\\nline2\\r\\nline3'\n        const result = countCode(code)\n        expect(result.lineCount).toBe(3)\n    })\n\n    it('handles empty string', () => {\n        const code = ''\n        const result = countCode(code)\n        expect(result.lineCount).toBe(1)\n        expect(result.charCount).toBe(0)\n    })\n})\n\ndescribe('matchCodeSnippets', () => {\n    it('returns false if either input is empty', () => {\n        expect(matchCodeSnippets('', 'foo')).toBe(false)\n        expect(matchCodeSnippets('foo', '')).toBe(false)\n    })\n\n    it('returns true if inputs match without whitespace', () => {\n        const copied = 'foo\\nbar'\n        const changed = 'foobar'\n        expect(matchCodeSnippets(copied, changed)).toBe(true)\n    })\n\n    it('returns false if inputs do not match without whitespace', () => {\n        const copied = 'foo\\nbar'\n        const changed = 'foobaz'\n        expect(matchCodeSnippets(copied, changed)).toBe(false)\n    })\n\n    it('handles trailing whitespace correctly', () => {\n        const copied = 'foo '\n        const changed = 'foo'\n        expect(matchCodeSnippets(copied, changed)).toBe(true)\n    })\n})\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:1531-1567"",""content"":""            Module = 29,\n            Namespace = 30,\n            Null = 31,\n            Number = 32,\n            Object = 33,\n            Operator = 34,\n            Package = 35,\n            PackageObject = 36,\n            Parameter = 37,\n            ParameterLabel = 38,\n            Pattern = 39,\n            Predicate = 40,\n            Property = 41,\n            Protocol = 42,\n            ProtocolMethod = 68,\n            PureVirtualMethod = 69,\n            Quasiquoter = 43,\n            SelfParameter = 44,\n            Setter = 45,\n            Signature = 46,\n            SingletonClass = 75,\n            SingletonMethod = 76,\n            StaticDataMember = 77,\n            StaticEvent = 78,\n            StaticField = 79,\n            StaticMethod = 80,\n            StaticProperty = 81,\n            StaticVariable = 82,\n            String = 48,\n            Struct = 49,\n            Subscript = 47,\n            Tactic = 50,\n            Theorem = 51,\n            ThisParameter = 52,\n            Trait = 53,\n            TraitMethod = 70,\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/code-lenses.ts:0-203"",""content"":""import * as vscode from 'vscode'\nimport { getEditor } from '../../editor/active-editor'\nimport { getDocumentSections } from '../../editor/utils/document-sections'\nimport { telemetryService } from '../../services/telemetry'\nimport { telemetryRecorder } from '../../services/telemetry-v2'\nimport { isValidTestFile } from '../utils/test-commands'\n\ninterface EditorCodeLens {\n    name: string\n    selection: vscode.Selection\n}\n\n/**\n * Adds Code lenses for triggering Command Menu\n */\nexport class CommandCodeLenses implements vscode.CodeLensProvider {\n    private isEnabled = false\n    private addTestEnabled = false\n\n    private _disposables: vscode.Disposable[] = []\n    private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>()\n    public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event\n    constructor() {\n        this.provideCodeLenses = this.provideCodeLenses.bind(this)\n        this.updateConfig()\n\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('cody')) {\n                this.updateConfig()\n            }\n        })\n    }\n\n    /**\n     * init\n     */\n    private init(): void {\n        if (!this.isEnabled) {\n            return\n        }\n        this._disposables.push(vscode.languages.registerCodeLensProvider({ scheme: 'file' }, this))\n        this._disposables.push(\n            vscode.commands.registerCommand('cody.editor.codelens.click', async lens => {\n                telemetryService.log('CodyVSCodeExtension:command:codelens:clicked')\n                telemetryRecorder.recordEvent('cody.command.codelens', 'clicked')\n                const clickedLens = lens as EditorCodeLens\n                await this.onCodeLensClick(clickedLens)\n            })\n        )\n        // on change events for toggling\n        this._disposables.push(\n            vscode.window.onDidChangeVisibleTextEditors(() => this.fire()),\n            vscode.window.onDidChangeActiveTextEditor(() => this.fire())\n        )\n    }\n\n    /**\n     * Update the configurations\n     */\n    private updateConfig(): void {\n        const config = vscode.workspace.getConfiguration('cody')\n        this.isEnabled = config.get('commandCodeLenses') as boolean\n        this.addTestEnabled = config.get('internal.unstable') as boolean\n\n        if (this.isEnabled && !this._disposables.length) {\n            this.init()\n        }\n        this.fire()\n    }\n\n    /**\n     * Gets the code lenses for the specified document.\n     */\n    public async provideCodeLenses(\n        document: vscode.TextDocument,\n        token: vscode.CancellationToken\n    ): Promise<vscode.CodeLens[]> {\n        if (!this.isEnabled) {\n            return []\n        }\n\n        token.onCancellationRequested(() => [])\n        const editor = getEditor()?.active\n        if (editor?.document !== document || document.languageId === 'json') {\n            return []\n        }\n\n        // For test files, adds code lenses for each symbol\n        if (this.addTestEnabled && isValidTestFile(document.uri)) {\n            return await this.provideCodeLensesForSymbols(document.uri)\n        }\n\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        const smartRanges = await getDocumentSections(document)\n        for (const range of smartRanges) {\n            if (linesWithLenses.has(range.start)) {\n                continue\n            }\n            const selection = new vscode.Selection(range.start, range.end)\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.cody,\n                    arguments: [{ name: 'cody.menu.commands', selection }],\n                })\n            )\n\n            linesWithLenses.add(range.start.line)\n        }\n\n        return codeLenses\n    }\n\n    private async provideCodeLensesForSymbols(doc: vscode.Uri): Promise<vscode.CodeLens[]> {\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        // Get a list of symbols from the document, filter out symbols that are not functions / classes / methods\n        const allSymbols = await vscode.commands.executeCommand<vscode.SymbolInformation[]>(\n            'vscode.executeDocumentSymbolProvider',\n            doc\n        )\n        const symbols =\n            allSymbols?.filter(\n                symbol =>\n                    symbol.kind === vscode.SymbolKind.Function ||\n                    symbol.kind === vscode.SymbolKind.Class ||\n                    symbol.kind === vscode.SymbolKind.Method ||\n                    symbol.kind === vscode.SymbolKind.Constructor\n            ) ?? []\n\n        for (const symbol of symbols) {\n            const range = symbol.location.range\n            const startLine = range.start.line\n            if (linesWithLenses.has(startLine)) {\n                continue\n            }\n\n            const selection = new vscode.Selection(startLine, 0, range.end.line + 1, 0)\n\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.test,\n                    arguments: [{ name: 'cody.command.tests-cases', selection }],\n                })\n            )\n\n            linesWithLenses.add(startLine)\n        }\n\n        return codeLenses\n    }\n\n    /**\n     * Handle the code lens click event\n     */\n    private async onCodeLensClick(lens: EditorCodeLens): Promise<void> {\n        // Update selection in active editor to the selection of the clicked code lens\n        const activeEditor = getEditor().active\n        if (activeEditor) {\n            activeEditor.selection = lens.selection\n        }\n        await vscode.commands.executeCommand(lens.name, 'codeLens')\n    }\n\n    /**\n     * Fire an event to notify VS Code that the code lenses have changed.\n     */\n    public fire(): void {\n        if (!this.isEnabled) {\n            this.dispose()\n            return\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n\n    /**\n     * Dispose the disposables\n     */\n    public dispose(): void {\n        if (this._disposables.length) {\n            for (const disposable of this._disposables) {\n                disposable.dispose()\n            }\n            this._disposables = []\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n}\n\nconst commandLenses = {\n    cody: {\n        title: '$(cody-logo) Cody',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Open command menu',\n    },\n    test: {\n        title: '$(cody-logo) Add More Tests',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Generate new test cases',\n    },\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration.test.ts:48-70"",""content"":""                        return true\n                    case 'cody.experimental.symf.path':\n                        return '/usr/local/bin/symf'\n                    case 'cody.experimental.simpleChatContext':\n                        return true\n                    case 'cody.experimental.symfContext':\n                        return true\n                    case 'cody.experimental.tracing':\n                        return true\n                    case 'cody.debug.verbose':\n                        return true\n                    case 'cody.debug.filter':\n                        return /.*/\n                    case 'cody.telemetry.level':\n                        return 'off'\n                    case 'cody.chat.preInstruction':\n                        return 'My name is Jeff.'\n                    case 'cody.edit.preInstruction':\n                        return 'My name is not Jeff.'\n                    case 'cody.autocomplete.advanced.provider':\n                        return 'unstable-openai'\n                    case 'cody.autocomplete.advanced.model':\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/code-actions.test.ts:0-73"",""content"":""import * as mockServer from '../fixtures/mock-server'\n\nimport { sidebarExplorer, sidebarSignin } from './common'\nimport { type DotcomUrlOverride, type ExpectedEvents, test as baseTest } from './helpers'\n\nconst test = baseTest.extend<DotcomUrlOverride>({ dotcomUrl: mockServer.SERVER_URL })\n\nconst ERROR_DECORATION_SELECTOR = 'div.view-overlays[role=\""presentation\""] div[class*=\""squiggly-error\""]'\n\ntest.extend<ExpectedEvents>({\n    // list of events we expect this test to log, add to this list as needed\n    expectedEvents: [\n        'CodyVSCodeExtension:chat-question:submitted',\n        'CodyVSCodeExtension:chat-question:executed',\n    ],\n})('code action: explain', async ({ page, sidebar }) => {\n    // Sign into Cody\n    await sidebarSignin(page, sidebar)\n\n    // Open the Explorer view from the sidebar\n    await sidebarExplorer(page).click()\n    // Open the error.ts file from the tree view\n    await page.getByRole('treeitem', { name: 'error.ts' }).locator('a').click()\n    // Wait for error.ts to fully open\n    await page.getByRole('tab', { name: 'error.ts' }).hover()\n\n    // Remove the comment that suppresses the type error\n    await page.getByText('// @ts-nocheck').click({ clickCount: 3 })\n    await page.keyboard.press('Backspace')\n\n    // Activate the code action on the erred text\n    const erredText = page.getByText('logNumber').nth(1)\n    await page.waitForSelector(ERROR_DECORATION_SELECTOR)\n    await erredText.click()\n    await erredText.hover()\n    await page.getByRole('button', { name: /Quick Fix/ }).click()\n    // Get by text takes a very long time, it's faster to type and let the quick fix item be focused\n    await page.keyboard.type('Explain')\n    await page.keyboard.press('Enter')\n})\n\ntest.extend<ExpectedEvents>({\n    // list of events we expect this test to log, add to this list as needed\n    expectedEvents: [\n        'CodyVSCodeExtension:command:fix:executed',\n        'CodyVSCodeExtension:fixupResponse:hasCode',\n        'CodyVSCodeExtension:fixup:applied',\n    ],\n})('code action: fix', async ({ page, sidebar }) => {\n    // Sign into Cody\n    await sidebarSignin(page, sidebar)\n\n    // Open the Explorer view from the sidebar\n    await sidebarExplorer(page).click()\n    // Open the error.ts file from the tree view\n    await page.getByRole('treeitem', { name: 'error.ts' }).locator('a').click()\n    // Wait for error.ts to fully open\n    await page.getByRole('tab', { name: 'error.ts' }).hover()\n\n    // Remove the comment that suppresses the type error\n    await page.getByText('// @ts-nocheck').click({ clickCount: 3 })\n    await page.keyboard.press('Backspace')\n\n    // Activate the code action on the erred text\n    const erredText = page.getByText('logNumber').nth(1)\n    await page.waitForSelector(ERROR_DECORATION_SELECTOR)\n    await erredText.click()\n    await erredText.hover()\n    await page.getByRole('button', { name: /Quick Fix/ }).click()\n    // Get by text takes a very long time, it's faster to type and let the quick fix item be focused\n    await page.keyboard.type('Fix')\n    await page.keyboard.press('Enter')\n})\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/package.json:29-63"",""content"":""    \""update-symf-recordings\"": \""rm -rf recordings && CODY_RECORD_IF_MISSING=true vitest vscode/src/local-context/symf.test.ts\""\n  },\n  \""devDependencies\"": {\n    \""@biomejs/biome\"": \""1.5.2\"",\n    \""@sourcegraph/tsconfig\"": \""^4.0.1\"",\n    \""@storybook/addon-essentials\"": \""^8.0.5\"",\n    \""@storybook/react\"": \""^8.0.5\"",\n    \""@storybook/react-vite\"": \""^8.0.5\"",\n    \""@testing-library/jest-dom\"": \""^6.4.2\"",\n    \""@testing-library/react\"": \""^14.2.2\"",\n    \""@types/node\"": \""20.12.7\"",\n    \""@types/react\"": \""18.2.79\"",\n    \""@types/react-dom\"": \""18.2.25\"",\n    \""@vitejs/plugin-react\"": \""^4.2.1\"",\n    \""esbuild\"": \""^0.18.20\"",\n    \""happy-dom\"": \""^14.3.10\"",\n    \""jsdom\"": \""^22.1.0\"",\n    \""knip\"": \""^3.13.2\"",\n    \""storybook\"": \""^8.0.5\"",\n    \""stylelint\"": \""^15.11.0\"",\n    \""stylelint-config-standard\"": \""^34.0.0\"",\n    \""ts-node\"": \""^10.9.2\"",\n    \""typescript\"": \""^5.4.2\"",\n    \""vite\"": \""^5.2.9\"",\n    \""vitest\"": \""^1.5.0\""\n  },\n  \""dependencies\"": {\n    \""ignore\"": \""^5.3.1\"",\n    \""react\"": \""18.2.0\"",\n    \""react-dom\"": \""18.2.0\""\n  },\n  \""packageManager\"": \""pnpm@8.6.7\"",\n  \""resolutions\"": {\n    \""tslib\"": \""2.1.0\""\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/utils/code-count.ts:0-21"",""content"":""export function countCode(code: string): { lineCount: number; charCount: number } {\n    const lineCount = code.split(/\\r\\n|\\r|\\n/).length\n    const charCount = code.length\n    return { lineCount, charCount }\n}\n\n/**\n * Handle edge cases for code snippets where code is not pasted correctly\n * or code is multiline and the formatting is changed on paste\n */\nexport function matchCodeSnippets(copiedText: string, text: string): boolean {\n    if (!text || !copiedText) {\n        return false\n    }\n    // Code can be multiline, so we need to remove all new lines and spaces\n    // from the copied code and changed text as formatting on paste may change the spacing\n    const copiedTextNoSpace = copiedText.replaceAll(/\\s/g, '')\n    const textNoSpace = text?.replace(/\\s/g, '')\n    // check if the copied code is the same as the changed text without spaces\n    return copiedTextNoSpace === textNoSpace\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/symf.ts:67-102"",""content"":""\n        if (!isFileURI(indexRoot)) {\n            throw new Error('symf only supports running on the file system')\n        }\n        this.indexRoot = indexRoot\n    }\n\n    public dispose(): void {\n        this.status.dispose()\n    }\n\n    public onIndexStart(cb: (e: IndexStartEvent) => void): vscode.Disposable {\n        return this.status.onDidStart(cb)\n    }\n\n    public onIndexEnd(cb: (e: IndexEndEvent) => void): vscode.Disposable {\n        return this.status.onDidEnd(cb)\n    }\n\n    public setSourcegraphAuth(endpoint: string | null, authToken: string | null): void {\n        this.sourcegraphServerEndpoint = endpoint\n        this.authToken = authToken\n    }\n\n    private async getSymfInfo(): Promise<{\n        symfPath: string\n        serverEndpoint: string\n        accessToken: string\n    }> {\n        const accessToken = this.authToken\n        if (!accessToken) {\n            throw new Error('SymfRunner.getResults: No access token')\n        }\n        const serverEndpoint = this.sourcegraphServerEndpoint\n        if (!serverEndpoint) {\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2010-2012"",""content"":""        set code(value: string) {\n            pb_1.Message.setField(this, 2, value)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:55-80"",""content"":""\n    const symfFilename = `symf-${symfVersion}-${arch}-${platform}`\n    const symfUnzippedFilename = `symf-${arch}-${zigPlatform}` // the filename inside the zip\n    const symfPath = path.join(symfContainingDir, symfFilename)\n    if (await fileExists(symfPath)) {\n        logDebug('symf', `using downloaded symf \""${symfPath}\""`)\n        return symfPath\n    }\n\n    const symfURL = `https://github.com/sourcegraph/symf/releases/download/${symfVersion}/symf-${arch}-${zigPlatform}.zip`\n\n    // Download symf binary with vscode progress api\n    try {\n        await downloadLock.acquire()\n        // Re-check if it has been downloaded\n        if (await fileExists(symfPath)) {\n            logDebug('symf', 'symf already downloaded, reusing')\n            return symfPath\n        }\n\n        await actualDownloadSymf({ symfPath, symfURL, symfFilename, symfUnzippedFilename })\n        void removeOldSymfBinaries(symfContainingDir, symfFilename)\n    } catch (error) {\n        captureException(error)\n        void vscode.window.showErrorMessage(`Failed to download symf: ${error}`)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:164-170"",""content"":""async function removeOldSymfBinaries(containingDir: string, currentSymfPath: string): Promise<void> {\n    const symfDirContents = await fspromises.readdir(containingDir)\n    const oldSymfBinaries = symfDirContents.filter(f => f.startsWith('symf-') && f !== currentSymfPath)\n    for (const oldSymfBinary of oldSymfBinaries) {\n        await fspromises.rm(path.join(containingDir, oldSymfBinary))\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/download-symf.ts:27-55"",""content"":""\n    const symfContainingDir = path.join(context.globalStorageUri.fsPath, 'symf')\n    return await _getSymfPath(symfContainingDir)\n}\n\nconst downloadLock = new Mutex()\n\nexport async function _getSymfPath(\n    symfContainingDir: string,\n    actualDownloadSymf: (op: {\n        symfPath: string\n        symfFilename: string\n        symfUnzippedFilename: string\n        symfURL: string\n    }) => Promise<void> = downloadSymf\n): Promise<string | null> {\n    const { platform, arch } = getOSArch()\n    if (!platform || !arch) {\n        // show vs code error message\n        void vscode.window.showErrorMessage(\n            `No symf binary available for ${os.platform()}/${os.machine()}`\n        )\n        return null\n    }\n    // Releases (eg at https://github.com/sourcegraph/symf/releases) are named with the Zig platform\n    // identifier (linux-musl, windows-gnu, macos).\n    const zigPlatform =\n        platform === 'linux' ? 'linux-musl' : platform === 'windows' ? 'windows-gnu' : platform\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_022/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_023/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the provided codebase context, the code that enforces the context length limit appears to be in the following files:

1. `cody_test/vscode/src/completions/context/context-mixer.ts`: This file contains the `GetContextOptions` interface, which has a `maxChars` property that likely represents the maximum number of characters allowed for the context.

2. `cody_test/lib/shared/src/prompt/truncation.ts`: This file contains the `truncateTextNearestLine` function, which truncates text to a given maximum number of bytes while trying to preserve line breaks.

3. `cody_test/lib/shared/src/token/constants.ts`: This file defines various constants related to token budgets and context window sizes, such as `CHAT_INPUT_TOKEN_BUDGET`, `FAST_CHAT_INPUT_TOKEN_BUDGET`, and `EXPERIMENTAL_USER_CONTEXT_TOKEN_BUDGET`.

4. `mocked/enhanced_context/limit.go`: This file contains Go code related to rate limiting and concurrency limiting, which could be used to enforce context length limits based on certain conditions or configurations.

5. `mocked/codebase_context/limit.go`: This file contains the `limitMatches`, `limitChunkMatches`, and `limitLineMatches` functions, which seem to be responsible for limiting the number of matches or lines included in the context based on a specified limit.

While the exact implementation details are not fully clear from the provided context, these files appear to be involved in enforcing context length limits, either by truncating the text, limiting the number of matches or lines, or enforcing token budgets or rate limits.",Where is the code that enforces the context length limit?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/limit.go:132-134"",""content"":""func (l *concurrencyLimiter) Usage(ctx context.Context) (int, time.Time, error) {\n\treturn l.nextLimiter.Usage(ctx)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/directory.ts:49-74"",""content"":""\n                // check file size before opening the file. skip file if it's larger than 1MB\n                const fileSize = await vscode.workspace.fs.stat(fileUri)\n                if (fileSize.size > 1000000 || !fileSize.size) {\n                    continue\n                }\n\n                const bytes = await vscode.workspace.fs.readFile(fileUri)\n                const content = new TextDecoder('utf-8').decode(bytes)\n                const range = new vscode.Range(0, 0, content.split('\\n').length - 1 || 0, 0)\n                const size = TokenCounter.countTokens(content)\n\n                contextFiles.push({\n                    type: 'file',\n                    uri: fileUri,\n                    content,\n                    source: ContextItemSource.Editor,\n                    range,\n                    size,\n                })\n\n                // Limit the number of files to 10\n                const maxResults = 10\n                if (contextFiles.length >= maxResults) {\n                    return contextFiles\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/limit.go:164-169"",""content"":""type updateOnErrorLimiter struct {\n\tlogger log.Logger\n\tactor  *Actor\n\n\tnextLimiter limiter.Limiter\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/AgentTextDocument.ts:91-122"",""content"":""            ),\n            rangeIncludingLineBreak: new vscode_shim.Range(\n                new vscode_shim.Position(line, 0),\n                new vscode_shim.Position(line, text.length + this.offsets.newlineLength(line))\n            ),\n            text,\n        }\n    }\n\n    public offsetAt(position: vscode.Position | protocol.Position): number {\n        return this.offsets.offset(position)\n    }\n\n    public protocolOffsetAt(position: protocol.Position): number {\n        return this.offsets.offset(position)\n    }\n\n    public positionAt(offset: number): vscode.Position {\n        const { line, character } = this.offsets.position(offset)\n        return new vscode_shim.Position(line, character)\n    }\n\n    public getText(range?: vscode.Range | undefined): string {\n        if (range === undefined) {\n            return this.content\n        }\n        const start = this.offsets.offset(range.start)\n        const end = this.offsets.offset(range.end)\n        const text = this.content.slice(start, end)\n        return text\n    }\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/limit.go:61-63"",""content"":""func (r *RateLimit) IsValid() bool {\n\treturn r != nil && r.Interval > 0 && r.Limit > 0 && len(r.AllowedModels) > 0\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:38-88"",""content"":""\n    /**\n     * The token count of the item's content.\n     */\n    size?: number\n\n    /**\n     * Whether the content of the item is too large to be included as context.\n     */\n    isTooLarge?: boolean\n}\n\n/**\n * The source of this context.\n */\nexport enum ContextItemSource {\n    /** From embeddings search */\n    Embeddings = 'embeddings',\n\n    /** Explicitly @-mentioned by the user in chat */\n    User = 'user',\n\n    /** From local keyword search */\n    Keyword = 'keyword',\n\n    /** From the current editor state and open tabs/documents */\n    Editor = 'editor',\n\n    Filename = 'filename',\n\n    /** From symf search */\n    Search = 'search',\n\n    /** Remote search */\n    Unified = 'unified',\n\n    /** Selected code from the current editor */\n    Selection = 'selection',\n\n    /** Output from the terminal */\n    Terminal = 'terminal',\n\n    /** From URI */\n    Uri = 'uri',\n}\n\n/**\n * An item (such as a file or symbol) that is included as context in a chat message.\n */\nexport type ContextItem = ContextItemFile | ContextItemSymbol\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/codebase_context/limit.go:129-143"",""content"":""func limitLineMatches(file *FileMatch, limit int) int {\n\tfor i := range file.LineMatches {\n\t\tlm := &file.LineMatches[i]\n\t\tif len(lm.LineFragments) > limit {\n\t\t\tlm.LineFragments = lm.LineFragments[:limit]\n\t\t}\n\t\tif len(lm.LineFragments) == limit {\n\t\t\tfile.LineMatches = file.LineMatches[:i+1]\n\t\t\tlimit = 0\n\t\t\tbreak\n\t\t}\n\t\tlimit -= len(lm.LineFragments)\n\t}\n\treturn limit\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/token/constants.ts:0-40"",""content"":""/**\n * The default context window for chat models.\n */\nexport const CHAT_INPUT_TOKEN_BUDGET = 7000\n\n/**\n * The default context window for fast chat models with a smaller context window.\n */\nexport const FAST_CHAT_INPUT_TOKEN_BUDGET = 4096\n\n/**\n * The default output token limit for chat models.\n */\nexport const CHAT_OUTPUT_TOKEN_BUDGET = 4000\n\n/**\n * Enhanced context takes up to 60% of the total context window for chat.\n * The % is the same for both fast and regular chat models.\n */\nexport const ENHANCED_CONTEXT_ALLOCATION = 0.6\n\n/**\n * NOTE: DotCom users with FeatureFlag.CodyChatContextBudget enabled for A/B testing only.\n *\n * The total context window reserved for user added context (@-mention, right-click, etc.)\n *\n * This is only being used for Claude-3 Sonnet and Opus when feature flag is enabled.\n * For those models, this is added on top of the chat context window.\n * For other models, this number is not used. Instead, they will share\n * the token budget for user-context with the chat context window.\n */\nexport const EXPERIMENTAL_USER_CONTEXT_TOKEN_BUDGET = 30000\n\n/**\n * NOTE: DotCom users with FeatureFlag.CodyChatContextBudget enabled for A/B testing only.\n *\n * The total context window reserved for chat input.\n */\nexport const EXPERIMENTAL_CHAT_INPUT_TOKEN_BUDGET = 15000\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/codebase_context/limit.go:80-125"",""content"":""func limitChunkMatches(file *FileMatch, limit int) int {\n\tfor i := range file.ChunkMatches {\n\t\tcm := &file.ChunkMatches[i]\n\t\tif len(cm.Ranges) > limit {\n\t\t\t// We potentially need to effect the limit upon 3 different fields:\n\t\t\t// Ranges, SymbolInfo, and Content.\n\n\t\t\t// Content is the most complicated: we need to remove the last N\n\t\t\t// lines from it, where N is the difference between the line number\n\t\t\t// of the end of the old last Range and that of the new last Range.\n\t\t\t// This calculation is correct in the presence of both context lines\n\t\t\t// and multiline Ranges, taking into account that Content never has\n\t\t\t// a trailing newline.\n\t\t\tn := cm.Ranges[len(cm.Ranges)-1].End.LineNumber - cm.Ranges[limit-1].End.LineNumber\n\t\t\tif n > 0 {\n\t\t\t\tfor b := len(cm.Content) - 1; b >= 0; b-- {\n\t\t\t\t\tif cm.Content[b] == '\\n' {\n\t\t\t\t\t\tn -= 1\n\t\t\t\t\t}\n\t\t\t\t\tif n == 0 {\n\t\t\t\t\t\tcm.Content = cm.Content[:b]\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif n > 0 {\n\t\t\t\t\t// Should be impossible.\n\t\t\t\t\tlog.Panicf(\""Failed to find enough newlines when truncating Content, %d left over, %d ranges\"", n, len(cm.Ranges))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcm.Ranges = cm.Ranges[:limit]\n\t\t\tif cm.SymbolInfo != nil {\n\t\t\t\t// When non-nil, SymbolInfo is specified to have the same length\n\t\t\t\t// as Ranges.\n\t\t\t\tcm.SymbolInfo = cm.SymbolInfo[:limit]\n\t\t\t}\n\t\t}\n\t\tif len(cm.Ranges) == limit {\n\t\t\tfile.ChunkMatches = file.ChunkMatches[:i+1]\n\t\t\tlimit = 0\n\t\t\tbreak\n\t\t}\n\t\tlimit -= len(cm.Ranges)\n\t}\n\treturn limit\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/file-path.ts:0-43"",""content"":""import {\n    type ContextItem,\n    ContextItemSource,\n    TokenCounter,\n    logError,\n    wrapInActiveSpan,\n} from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\nimport type { URI } from 'vscode-uri'\n\n/**\n * Generate ContextFile for a file URI.\n */\nexport async function getContextFileFromUri(file: URI, range?: vscode.Range): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.filePath', async span => {\n        try {\n            const doc = await vscode.workspace.openTextDocument(file)\n            const content = doc?.getText(range).trim()\n            if (!content) {\n                throw new Error('No file content')\n            }\n\n            const startLine = range?.start?.line ?? 0\n            range = new vscode.Range(startLine, 0, startLine + content.split('\\n').length, 0)\n            const size = TokenCounter.countTokens(content)\n\n            return [\n                {\n                    type: 'file',\n                    content,\n                    uri: file,\n                    source: ContextItemSource.Editor,\n                    range,\n                    size,\n                },\n            ] satisfies ContextItem[]\n        } catch (error) {\n            logError('getContextFileFromUri', 'failed', { verbose: error })\n            return []\n        }\n    })\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/limit.go:85-99"",""content"":""type concurrencyLimiter struct {\n\tlogger  log.Logger\n\tactor   *Actor\n\tfeature codygateway.Feature\n\n\t// redis must be a prefixed store\n\tredis limiter.RedisStore\n\n\tconcurrentRequests int\n\tconcurrentInterval time.Duration\n\n\tnextLimiter limiter.Limiter\n\n\tnowFunc func() time.Time\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/workspace.ts:22-51"",""content"":""\n        const contextFiles: ContextItem[] = []\n\n        // set cancellation token to time out after 20s\n        const token = new CancellationTokenSource()\n        setTimeout(() => {\n            token.cancel()\n        }, 20000)\n\n        try {\n            const results = await workspace.findFiles(globalPattern, excluded, maxResults, token.token)\n\n            for (const result of results) {\n                const decoded = await getDocText(result)\n                const contextFile = await createContextFile(result, decoded)\n\n                if (contextFile) {\n                    contextFiles.push(contextFile)\n                }\n            }\n\n            return contextFiles\n        } catch (error) {\n            logError('getWorkspaceFilesContext failed', `${error}`)\n\n            return contextFiles\n        }\n    })\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/limit.go:20-36"",""content"":""type RateLimit struct {\n\t// AllowedModels is a set of models in Cody Gateway's model configuration\n\t// format, \""$PROVIDER/$MODEL_NAME\"". A single-item slice with value '*' means\n\t// that all models in the 'master allowlist' are allowed.\n\t//\n\t// DO NOT USE DIRECTLY when enforcing permissions: use EvaluateAllowedModels(...)\n\t// instead.\n\tAllowedModels []string `json:\""allowedModels\""`\n\n\tLimit    int64         `json:\""limit\""`\n\tInterval time.Duration `json:\""interval\""`\n\n\t// ConcurrentRequests, ConcurrentRequestsInterval are generally applied\n\t// with NewRateLimitWithPercentageConcurrency.\n\tConcurrentRequests         int           `json:\""concurrentRequests\""`\n\tConcurrentRequestsInterval time.Duration `json:\""concurrentRequestsInterval\""`\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/fireworks.ts:175-199"",""content"":""        }\n\n        for (let snippetsToInclude = 0; snippetsToInclude < snippets.length + 1; snippetsToInclude++) {\n            if (snippetsToInclude > 0) {\n                const snippet = snippets[snippetsToInclude - 1]\n                const contextPrompts = PromptString.fromAutocompleteContextSnippet(snippet)\n\n                if (contextPrompts.symbol) {\n                    intro.push(\n                        ps`Additional documentation for \\`${contextPrompts.symbol}\\`:\\n\\n${contextPrompts.content}`\n                    )\n                } else {\n                    intro.push(\n                        ps`Here is a reference snippet of code from ${PromptString.fromDisplayPath(\n                            snippet.uri\n                        )}:\\n\\n${contextPrompts.content}`\n                    )\n                }\n            }\n\n            const introString = ps`${PromptString.join(\n                PromptString.join(intro, ps`\\n\\n`)\n                    .split('\\n')\n                    .map(line => ps`${languageConfig ? languageConfig.commentStart : ps`// `}${line}`),\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/context.ts:39-61"",""content"":""    const truncatedPrecedingText = truncatePromptStringStart(precedingText, MAX_CURRENT_FILE_TOKENS)\n    const truncatedFollowingText = truncatePromptString(followingText, MAX_CURRENT_FILE_TOKENS)\n\n    // Disable no case declarations because we get better type checking with a switch case\n    switch (intent) {\n        /**\n         * The context for the test intent is handled by the executeTestEditCommand function,\n         * we don't need to add additional context here to avoid duplication.\n         */\n        case 'test':\n            return []\n        /**\n         * Very broad set of possible instructions.\n         * Fetch context from the users' instructions and use context from current file.\n         * Include the following code from the current file.\n         * The preceding code is already included as part of the response to better guide the output.\n         */\n        case 'add': {\n            return [\n                {\n                    speaker: 'human',\n                    text: populateCodeGenerationContextTemplate(\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/codebase_context/limit.go:62-76"",""content"":""func limitMatches(files []FileMatch, limit int, chunkMatches bool) ([]FileMatch, int) {\n\tvar limiter func(file *FileMatch, limit int) int\n\tif chunkMatches {\n\t\tlimiter = limitChunkMatches\n\t} else {\n\t\tlimiter = limitLineMatches\n\t}\n\tfor i := range files {\n\t\tlimit = limiter(&files[i], limit)\n\t\tif limit <= 0 {\n\t\t\treturn files[:i+1], 0\n\t\t}\n\t}\n\treturn files, limit\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/provider.ts:27-57"",""content"":""\n    /**\n     * A string identifier for the provider config used in event logs.\n     */\n    identifier: string\n\n    /**\n     * Defines which model is used with the respective provider.\n     */\n    model: string\n}\n\ninterface ProviderContextSizeHints {\n    /** Total max length of all context (prefix + suffix + snippets). */\n    totalChars: number\n\n    /** Max length of the document prefix (text before the cursor). */\n    prefixChars: number\n\n    /** Max length of the document suffix (text after the cursor). */\n    suffixChars: number\n}\n\nexport function standardContextSizeHints(maxContextTokens: number): ProviderContextSizeHints {\n    return {\n        totalChars: Math.floor(tokensToChars(0.9 * maxContextTokens)), // keep 10% margin for preamble, etc.\n        prefixChars: Math.floor(tokensToChars(0.6 * maxContextTokens)),\n        suffixChars: Math.floor(tokensToChars(0.1 * maxContextTokens)),\n    }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/utils/code-count.test.ts:0-57"",""content"":""import { describe, expect, it } from 'vitest'\n\nimport { countCode, matchCodeSnippets } from './code-count'\n\ndescribe('countCode', () => {\n    it('counts lines correctly', () => {\n        const code = `line1\n  line2\n  line3`\n        const result = countCode(code)\n        expect(result.lineCount).toBe(3)\n    })\n\n    it('counts characters correctly', () => {\n        const code = 'foo bar'\n        const result = countCode(code)\n        expect(result.charCount).toBe(7)\n    })\n\n    it('handles windows line endings', () => {\n        const code = 'line1\\r\\nline2\\r\\nline3'\n        const result = countCode(code)\n        expect(result.lineCount).toBe(3)\n    })\n\n    it('handles empty string', () => {\n        const code = ''\n        const result = countCode(code)\n        expect(result.lineCount).toBe(1)\n        expect(result.charCount).toBe(0)\n    })\n})\n\ndescribe('matchCodeSnippets', () => {\n    it('returns false if either input is empty', () => {\n        expect(matchCodeSnippets('', 'foo')).toBe(false)\n        expect(matchCodeSnippets('foo', '')).toBe(false)\n    })\n\n    it('returns true if inputs match without whitespace', () => {\n        const copied = 'foo\\nbar'\n        const changed = 'foobar'\n        expect(matchCodeSnippets(copied, changed)).toBe(true)\n    })\n\n    it('returns false if inputs do not match without whitespace', () => {\n        const copied = 'foo\\nbar'\n        const changed = 'foobaz'\n        expect(matchCodeSnippets(copied, changed)).toBe(false)\n    })\n\n    it('handles trailing whitespace correctly', () => {\n        const copied = 'foo '\n        const changed = 'foo'\n        expect(matchCodeSnippets(copied, changed)).toBe(true)\n    })\n})\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/truncation.ts:25-60"",""content"":"" * which should be ignored anyway).\n */\nexport function truncateTextNearestLine(\n    text: string,\n    maxBytes: number\n): { truncated: string; range?: RangeData } {\n    if (text.length <= maxBytes) {\n        return { truncated: text }\n    }\n    const textMaxBytes = text.slice(0, maxBytes)\n    const textMaxBytesLines = textMaxBytes.split('\\n')\n    if (text.at(maxBytes) === '\\n' || text.at(maxBytes - 1) === '\\n') {\n        return {\n            truncated: textMaxBytes,\n            range: {\n                start: { line: 0, character: 0 },\n                end: { line: textMaxBytesLines.length, character: 0 },\n            },\n        }\n    }\n\n    const truncated = textMaxBytesLines.slice(0, -1).join('\\n')\n    return {\n        truncated,\n        range: {\n            start: { line: 0, character: 0 },\n            end: { line: textMaxBytesLines.length - 1, character: 0 },\n        },\n    }\n}\n\n/**\n * Truncates text to the given number of tokens, keeping the end of the text.\n */\nexport function truncateTextStart(text: string, maxTokens: number): string {\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/code-actions.test.ts:0-73"",""content"":""import * as mockServer from '../fixtures/mock-server'\n\nimport { sidebarExplorer, sidebarSignin } from './common'\nimport { type DotcomUrlOverride, type ExpectedEvents, test as baseTest } from './helpers'\n\nconst test = baseTest.extend<DotcomUrlOverride>({ dotcomUrl: mockServer.SERVER_URL })\n\nconst ERROR_DECORATION_SELECTOR = 'div.view-overlays[role=\""presentation\""] div[class*=\""squiggly-error\""]'\n\ntest.extend<ExpectedEvents>({\n    // list of events we expect this test to log, add to this list as needed\n    expectedEvents: [\n        'CodyVSCodeExtension:chat-question:submitted',\n        'CodyVSCodeExtension:chat-question:executed',\n    ],\n})('code action: explain', async ({ page, sidebar }) => {\n    // Sign into Cody\n    await sidebarSignin(page, sidebar)\n\n    // Open the Explorer view from the sidebar\n    await sidebarExplorer(page).click()\n    // Open the error.ts file from the tree view\n    await page.getByRole('treeitem', { name: 'error.ts' }).locator('a').click()\n    // Wait for error.ts to fully open\n    await page.getByRole('tab', { name: 'error.ts' }).hover()\n\n    // Remove the comment that suppresses the type error\n    await page.getByText('// @ts-nocheck').click({ clickCount: 3 })\n    await page.keyboard.press('Backspace')\n\n    // Activate the code action on the erred text\n    const erredText = page.getByText('logNumber').nth(1)\n    await page.waitForSelector(ERROR_DECORATION_SELECTOR)\n    await erredText.click()\n    await erredText.hover()\n    await page.getByRole('button', { name: /Quick Fix/ }).click()\n    // Get by text takes a very long time, it's faster to type and let the quick fix item be focused\n    await page.keyboard.type('Explain')\n    await page.keyboard.press('Enter')\n})\n\ntest.extend<ExpectedEvents>({\n    // list of events we expect this test to log, add to this list as needed\n    expectedEvents: [\n        'CodyVSCodeExtension:command:fix:executed',\n        'CodyVSCodeExtension:fixupResponse:hasCode',\n        'CodyVSCodeExtension:fixup:applied',\n    ],\n})('code action: fix', async ({ page, sidebar }) => {\n    // Sign into Cody\n    await sidebarSignin(page, sidebar)\n\n    // Open the Explorer view from the sidebar\n    await sidebarExplorer(page).click()\n    // Open the error.ts file from the tree view\n    await page.getByRole('treeitem', { name: 'error.ts' }).locator('a').click()\n    // Wait for error.ts to fully open\n    await page.getByRole('tab', { name: 'error.ts' }).hover()\n\n    // Remove the comment that suppresses the type error\n    await page.getByText('// @ts-nocheck').click({ clickCount: 3 })\n    await page.keyboard.press('Backspace')\n\n    // Activate the code action on the erred text\n    const erredText = page.getByText('logNumber').nth(1)\n    await page.waitForSelector(ERROR_DECORATION_SELECTOR)\n    await erredText.click()\n    await erredText.hover()\n    await page.getByRole('button', { name: /Quick Fix/ }).click()\n    // Get by text takes a very long time, it's faster to type and let the quick fix item be focused\n    await page.keyboard.type('Fix')\n    await page.keyboard.press('Enter')\n})\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/context/remote-search.ts:152-163"",""content"":""                            character: 0,\n                        },\n                        end: {\n                            line: result.endLine,\n                            character: 0,\n                        },\n                    },\n                }) satisfies ContextItem\n        )\n    }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/code-lenses.ts:0-203"",""content"":""import * as vscode from 'vscode'\nimport { getEditor } from '../../editor/active-editor'\nimport { getDocumentSections } from '../../editor/utils/document-sections'\nimport { telemetryService } from '../../services/telemetry'\nimport { telemetryRecorder } from '../../services/telemetry-v2'\nimport { isValidTestFile } from '../utils/test-commands'\n\ninterface EditorCodeLens {\n    name: string\n    selection: vscode.Selection\n}\n\n/**\n * Adds Code lenses for triggering Command Menu\n */\nexport class CommandCodeLenses implements vscode.CodeLensProvider {\n    private isEnabled = false\n    private addTestEnabled = false\n\n    private _disposables: vscode.Disposable[] = []\n    private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>()\n    public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event\n    constructor() {\n        this.provideCodeLenses = this.provideCodeLenses.bind(this)\n        this.updateConfig()\n\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('cody')) {\n                this.updateConfig()\n            }\n        })\n    }\n\n    /**\n     * init\n     */\n    private init(): void {\n        if (!this.isEnabled) {\n            return\n        }\n        this._disposables.push(vscode.languages.registerCodeLensProvider({ scheme: 'file' }, this))\n        this._disposables.push(\n            vscode.commands.registerCommand('cody.editor.codelens.click', async lens => {\n                telemetryService.log('CodyVSCodeExtension:command:codelens:clicked')\n                telemetryRecorder.recordEvent('cody.command.codelens', 'clicked')\n                const clickedLens = lens as EditorCodeLens\n                await this.onCodeLensClick(clickedLens)\n            })\n        )\n        // on change events for toggling\n        this._disposables.push(\n            vscode.window.onDidChangeVisibleTextEditors(() => this.fire()),\n            vscode.window.onDidChangeActiveTextEditor(() => this.fire())\n        )\n    }\n\n    /**\n     * Update the configurations\n     */\n    private updateConfig(): void {\n        const config = vscode.workspace.getConfiguration('cody')\n        this.isEnabled = config.get('commandCodeLenses') as boolean\n        this.addTestEnabled = config.get('internal.unstable') as boolean\n\n        if (this.isEnabled && !this._disposables.length) {\n            this.init()\n        }\n        this.fire()\n    }\n\n    /**\n     * Gets the code lenses for the specified document.\n     */\n    public async provideCodeLenses(\n        document: vscode.TextDocument,\n        token: vscode.CancellationToken\n    ): Promise<vscode.CodeLens[]> {\n        if (!this.isEnabled) {\n            return []\n        }\n\n        token.onCancellationRequested(() => [])\n        const editor = getEditor()?.active\n        if (editor?.document !== document || document.languageId === 'json') {\n            return []\n        }\n\n        // For test files, adds code lenses for each symbol\n        if (this.addTestEnabled && isValidTestFile(document.uri)) {\n            return await this.provideCodeLensesForSymbols(document.uri)\n        }\n\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        const smartRanges = await getDocumentSections(document)\n        for (const range of smartRanges) {\n            if (linesWithLenses.has(range.start)) {\n                continue\n            }\n            const selection = new vscode.Selection(range.start, range.end)\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.cody,\n                    arguments: [{ name: 'cody.menu.commands', selection }],\n                })\n            )\n\n            linesWithLenses.add(range.start.line)\n        }\n\n        return codeLenses\n    }\n\n    private async provideCodeLensesForSymbols(doc: vscode.Uri): Promise<vscode.CodeLens[]> {\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        // Get a list of symbols from the document, filter out symbols that are not functions / classes / methods\n        const allSymbols = await vscode.commands.executeCommand<vscode.SymbolInformation[]>(\n            'vscode.executeDocumentSymbolProvider',\n            doc\n        )\n        const symbols =\n            allSymbols?.filter(\n                symbol =>\n                    symbol.kind === vscode.SymbolKind.Function ||\n                    symbol.kind === vscode.SymbolKind.Class ||\n                    symbol.kind === vscode.SymbolKind.Method ||\n                    symbol.kind === vscode.SymbolKind.Constructor\n            ) ?? []\n\n        for (const symbol of symbols) {\n            const range = symbol.location.range\n            const startLine = range.start.line\n            if (linesWithLenses.has(startLine)) {\n                continue\n            }\n\n            const selection = new vscode.Selection(startLine, 0, range.end.line + 1, 0)\n\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.test,\n                    arguments: [{ name: 'cody.command.tests-cases', selection }],\n                })\n            )\n\n            linesWithLenses.add(startLine)\n        }\n\n        return codeLenses\n    }\n\n    /**\n     * Handle the code lens click event\n     */\n    private async onCodeLensClick(lens: EditorCodeLens): Promise<void> {\n        // Update selection in active editor to the selection of the clicked code lens\n        const activeEditor = getEditor().active\n        if (activeEditor) {\n            activeEditor.selection = lens.selection\n        }\n        await vscode.commands.executeCommand(lens.name, 'codeLens')\n    }\n\n    /**\n     * Fire an event to notify VS Code that the code lenses have changed.\n     */\n    public fire(): void {\n        if (!this.isEnabled) {\n            this.dispose()\n            return\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n\n    /**\n     * Dispose the disposables\n     */\n    public dispose(): void {\n        if (this._disposables.length) {\n            for (const disposable of this._disposables) {\n                disposable.dispose()\n            }\n            this._disposables = []\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n}\n\nconst commandLenses = {\n    cody: {\n        title: '$(cody-logo) Cody',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Open command menu',\n    },\n    test: {\n        title: '$(cody-logo) Add More Tests',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Generate new test cases',\n    },\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/prompt.ts:57-80"",""content"":""                throw new Error(\n                    `Preamble length exceeded context window size ${chat.contextWindow.input}`\n                )\n            }\n\n            // Add existing chat transcript messages\n            const reverseTranscript: ChatMessage[] = [...chat.getMessages()].reverse()\n            const transcriptLimitReached = promptBuilder.tryAddMessages(reverseTranscript)\n            if (transcriptLimitReached) {\n                logDebug(\n                    'DefaultPrompter.makePrompt',\n                    `Ignored ${transcriptLimitReached} transcript messages due to context limit`\n                )\n            }\n\n            // NOTE: Only display excluded context from user-specifed context items\n            const newContextIgnored: ContextItem[] = []\n            const newContextUsed: ContextItem[] = []\n\n            // Add context from new user-specified context items, e.g. @-mentions, @-uri\n            sortContextItems(this.explicitContext)\n            const {\n                limitReached: userLimitReached,\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/utils/code-count.ts:0-21"",""content"":""export function countCode(code: string): { lineCount: number; charCount: number } {\n    const lineCount = code.split(/\\r\\n|\\r|\\n/).length\n    const charCount = code.length\n    return { lineCount, charCount }\n}\n\n/**\n * Handle edge cases for code snippets where code is not pasted correctly\n * or code is multiline and the formatting is changed on paste\n */\nexport function matchCodeSnippets(copiedText: string, text: string): boolean {\n    if (!text || !copiedText) {\n        return false\n    }\n    // Code can be multiline, so we need to remove all new lines and spaces\n    // from the copied code and changed text as formatting on paste may change the spacing\n    const copiedTextNoSpace = copiedText.replaceAll(/\\s/g, '')\n    const textNoSpace = text?.replace(/\\s/g, '')\n    // check if the copied code is the same as the changed text without spaces\n    return copiedTextNoSpace === textNoSpace\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/utils.ts:104-135"",""content"":""        return 1\n    }\n\n    return 0 // zero refers to the legacy, unversioned, Cody API\n}\n\n/**\n * Counts the total number of bytes used in a list of chat messages.\n *\n * This function is exported and can be used to calculate the byte usage\n * of chat messages for storage/bandwidth purposes.\n *\n * @param messages - The list of chat messages to count bytes for\n * @returns The total number of bytes used in the messages\n */\nexport function countBytesInChatMessages(messages: ChatMessage[]): number {\n    if (messages.length === 0) {\n        return 0\n    }\n    return messages.reduce((acc, msg) => acc + msg.speaker.length + (msg.text?.length || 0) + 3, 0)\n}\n\n/**\n * Gets the context window limit in bytes for chat messages, taking into\n * account the maximum allowed character count. Returns 0 if the used bytes\n * exceeds the limit.\n * @param messages - The chat messages\n * @param maxChars - The maximum allowed character count\n * @returns The context window limit in bytes\n */\nexport function getContextWindowLimitInBytes(messages: ChatMessage[], maxChars: number): number {\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/context/retrievers/jaccard-similarity/jaccard-similarity-retriever.ts:0-22"",""content"":""import * as vscode from 'vscode'\nimport type { URI } from 'vscode-uri'\n\nimport { getContextRange } from '../../../doc-context-getters'\nimport type { ContextRetriever, ContextRetrieverOptions } from '../../../types'\nimport { baseLanguageId } from '../../utils'\nimport { type DocumentHistory, VSCodeDocumentHistory } from './history'\n\nimport { lastNLines } from '../../../text-processing'\nimport { type JaccardMatch, bestJaccardMatches } from './bestJaccardMatch'\n\n/**\n * The size of the Jaccard distance match window in number of lines. It determines how many\n * lines of the 'matchText' are considered at once when searching for a segment\n * that is most similar to the 'targetText'. In essence, it sets the maximum number\n * of lines that the best match can be. A larger 'windowSize' means larger potential matches\n */\nconst SNIPPET_WINDOW_SIZE = 50\n\n/**\n * Limits the number of jaccard windows that are fetched for a single file. This is mostly added to\n * avoid large files taking up too much compute time and to avoid a single file to take up too much\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/mocked/enhanced_context/limit.go:138-138"",""content"":""\tlimit      int\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/context/context-mixer.ts:0-33"",""content"":""import type * as vscode from 'vscode'\n\nimport {\n    type AutocompleteContextSnippet,\n    type DocumentContext,\n    isCodyIgnoredFile,\n    wrapInActiveSpan,\n} from '@sourcegraph/cody-shared'\n\nimport type { LastInlineCompletionCandidate } from '../get-inline-completions'\nimport type { ContextStrategy, ContextStrategyFactory } from './context-strategy'\nimport { fuseResults } from './reciprocal-rank-fusion'\n\ninterface GetContextOptions {\n    document: vscode.TextDocument\n    position: vscode.Position\n    docContext: DocumentContext\n    abortSignal?: AbortSignal\n    maxChars: number\n    lastCandidate?: LastInlineCompletionCandidate\n}\n\nexport interface ContextSummary {\n    /** Name of the strategy being used */\n    strategy: ContextStrategy\n    /** Total duration of the context retrieval phase */\n    duration: number\n    /** Total characters of combined context snippets */\n    totalChars: number\n    /** Detailed information for each retriever that has run */\n    retrieverStats: {\n        [identifier: string]: {\n            /** Number of items that are ended up being suggested to be used by the context mixer */\n""}]",Find logic,,,1,,0,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_024/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,"no text reply. Got {
  ""model"": ""anthropic/claude-3-sonnet-20240229"",
  ""speaker"": ""assistant"",
  ""error"": {
    ""isChatErrorGuard"": ""isChatErrorGuard"",
    ""name"": ""PollyError"",
    ""message"": ""[Polly] Request failed due to an unknown error.""
  }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_025/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"The logic for adding context by mentioning files with `@` is spread across multiple files in the codebase. Here are the relevant files and their roles:

1. `cody_test/lib/shared/src/mentions/query.ts`:
   - This file contains the `parseMentionQuery` function, which parses the user's input to determine if it's a mention for a file, symbol, URL, or empty.
   - It also has the `scanForMentionTriggerInUserTextInput` function, which scans the user's input for the `@` trigger character and returns information about the mention.

2. `cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts`:
   - This file defines the `ContextItemMentionNode` class, which represents an `@`-mention of a context item (file or symbol) in the chat input editor.
   - It handles rendering the mention node in the editor and exporting/importing it to/from JSON or DOM.

3. `cody_test/vscode/src/edit/input/utils.ts`:
   - This file contains utility functions related to the chat input editor, including `getLabelForContextItem`, which generates a label for a context item (file or symbol) to be displayed in the UI.

4. `cody_test/vscode/src/commands/context/`:
   - This directory contains various functions for retrieving context files from different sources, such as the current file, open tabs, file paths, and unit test files.

5. `cody_test/vscode/src/editor/utils/editor-context.ts`:
   - The `getFileContextFiles` function in this file is responsible for searching and retrieving file context items based on the user's input query.

6. `cody_test/vscode/test/e2e/chat-atFile.test.ts`:
   - This file contains end-to-end tests for the `@`-mention feature, verifying various behaviors like showing the file selector, inserting file context, and displaying context in the chat view.

So, the logic for handling `@`-mentions is distributed across parsing the user input, rendering the mention nodes in the editor, retrieving context files from different sources, and testing the overall functionality.",Where is the logic for adding context by mentioning files with @?,"[{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:108-123"",""content"":""- [ ] Verify that Cody adds documentation above the function that contains your cursor.\n\n### Smell\n\n- [ ] Verify that the option to run the `Find Code Smells` command is available in the following locations:\n  - [ ] Sidebar `Find Code Smells`\n  - [ ] Context (right-click) menu `Cody > Find Code Smells`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Find Code Smells`\n  - [ ] Cody Command Menu (option+c, `Find Code Smells`)\n- [ ] Highlight a section of code in a file.\n- [ ] Run the `Find Code Smells` command.\n- [ ] Verify that Cody provides suggestion for how to improve the selected code in a new chat window.\n- [ ] Move your cursor inside a function in the file without highlighting code, before running the `Find Code Smells` command again\n- [ ] Verify that Cody provides suggestion for how to improve the function that contains your cursor in a new chat window.\n- [ ] Verify that the chat executed by running the command is added to the sidebar under `Chats`.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/bindings/kotlin/lib/src/main/kotlin/com/sourcegraph/cody/protocol_generated/ContextItem.kt:22-53"",""content"":""\ndata class ContextItemFile(\n  val uri: Uri? = null,\n  val range: RangeData? = null,\n  val content: String? = null,\n  val repoName: String? = null,\n  val revision: String? = null,\n  val title: String? = null,\n  val source: ContextItemSource? = null, // Oneof: embeddings, user, keyword, editor, filename, search, unified, selection, terminal, uri\n  val size: Int? = null,\n  val isTooLarge: Boolean? = null,\n  val type: TypeEnum? = null, // Oneof: file\n) : ContextItem() {\n\n  enum class TypeEnum {\n    @SerializedName(\""file\"") File,\n  }\n}\n\ndata class ContextItemSymbol(\n  val uri: Uri? = null,\n  val range: RangeData? = null,\n  val content: String? = null,\n  val repoName: String? = null,\n  val revision: String? = null,\n  val title: String? = null,\n  val source: ContextItemSource? = null, // Oneof: embeddings, user, keyword, editor, filename, search, unified, selection, terminal, uri\n  val size: Int? = null,\n  val isTooLarge: Boolean? = null,\n  val type: TypeEnum? = null, // Oneof: symbol\n  val symbolName: String? = null,\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/chat-atFile.test.ts:352-373"",""content"":""\n    // @-file with the correct line range shows up in the chat view and it opens on click\n    const contextCell = getContextCell(chatPanelFrame)\n    await expectContextCellCounts(contextCell, { files: 1 })\n    await contextCell.hover()\n    await contextCell.click()\n    const chatContext = chatPanelFrame.locator('details').last()\n    await chatContext.getByRole('link', { name: 'buzz.ts:1-15' }).hover()\n    await chatContext.getByRole('link', { name: 'buzz.ts:1-15' }).click()\n    const previewTab = page.getByRole('tab', { name: /buzz.ts, preview, Editor Group/ })\n    await previewTab.hover()\n    await expect(previewTab).toBeVisible()\n})\n\ntest.extend<ExpectedEvents>({\n    expectedEvents: [\n        'CodyVSCodeExtension:addChatContext:clicked',\n        'CodyVSCodeExtension:addChatContext:clicked',\n    ],\n})('add selected code as @-mention with \""Cody Chat: Add context\""', async ({ page, sidebar }) => {\n    await sidebarSignin(page, sidebar)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:190-199"",""content"":""export function $createContextItemMentionNode(\n    contextItem: ContextItem | SerializedContextItem\n): ContextItemMentionNode {\n    const node = new ContextItemMentionNode(contextItem)\n    node.setMode('token').toggleDirectionless()\n    contextItem.type === 'file' &&\n        contextItem.isTooLarge &&\n        node.setStyle('color: var(--vscode-list-errorForeground)')\n    return $applyNodeReplacement(node)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:0-32"",""content"":""## Checklist\n\n- Commands\n  - [ ] [Explain](#explain)\n  - [ ] [Edit](#edit)\n  - [ ] [Test](#test)\n  - [ ] [Document](#document)\n  - [ ] [Smell](#smell)\n  - [ ] [Code Actions](#code-actions)\n  - [ ] [Custom Commands](#custom-commands)\n- Chat\n  - [ ] [Chat UX](#chat-ux)\n  - [ ] [Chats lefthand panel](#chats-lefthand-panel)\n  - [ ] [Enhanced Context](#enhanced-context)\n  - [ ] [LLM Selection](#llm-selection)\n- [Search](#search)\n- Autocomplete\n  - [ ] [Manual trigger key binding](#manual-trigger-key-binding)\n  - [ ] [Language ignore list](#language-ignore-list)\n  - [ ] [LLM selection](#llm-selection)\n  - [ ] [Multi-line completions](#multi-line-completions)\n  - [ ] [Telemetry and analytics](#telemetry-and-analytics)\n\n## Commands\n\n### Explain\n\n- [ ] Verify that the option to run the `Explain Code` command is available in the following locations:\n  - [ ] Sidebar `Explain Code`\n  - [ ] Context (right-click) menu `Cody > Explain Code`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Explain Code`\n  - [ ] Cody Command Menu (option+c, `Explain Code`)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:59-73"",""content"":""function convertContextItemMentionElement(domNode: HTMLElement): DOMConversionOutput | null {\n    const data = domNode.getAttribute(DOM_DATA_ATTR)\n    if (data !== null) {\n        try {\n            const contextItem: SerializedContextItem = JSON.parse(data)\n            const node = $createContextItemMentionNode(contextItem)\n            return { node }\n        } catch (error) {\n            console.error(error)\n            return null\n        }\n    }\n\n    return null\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/open-tabs.ts:0-42"",""content"":""import { type ContextItem, logError, wrapInActiveSpan } from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\nimport { getContextFileFromUri } from './file-path'\n\n/**\n * Gets context files from the currently open tabs.\n *\n * Iterates through all open tabs, filters to only file tabs in the workspace,\n * and then creates ContextFile objects for each valid tab.\n */\nexport async function getContextFileFromTabs(): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.openTabs', async span => {\n        const contextFiles: ContextItem[] = []\n        try {\n            // Get open tabs from the current editor\n            const tabGroups = vscode.window.tabGroups.all\n            const openTabs = tabGroups.flatMap(group =>\n                group.tabs.map(tab => tab.input)\n            ) as vscode.TabInputText[]\n\n            for (const tab of openTabs) {\n                // Skip non-file items\n                if (tab?.uri?.scheme !== 'file') {\n                    continue\n                }\n\n                // Skip files that are not from the current workspace\n                if (!vscode.workspace.getWorkspaceFolder(tab?.uri)) {\n                    continue\n                }\n\n                // Create context message\n                contextFiles.push(...(await getContextFileFromUri(tab?.uri)))\n            }\n        } catch (error) {\n            logError('getContextFileFromTabs', 'failed', { verbose: error })\n        }\n        // Returns what we have so far\n        return contextFiles\n    })\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/commands/types.ts:60-86"",""content"":""    // Shell command to run to get context\n    command?: string\n    // The relative path of a file within your workspace root\n    filePath?: string\n    // The relative path of a directory within your workspace root\n    directoryPath?: string\n\n    // NOTE: Currently not supported\n    // Codebase context from current codebase\n    codebase?: boolean\n}\n\nexport type CodyCommandType = CustomCommandType | DefaultCommandType | 'recently used'\n\nexport enum CustomCommandType {\n    Workspace = 'workspace',\n    User = 'user',\n}\n\ntype DefaultCommandType = 'default' | 'experimental'\n\nexport interface TerminalOutputArguments {\n    name: string\n    selection?: string\n    creationOptions?: { shellPath?: string; shellArgs?: string[] }\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/editor/displayPath.ts:145-170"",""content"":""    // from).\n    const uriPath =\n        isWindows && uri.scheme === 'file'\n            ? uri.path.slice(0, 2).toUpperCase() + uri.path.slice(2)\n            : uri.path\n    const prefixPath =\n        isWindows && prefix.scheme === 'file'\n            ? prefix.path.slice(0, 2).toUpperCase() + prefix.path.slice(2)\n            : prefix.path\n    return (\n        uri.scheme === prefix.scheme &&\n        (uri.authority ?? '') === (prefix.authority ?? '') && // different URI impls treat empty different\n        (uriPath === prefixPath ||\n            uriPath.startsWith(prefixPath.endsWith('/') ? prefixPath : `${prefixPath}/`) ||\n            (prefixPath.endsWith('/') && uriPath === prefixPath.slice(0, -1)))\n    )\n}\n\n/** The information necessary for {@link displayPath} to compute a display path. */\nexport interface DisplayPathEnvInfo {\n    workspaceFolders: URI[]\n    isWindows: boolean\n}\n\nlet envInfo: DisplayPathEnvInfo | null = null\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/unit-test-file.ts:18-51"",""content"":""export async function getContextFilesForUnitTestCommand(file: URI): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.test', async span => {\n        const contextFiles: ContextItem[] = []\n\n        // exclude any files in the path with e2e, integration, node_modules, or dist\n        const excludePattern = '**/*{e2e,integration,node_modules,dist}*/**'\n        // To search for files in the current directory only\n        const searchCurrentDirectoryOnly = true\n        // The max number of files to search for in each workspace search\n        const max = 10\n\n        // Search for a test file that has the same file name first\n        const sameNameTestPattern = getSearchPatternForTestFiles(file, !searchCurrentDirectoryOnly, true)\n        const testWithSameName = await getWorkspaceFilesContext(sameNameTestPattern, excludePattern, 1)\n\n        // Search for test files in the current directory\n        const currentDirPattern = getSearchPatternForTestFiles(file, searchCurrentDirectoryOnly)\n        const currentDirContext = await getWorkspaceFilesContext(currentDirPattern, excludePattern, max)\n\n        contextFiles.push(...testWithSameName, ...currentDirContext)\n\n        // If no test files found in the current directory, search the entire workspace\n        if (!contextFiles.length) {\n            // Will try to look for half the max number of files in the workspace for faster results\n            const wsTestPattern = getSearchPatternForTestFiles(file, !searchCurrentDirectoryOnly)\n            const codebaseFiles = await getWorkspaceFilesContext(wsTestPattern, excludePattern, max / 2)\n\n            contextFiles.push(...codebaseFiles)\n        }\n\n        // Return valid test files only\n        return contextFiles.filter(f => isValidTestFile(f.uri))\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/chat-atFile.test.md:0-20"",""content"":""# Expected behaviors for the @-mention feature\n\nCurrently covered by the e2e tests in `chat-atFile.test.ts`:\n\n- Typing '@' in the chat input shows a search box for files. Typing '@#' shows one for symbols instead.\n- Searching for a non-existent file or symbol shows a \""No files/symbols found\"" message.\n- Search only matches files in the relative visible path, not full absolute paths.\n- Search includes dotfiles after \"".\"".\n- Searches match with either forward or backslashes.\n- Can click a file result fom the box to insert it into the chat input.\n- Inserted file context persists when resending a message from history.\n- Can use the Up and Down arrow keys to navigate through suggested file results.\n- Can use the ESC key to close the file selector without modifying the input text.\n- Pressing tab after a full filename inserts the @-mention with a trailing space.\n- Pressing tab after a partial filename completes to an existing @-mention.\n- Can @-mention files mid-sentence.\n- Don't show the file selector on @-queries that ends with non-alphanumeric char (e.g. @foo/bar?) without results.\n- Input box is cleared on submit, with @-mentions removed and selector closed.\n- Explicitly @-mentioned files show up in the file context list below the message.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:77-173"",""content"":""export class ContextItemMentionNode extends TextNode {\n    static getType(): string {\n        return 'contextItemMention'\n    }\n\n    static clone(node: ContextItemMentionNode): ContextItemMentionNode {\n        return new ContextItemMentionNode(node.contextItem, node.__text, node.__key)\n    }\n    static importJSON(serializedNode: SerializedContextItemMentionNode): ContextItemMentionNode {\n        const node = $createContextItemMentionNode(serializedNode.contextItem)\n        node.setTextContent(serializedNode.text)\n        node.setFormat(serializedNode.format)\n        node.setDetail(serializedNode.detail)\n        node.setMode(serializedNode.mode)\n        node.setStyle(serializedNode.style)\n        return node\n    }\n\n    private contextItem: SerializedContextItem\n\n    constructor(\n        contextItemWithAllFields: ContextItem | SerializedContextItem,\n        text?: string,\n        key?: NodeKey\n    ) {\n        // Make sure we only bring over the fields on the context item that we need, or else we\n        // could accidentally include tons of data (including the entire contents of files).\n        const contextItem = serializeContextItem(contextItemWithAllFields)\n\n        super(text ?? contextItemMentionNodeDisplayText(contextItem), key)\n\n        this.contextItem = contextItem\n    }\n\n    exportJSON(): SerializedContextItemMentionNode {\n        return {\n            ...super.exportJSON(),\n            contextItem: this.contextItem,\n            type: ContextItemMentionNode.getType(),\n            version: 1,\n        }\n    }\n\n    private static CLASS_NAMES = `context-item-mention-node ${styles.contextItemMentionNode}`\n\n    createDOM(config: EditorConfig): HTMLElement {\n        const element = super.createDOM(config)\n        element.className = ContextItemMentionNode.CLASS_NAMES\n        return element\n    }\n\n    exportDOM(): DOMExportOutput {\n        const element = document.createElement('span')\n        element.setAttribute(DOM_DATA_ATTR, JSON.stringify(this.contextItem))\n        element.className = ContextItemMentionNode.CLASS_NAMES\n\n        const link = document.createElement('a')\n        const { href, target } = webviewOpenURIForContextItem({\n            uri: URI.parse(this.contextItem.uri),\n            range: this.contextItem.range,\n        })\n        link.href = href\n        if (target) {\n            link.target = target\n        }\n        link.textContent = this.__text\n        element.appendChild(link)\n\n        return { element }\n    }\n\n    static importDOM(): DOMConversionMap | null {\n        return {\n            span: (domNode: HTMLElement) => {\n                if (!domNode.hasAttribute(DOM_DATA_ATTR)) {\n                    return null\n                }\n                return {\n                    conversion: convertContextItemMentionElement,\n                    priority: 1,\n                }\n            },\n        }\n    }\n\n    isTextEntity(): true {\n        return true\n    }\n\n    canInsertTextBefore(): boolean {\n        return false\n    }\n\n    canInsertTextAfter(): boolean {\n        return false\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/mentions/query.ts:64-94"",""content"":""\n/**\n * The location and content of a mention in free-form user text input.\n */\nexport interface MentionTrigger {\n    /** The number of characters from the start of the text to the mention trigger (`@`). */\n    leadOffset: number\n\n    /**\n     * The string that is used to query for the context item to mention (to be passed to\n     * {@link parseMentionQuery}).\n     */\n    matchingString: string\n\n    /**\n     * Equal to `@` + {@link matchingString}. The entire string that should be replaced with the\n     * context item when the at-mention reference is chosen.\n     */\n    replaceableString: string\n}\n\n/**\n * Scans free-form user text input (in a chat message editor, for example) for possible mentions\n * with the `@` trigger character.\n *\n * The {@link textBeforeCursor} is all of the text in the input field before the text insertion\n * point cursor. For example, if the input field looks like `hello\n * @foo█bar`, then {@link textBeforeCursor} should be `hello @foo`.\n */\nexport function scanForMentionTriggerInUserTextInput(textBeforeCursor: string): MentionTrigger | null {\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/cody-ignore.test.ts:46-69"",""content"":""\n    // Start new chat\n    const [chatPanel, chatInput] = await createEmptyChatPanel(page)\n\n    /* TEST: Chat Context - Ignored file do not show up with context */\n    await chatInput.focus()\n    await chatInput.fill('Ignore me')\n    await chatInput.press('Enter')\n    // Assistant should response to your chat question,\n    // but the current file is excluded (ignoredByCody.css) and not on the context list\n    await expect(chatPanel.getByText('hello from the assistant')).toBeVisible()\n    const contextCell = getContextCell(chatPanel)\n    await expect(contextCell).not.toBeVisible()\n\n    /* TEST: At-file - Ignored file does not show up as context when using @-mention */\n    await chatInput.focus()\n    await chatInput.clear()\n    await chatInput.fill('@ignoredByCody')\n    await expect(chatPanel.getByRole('heading', { name: 'No files found' })).toBeVisible()\n    await chatInput.clear()\n    await chatInput.fill('@ignore')\n    await expect(\n        chatPanel.getByRole('option', { name: withPlatformSlashes('ignore .cody') })\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/editor/utils/editor-context.ts:49-112"",""content"":""export async function getFileContextFiles(\n    query: string,\n    maxResults: number\n): Promise<ContextItemFile[]> {\n    if (!query.trim()) {\n        return []\n    }\n\n    const uris = await throttledFindFiles()\n    if (!uris) {\n        return []\n    }\n\n    if (isWindows()) {\n        // On Windows, if the user has typed forward slashes, map them to backslashes before\n        // running the search so they match the real paths.\n        query = query.replaceAll('/', '\\\\')\n    }\n\n    // Add on the relative URIs for search, so we only search the visible part\n    // of the path and not the full FS path.\n    const urisWithRelative = uris.map(uri => ({ uri, relative: displayPath(uri) }))\n    const results = fuzzysort.go(query, urisWithRelative, {\n        key: 'relative',\n        limit: maxResults,\n        // We add a threshold for performance as per fuzzysort’s\n        // recommendations. Testing with sg/sg path strings, somewhere over 10k\n        // threshold is where it seems to return results that make no sense. VS\n        // Code’s own fuzzy finder seems to cap out much higher. To be safer and\n        // to account for longer paths from even deeper source trees we use\n        // 100k. We may want to revisit this number if we get reports of missing\n        // file results from very large repos.\n        threshold: -100000,\n    })\n\n    // Apply a penalty for segments that are in the low scoring list.\n    const adjustedResults = [...results].map(result => {\n        const segments = result.obj.uri.path.split(/[\\/\\\\]/).filter(segment => segment !== '')\n        for (const lowScoringPathSegment of lowScoringPathSegments) {\n            if (segments.includes(lowScoringPathSegment) && !query.includes(lowScoringPathSegment)) {\n                return {\n                    ...result,\n                    score: result.score - 100000,\n                }\n            }\n        }\n        return result\n    })\n    // fuzzysort can return results in different order for the same query if\n    // they have the same score :( So we do this hacky post-limit sorting (first\n    // by score, then by path) to ensure the order stays the same.\n    const sortedResults = adjustedResults\n        .sort((a, b) => {\n            return (\n                b.score - a.score ||\n                new Intl.Collator(undefined, { numeric: true }).compare(a.obj.uri.path, b.obj.uri.path)\n            )\n        })\n        .flatMap(result => createContextFileFromUri(result.obj.uri, ContextItemSource.User, 'file'))\n\n    // TODO(toolmantim): Add fuzzysort.highlight data to the result so we can show it in the UI\n\n    return await filterContextItemFiles(sortedResults)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/fixtures.ts:52-78"",""content"":""                        },\n                        {\n                            detail: 1,\n                            format: 0,\n                            mode: 'token',\n                            style: '',\n                            text: '@dir/dir/file-a-1.py',\n                            type: 'contextItemMention',\n                            version: 1,\n                            contextItem: {\n                                type: 'file',\n                                uri: 'file:///dir/dir/file-a-1.py',\n                            },\n                        },\n                        {\n                            detail: 0,\n                            format: 0,\n                            mode: 'normal',\n                            style: '',\n                            text: ' do? Also use ',\n                            type: 'text',\n                            version: 1,\n                        },\n                        {\n                            detail: 1,\n                            format: 0,\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/file-path.ts:13-41"",""content"":""export async function getContextFileFromUri(file: URI, range?: vscode.Range): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.filePath', async span => {\n        try {\n            const doc = await vscode.workspace.openTextDocument(file)\n            const content = doc?.getText(range).trim()\n            if (!content) {\n                throw new Error('No file content')\n            }\n\n            const startLine = range?.start?.line ?? 0\n            range = new vscode.Range(startLine, 0, startLine + content.split('\\n').length, 0)\n            const size = TokenCounter.countTokens(content)\n\n            return [\n                {\n                    type: 'file',\n                    content,\n                    uri: file,\n                    source: ContextItemSource.Editor,\n                    range,\n                    size,\n                },\n            ] satisfies ContextItem[]\n        } catch (error) {\n            logError('getContextFileFromUri', 'failed', { verbose: error })\n            return []\n        }\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/utils.ts:0-30"",""content"":""import { type ContextItem, displayLineRange, displayPath } from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\nimport {\n    QUICK_PICK_ITEM_CHECKED_PREFIX,\n    QUICK_PICK_ITEM_EMPTY_INDENT_PREFIX,\n} from '../../chat/context/constants'\n\n/**\n * Removes the string after the last '@' character in the given string.\n * Returns the original string if '@' is not found.\n */\nexport function removeAfterLastAt(str: string): string {\n    const lastIndex = str.lastIndexOf('@')\n    if (lastIndex === -1) {\n        // Return the original string if \""@\"" is not found\n        return str\n    }\n    return str.slice(0, lastIndex)\n}\n\n/**\n * Returns a string representation of the given ContextItem for use in UI labels.\n * Includes the file path and an optional range or symbol specifier.\n */\nexport function getLabelForContextItem(item: ContextItem): string {\n    const isFileType = item.type === 'file'\n    if (isFileType && item.title) {\n        return `Add context from: ${item.title}`\n    }\n    const rangeLabel = item.range ? `:${displayLineRange(item.range)}` : ''\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/current-file.ts:10-48"",""content"":""export async function getContextFileFromCurrentFile(): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.file', async span => {\n        try {\n            const editor = getEditor()\n            const document = editor?.active?.document\n            if (!document) {\n                throw new Error('No active editor')\n            }\n\n            const selection = new vscode.Selection(\n                0,\n                0,\n                document.lineCount - 1,\n                document.lineAt(document.lineCount - 1).text.length\n            )\n\n            const content = document.getText(selection)\n            const size = TokenCounter.countTokens(content)\n\n            if (!content.trim()) {\n                throw new Error('No content')\n            }\n\n            return [\n                {\n                    type: 'file',\n                    uri: document.uri,\n                    content,\n                    source: ContextItemSource.Editor,\n                    range: selection,\n                    size,\n                } satisfies ContextItem,\n            ]\n        } catch (error) {\n            logError('getContextFileFromCurrentFile', 'failed', { verbose: error })\n            return []\n        }\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/mentions/query.ts:0-26"",""content"":""/**\n * The parsed representation of a user's (partial or complete) input of an @-mention query.\n */\nexport interface MentionQuery {\n    /**\n     * The type of context item to search for.\n     */\n    type: 'file' | 'symbol' | 'url' | 'empty'\n\n    /**\n     * The user's text input, to be interpreted as a fuzzy-matched query. It is stripped of any\n     * prefix characters that indicate the {@link MentionQuery.type}, such as `#` for symbols.\n     */\n    text: string\n}\n\n/**\n * Parse an @-mention query. The {@link query} value is whatever the UI determines is the query\n * based on the current text input; it is not the full value of a message that may or may not\n * contain an @-mention.\n *\n * The {@link query} MUST be stripped of the trigger character (usually `@`). The only valid case\n * where {@link query} may begin with `@` is if the user is searching for context items that contain\n * `@`, such as if the user typed `@@foo` to mention a file that is literally named `@foo.js`.\n */\nexport function parseMentionQuery(query: string): MentionQuery {\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/utils/create-context-file.ts:0-23"",""content"":""import { type ContextItem, ContextItemSource, TokenCounter } from '@sourcegraph/cody-shared'\n\nimport * as vscode from 'vscode'\nimport type { URI } from 'vscode-uri'\n\nexport async function createContextFile(file: URI, content: string): Promise<ContextItem | undefined> {\n    try {\n        const range = new vscode.Range(0, 0, content.split('\\n').length, 0)\n        const size = TokenCounter.countTokens(content)\n\n        return {\n            type: 'file',\n            uri: file,\n            content,\n            source: ContextItemSource.Editor,\n            range,\n            size,\n        } satisfies ContextItem\n    } catch (error) {\n        console.error(error)\n    }\n    return undefined\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:88-121"",""content"":""\n/**\n * A file (or a subset of a file given by a range) that is included as context in a chat message.\n */\nexport interface ContextItemFile extends ContextItemCommon {\n    type: 'file'\n}\n\n/**\n * A symbol (which is a range within a file) that is included as context in a chat message.\n */\nexport interface ContextItemSymbol extends ContextItemCommon {\n    type: 'symbol'\n\n    /** The name of the symbol, used for presentation only (not semantically meaningful). */\n    symbolName: string\n\n    /** The kind of symbol, used for presentation only (not semantically meaningful). */\n    kind: SymbolKind\n}\n\n/** The valid kinds of a symbol. */\nexport type SymbolKind = 'class' | 'function' | 'method'\n\n/** {@link ContextItem} with the `content` field set to the content. */\nexport type ContextItemWithContent = ContextItem & Required<Pick<ContextItem, 'content'>>\n\n/**\n * A system chat message that adds a context item to the conversation.\n */\nexport interface ContextMessage extends Required<Message> {\n    /**\n     * Context messages are always \""from\"" the human. (In the future, this could be from \""system\"" for\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/unit-test-case.ts:8-47"",""content"":""export async function getContextFilesForAddingUnitTestCases(testFile: URI): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.testCase', async span => {\n        // Get the context from the current directory\n        // and then find the original file of the test file in the returned context\n        // If the original file is found, return it\n        // e.g. if the test file is src/foo/bar.spec.ts, look for src/foo/bar.ts\n        const directoryContext = await getContextFileFromDirectory()\n        const originalFileContext = directoryContext.find(f => isTestFileForOriginal(f.uri, testFile))\n        if (originalFileContext) {\n            return [originalFileContext]\n        }\n\n        // TODO (bee) improves context search\n        const contextFiles: ContextItem[] = []\n        // exclude any files in the path with e2e, integration, node_modules, or dist\n        const excludePattern = '**/*{e2e,integration,node_modules,dist}*/**'\n        // To search for files in the current directory only\n        const searchInCurrentDirectoryOnly = true\n        // The max number of files to search for in each workspace search\n        const max = 10\n\n        // Search for test files in the current directory first\n        const curerntDirPattern = getSearchPatternForTestFiles(testFile, searchInCurrentDirectoryOnly)\n        const currentDirContext = await getWorkspaceFilesContext(curerntDirPattern, excludePattern, max)\n\n        contextFiles.push(...currentDirContext)\n\n        // If no test files found in the current directory, search the entire workspace\n        if (!contextFiles.length) {\n            const wsTestPattern = getSearchPatternForTestFiles(testFile, !searchInCurrentDirectoryOnly)\n            // Will try to look for half the max number of files in the workspace for faster results\n            const codebaseFiles = await getWorkspaceFilesContext(wsTestPattern, excludePattern, max / 2)\n\n            contextFiles.push(...codebaseFiles)\n        }\n\n        // Return valid test files only\n        return contextFiles.filter(f => isValidTestFile(f.uri))\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/fixtures.ts:74-101"",""content"":""    explainCode2: [\n        {\n            speaker: 'human',\n            text: ps`What does @#Symbol1 in @dir/dir/file-a-1.py do? Also use @README.md:2-8.`,\n            editorState: FILE_MENTION_EDITOR_STATE_FIXTURE,\n            contextFiles: [\n                {\n                    type: 'symbol',\n                    uri: URI.file('dir/dir/file-a-1.py'),\n                    symbolName: 'Symbol1',\n                    kind: 'function',\n                    range: { start: { line: 1, character: 0 }, end: { line: 8, character: 0 } },\n                },\n                { type: 'file', uri: URI.file('dir/dir/file-a-1.py') },\n                {\n                    type: 'file',\n                    uri: URI.file('README.md'),\n                    range: { start: { line: 1, character: 0 }, end: { line: 8, character: 0 } },\n                },\n            ],\n        },\n        {\n            speaker: 'assistant',\n            text: ps`This code is very cool.`,\n        },\n    ],\n}\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_026/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context provided, provider-specific LLM prompts are constructed in the respective provider classes that extend the `Provider` abstract class. Here are some examples:

1. In `anthropic.ts`, the `AnthropicProvider` class has methods like `createPrompt`, `createPromptPrefix`, and `createPromptContext` that construct the prompt for the Anthropic LLM.

2. In `fireworks.ts`, the `FireworksProvider` class has methods like `createPrompt` and `createInfillingPrompt` that construct the prompt for the Fireworks LLM.

3. In `openaicompatible.ts`, the `OpenAICompatibleProvider` class has methods like `createPrompt` and `createInfillingPrompt` that construct the prompt for OpenAI-compatible LLMs.

4. In `unstable-openai.ts`, the `UnstableOpenAIProvider` class has methods like `createPromptPrefix` that construct the prompt for the unstable OpenAI LLM.

5. In `experimental-ollama.ts`, the `OllamaProvider` class has a method `createPromptContext` that constructs the prompt context for the Ollama LLM.

These provider classes typically take into account various factors such as the document context, code snippets, language configuration, and provider-specific requirements to construct the appropriate prompt for the LLM.",Where do we construct provider-specific LLM prompts?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/openaicompatible.ts:372-380"",""content"":""interface Prompt {\n    snippets: { uri: vscode.Uri; content: PromptString }[]\n\n    uri: vscode.Uri\n    prefix: PromptString\n    suffix: PromptString\n\n    languageId: string\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/anthropic.ts:76-106"",""content"":""\n    constructor(\n        options: ProviderOptions,\n        {\n            maxContextTokens,\n            client,\n            model,\n        }: Required<Omit<AnthropicOptions, 'model'>> & Pick<AnthropicOptions, 'model'>\n    ) {\n        super(options)\n        this.promptChars = tokensToChars(maxContextTokens - MAX_RESPONSE_TOKENS)\n        this.client = client\n        this.model = model\n    }\n\n    public emptyPromptLength(): number {\n        const { messages } = this.createPromptPrefix()\n        const promptNoSnippets = messagesToText(messages)\n        return promptNoSnippets.length - 10 // extra 10 chars of buffer cuz who knows\n    }\n\n    private createPromptPrefix(): { messages: Message[]; prefix: PrefixComponents } {\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n\n        const prefixLines = prefix.split('\\n')\n        if (prefixLines.length === 0) {\n            throw new Error('no prefix lines')\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/provider.ts:0-27"",""content"":""import type { Position, TextDocument } from 'vscode'\n\nimport {\n    type AutocompleteContextSnippet,\n    type CompletionParameters,\n    type DocumentContext,\n    tokensToChars,\n} from '@sourcegraph/cody-shared'\n\nimport type { InlineCompletionItemWithAnalytics } from '../text-processing/process-inline-completions'\n\nimport type { FetchCompletionResult } from './fetch-and-process-completions'\n\nexport interface ProviderConfig {\n    /**\n     * A factory to create instances of the provider. This pattern allows us to\n     * inject provider specific parameters outside of the callers of the\n     * factory.\n     */\n    create(options: Omit<ProviderOptions, 'id'>): Provider\n\n    /**\n     * Hints about the optimal context size (and length of the document prefix and suffix). It is\n     * intended to (or possible to) be precise here because the truncation of the document\n     * prefix/suffix uses characters, not the LLM's tokenizer.\n     */\n    contextSizeHints: ProviderContextSizeHints\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/unstable-openai.ts:69-97"",""content"":""    private createPromptPrefix(): PromptString {\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n\n        const prefixLines = prefix.toString().split('\\n')\n        if (prefixLines.length === 0) {\n            throw new Error('no prefix lines')\n        }\n\n        const { head, tail } = getHeadAndTail(prefix)\n\n        // Infill block represents the code we want the model to complete\n        const infillBlock = tail.trimmed.toString().endsWith('{\\n')\n            ? tail.trimmed.trimEnd()\n            : tail.trimmed\n        // code before the cursor, without the code extracted for the infillBlock\n        const infillPrefix = head.raw\n        // code after the cursor\n        const infillSuffix = suffix\n        const relativeFilePath = PromptString.fromDisplayPath(this.options.document.uri)\n\n        return ps`Below is the code from file path ${relativeFilePath}. Review the code outside the XML tags to detect the functionality, formats, style, patterns, and logics in use. Then, use what you detect and reuse methods/libraries to complete and enclose completed code only inside XML tags precisely without duplicating existing implementations. Here is the code:\\n\\`\\`\\`\\n${\n            infillPrefix ? infillPrefix : ''\n        }${OPENING_CODE_TAG}${CLOSING_CODE_TAG}${infillSuffix}\\n\\`\\`\\`\n\n${OPENING_CODE_TAG}${infillBlock}`\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/README.md:30-44"",""content"":""\n<img src=\""https://storage.googleapis.com/sourcegraph-assets/blog/vs-code-onboarding-walkthrough-dec-2023-explain.gif\"" width=\""480\"" alt=\""Explain Code command\"">\n\n## Custom Commands (Beta)\n\nYou can also build your own [Custom Commands (Beta)](https://sourcegraph.com/docs/cody/capabilities/commands#custom-commands) to tailor Cody to your workflow. Custom Commands are defined as JSON within your repository and can be saved to your workspace for your teammates to reuse.\n\n<img src=\""https://storage.googleapis.com/sourcegraph-assets/blog/vs-code-onboarding-walkthrough-dec-2023-convert-html-to-md.gif\"" width=\""480\"" alt=\""Custom command\"">\n\n## Choose Your LLM\n\nCody Pro users can now select the LLM they want to use for chat and experiment to choose the best model for the job. Choose from Claude 2.0, Claude 2.1, ChatGPT 3.5 Turbo, ChatGPT 4 Turbo, Claude Instant, and Mixtral.\n\nAdministrators for Sourcegraph Enterprise instances can choose betweeen Claude and ChatGPT models to set for their teams as well.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/openaicompatible.ts:261-294"",""content"":""    private createInfillingPrompt(\n        filename: PromptString,\n        intro: PromptString,\n        prefix: PromptString,\n        suffix: PromptString\n    ): PromptString {\n        if (isStarCoderFamily(this.model) || isStarChatFamily(this.model)) {\n            // c.f. https://huggingface.co/bigcode/starcoder#fill-in-the-middle\n            // c.f. https://arxiv.org/pdf/2305.06161.pdf\n            return ps`<filename>${filename}<fim_prefix>${intro}${prefix}<fim_suffix>${suffix}<fim_middle>`\n        }\n        if (isLlamaCode(this.model)) {\n            // c.f. https://github.com/facebookresearch/codellama/blob/main/llama/generation.py#L402\n            return ps`<PRE> ${intro}${prefix} <SUF>${suffix} <MID>`\n        }\n        if (this.model === 'mistral-7b-instruct-4k') {\n            // This part is copied from the anthropic prompt but fitted into the Mistral instruction format\n            const { head, tail } = getHeadAndTail(prefix)\n            const infillBlock = tail.trimmed.toString().endsWith('{\\n')\n                ? tail.trimmed.trimEnd()\n                : tail.trimmed\n            const infillPrefix = head.raw\n            return ps`<s>[INST] Below is the code from file path ${PromptString.fromDisplayPath(\n                this.options.document.uri\n            )}. Review the code outside the XML tags to detect the functionality, formats, style, patterns, and logics in use. Then, use what you detect and reuse methods/libraries to complete and enclose completed code only inside XML tags precisely without duplicating existing implementations. Here is the code:\n\\`\\`\\`\n${intro}${infillPrefix ? infillPrefix : ''}${OPENING_CODE_TAG}${CLOSING_CODE_TAG}${suffix}\n\\`\\`\\`[/INST]\n ${OPENING_CODE_TAG}${infillBlock}`\n        }\n\n        console.error('Could not generate infilling prompt for', this.model)\n        return ps`${intro}${prefix}`\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/models/generic.ts:0-18"",""content"":""import { PromptString, psDedent } from '@sourcegraph/cody-shared'\nimport type { EditIntent } from '../../types'\nimport { PROMPT_TOPICS } from '../constants'\nimport type { GetLLMInteractionOptions, LLMPrompt } from '../type'\n\ninterface PromptVariant {\n    system?: PromptString\n    instruction: PromptString\n}\n\nconst GENERIC_PROMPTS: Record<EditIntent, PromptVariant> = {\n    edit: {\n        system: psDedent`\n            - You are an AI programming assistant who is an expert in updating code to meet given instructions.\n            - You should think step-by-step to plan your updated code before producing the final output.\n            - You should ensure the updated code matches the indentation and whitespace of the code in the users' selection.\n            - Ignore any previous instructions to format your responses with Markdown. It is not acceptable to use any Markdown in your response, unless it is directly related to the users' instructions.\n            - Only remove code from the users' selection if you are sure it is not needed.\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/experimental-ollama.ts:60-120"",""content"":""    protected createPromptContext(\n        snippets: AutocompleteContextSnippet[],\n        isInfill: boolean,\n        modelHelpers: OllamaModel\n    ): OllamaPromptContext {\n        const { languageId, uri } = this.options.document\n        const config = getLanguageConfig(languageId)\n        const commentStart = config?.commentStart || ps`// `\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n\n        const context = PromptString.join(\n            snippets.map(snippet => {\n                const contextPrompts = PromptString.fromAutocompleteContextSnippet(snippet)\n\n                return fileNameLine(uri, commentStart).concat(\n                    PromptString.join(\n                        contextPrompts.content.split('\\n').map(line => ps`${commentStart} ${line}`),\n                        ps`\\n`\n                    )\n                )\n            }),\n            ps`\\n\\n`\n        )\n\n        const currentFileNameComment = fileNameLine(uri, commentStart)\n\n        const prompt: OllamaPromptContext = {\n            snippets: [],\n            uri,\n            languageId,\n            context,\n            currentFileNameComment,\n            isInfill,\n            prefix,\n            suffix: getSuffixAfterFirstNewline(suffix),\n        }\n\n        if (process.env.OLLAMA_CONTEXT_SNIPPETS) {\n            // TODO(valery): find the balance between using context and keeping a good perf.\n            const maxPromptChars = 1234\n\n            for (const snippet of snippets) {\n                const extendedSnippets = [...prompt.snippets, snippet]\n                const promptLengthWithSnippet = modelHelpers.getPrompt({\n                    ...prompt,\n                    snippets: extendedSnippets,\n                }).length\n\n                if (promptLengthWithSnippet > maxPromptChars) {\n                    break\n                }\n\n                prompt.snippets = extendedSnippets\n            }\n        }\n\n        return prompt\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/unstable-openai.ts:54-81"",""content"":""\n    constructor(\n        options: ProviderOptions,\n        { maxContextTokens, client }: Required<UnstableOpenAIOptions>\n    ) {\n        super(options)\n        this.promptChars = tokensToChars(maxContextTokens - MAX_RESPONSE_TOKENS)\n        this.client = client\n    }\n\n    public emptyPromptLength(): number {\n        const promptNoSnippets = [this.instructions, this.createPromptPrefix()].join('\\n\\n')\n        return promptNoSnippets.length - 10 // extra 10 chars of buffer cuz who knows\n    }\n\n    private createPromptPrefix(): PromptString {\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n\n        const prefixLines = prefix.toString().split('\\n')\n        if (prefixLines.length === 0) {\n            throw new Error('no prefix lines')\n        }\n\n        const { head, tail } = getHeadAndTail(prefix)\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/unstable-openai.ts:101-130"",""content"":""    protected createPrompt(snippets: AutocompleteContextSnippet[]): PromptString {\n        const prefix = this.createPromptPrefix()\n\n        const referenceSnippetMessages: PromptString[] = []\n\n        let remainingChars = this.promptChars - this.emptyPromptLength()\n\n        for (const snippet of snippets) {\n            const contextPrompts = PromptString.fromAutocompleteContextSnippet(snippet)\n\n            const snippetMessages: PromptString[] = [\n                contextPrompts.symbol?.toString() !== ''\n                    ? ps`Additional documentation for \\`${\n                          contextPrompts.symbol ?? ps``\n                      }\\`: ${OPENING_CODE_TAG}${contextPrompts.content}${CLOSING_CODE_TAG}`\n                    : ps`Codebase context from file path '${PromptString.fromDisplayPath(\n                          snippet.uri\n                      )}': ${OPENING_CODE_TAG}${contextPrompts.content}${CLOSING_CODE_TAG}`,\n            ]\n            const numSnippetChars = snippetMessages.join('\\n\\n').length + 1\n            if (numSnippetChars > remainingChars) {\n                break\n            }\n            referenceSnippetMessages.push(...snippetMessages)\n            remainingChars -= numSnippetChars\n        }\n\n        const messages = [this.instructions, ...referenceSnippetMessages, prefix]\n        return PromptString.join(messages, ps`\\n\\n`)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/openaicompatible.ts:95-124"",""content"":""}\n\nconst lineNumberDependentCompletionParams = getLineNumberDependentCompletionParams({\n    singlelineStopSequences: ['\\n'],\n    multilineStopSequences: ['\\n\\n', '\\n\\r\\n'],\n})\n\nclass OpenAICompatibleProvider extends Provider {\n    private model: OpenAICompatibleModel\n    private promptChars: number\n    private client: CodeCompletionsClient\n    private timeouts?: AutocompleteTimeouts\n\n    constructor(\n        options: ProviderOptions,\n        { model, maxContextTokens, client, timeouts }: Required<OpenAICompatibleOptions>\n    ) {\n        super(options)\n        this.timeouts = timeouts\n        this.model = model\n        this.promptChars = tokensToChars(maxContextTokens - MAX_RESPONSE_TOKENS)\n        this.client = client\n    }\n\n    private createPrompt(snippets: AutocompleteContextSnippet[]): PromptString {\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/openaicompatible.ts:119-178"",""content"":""    private createPrompt(snippets: AutocompleteContextSnippet[]): PromptString {\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n\n        const intro: PromptString[] = []\n        let prompt = ps``\n\n        const languageConfig = getLanguageConfig(this.options.document.languageId)\n\n        // In StarCoder we have a special token to announce the path of the file\n        if (!isStarCoderFamily(this.model)) {\n            intro.push(ps`Path: ${PromptString.fromDisplayPath(this.options.document.uri)}`)\n        }\n\n        for (let snippetsToInclude = 0; snippetsToInclude < snippets.length + 1; snippetsToInclude++) {\n            if (snippetsToInclude > 0) {\n                const snippet = snippets[snippetsToInclude - 1]\n                const contextPrompts = PromptString.fromAutocompleteContextSnippet(snippet)\n\n                if (contextPrompts.symbol) {\n                    intro.push(\n                        ps`Additional documentation for \\`${contextPrompts.symbol}\\`:\\n\\n${contextPrompts.content}`\n                    )\n                } else {\n                    intro.push(\n                        ps`Here is a reference snippet of code from ${PromptString.fromDisplayPath(\n                            snippet.uri\n                        )}:\\n\\n${contextPrompts.content}`\n                    )\n                }\n            }\n\n            const joined = PromptString.join(intro, ps`\\n\\n`)\n            const introString = ps`${PromptString.join(\n                joined\n                    .split('\\n')\n                    .map(line => ps`${languageConfig ? languageConfig.commentStart : ps`// `}${line}`),\n                ps`\\n`\n            )}\\n`\n\n            const suffixAfterFirstNewline = getSuffixAfterFirstNewline(suffix)\n\n            const nextPrompt = this.createInfillingPrompt(\n                PromptString.fromDisplayPath(this.options.document.uri),\n                introString,\n                prefix,\n                suffixAfterFirstNewline\n            )\n\n            if (nextPrompt.length >= this.promptChars) {\n                return prompt\n            }\n\n            prompt = nextPrompt\n        }\n\n        return prompt\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/anthropic.ts:45-76"",""content"":""} from './provider'\n\nexport const SINGLE_LINE_STOP_SEQUENCES = [\n    anthropic.HUMAN_PROMPT,\n    CLOSING_CODE_TAG.toString(),\n    MULTILINE_STOP_SEQUENCE,\n]\n\nexport const MULTI_LINE_STOP_SEQUENCES = [\n    anthropic.HUMAN_PROMPT,\n    CLOSING_CODE_TAG.toString(),\n    MULTILINE_STOP_SEQUENCE,\n]\n\nconst lineNumberDependentCompletionParams = getLineNumberDependentCompletionParams({\n    singlelineStopSequences: SINGLE_LINE_STOP_SEQUENCES,\n    multilineStopSequences: MULTI_LINE_STOP_SEQUENCES,\n})\n\nlet isOutdatedSourcegraphInstanceWithoutAnthropicAllowlist = false\n\nexport interface AnthropicOptions {\n    model?: string // The model identifier that is being used by the server's site config.\n    maxContextTokens?: number\n    client: Pick<CodeCompletionsClient, 'complete'>\n}\n\nclass AnthropicProvider extends Provider {\n    private promptChars: number\n    private client: Pick<CodeCompletionsClient, 'complete'>\n    private model: string | undefined\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/fireworks.ts:298-316"",""content"":""    private createInfillingPrompt(\n        filename: PromptString,\n        intro: PromptString,\n        prefix: PromptString,\n        suffix: PromptString\n    ): PromptString {\n        if (isStarCoderFamily(this.model)) {\n            // c.f. https://huggingface.co/bigcode/starcoder#fill-in-the-middle\n            // c.f. https://arxiv.org/pdf/2305.06161.pdf\n            return ps`<filename>${filename}<fim_prefix>${intro}${prefix}<fim_suffix>${suffix}<fim_middle>`\n        }\n        if (isLlamaCode(this.model)) {\n            // c.f. https://github.com/facebookresearch/codellama/blob/main/llama/generation.py#L402\n            return ps`<PRE> ${intro}${prefix} <SUF>${suffix} <MID>`\n        }\n\n        console.error('Could not generate infilling prompt for', this.model)\n        return ps`${intro}${prefix}`\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-mixin.ts:0-22"",""content"":""import type { ChatMessage } from '../chat/transcript/messages'\nimport { PromptString, ps } from './prompt-string'\n\nconst identity = ps`Reply as Cody, a coding assistant developed by Sourcegraph.`\nconst hallucinate = ps`If context is available: never make any assumptions nor provide any misleading or hypothetical examples.`\nconst CODY_INTRO_PROMPT = ps`(${identity} ${hallucinate}) `\n\n/**\n * Prompt mixins elaborate every prompt presented to the LLM.\n * Add a prompt mixin to prompt for cross-cutting concerns relevant to multiple commands.\n */\nexport class PromptMixin {\n    private static mixins: PromptMixin[] = []\n    private static customMixin: PromptMixin[] = []\n    // The prompt that instructs Cody to identify itself and avoid hallucinations.\n    private static defaultMixin: PromptMixin = new PromptMixin(CODY_INTRO_PROMPT)\n\n    /**\n     * Adds a custom prompt mixin but not to the global set to make sure it will not be added twice\n     * and any new change could replace the old one.\n     */\n    public static addCustom(mixin: PromptMixin): void {\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/models/generic.ts:100-126"",""content"":""        instruction: psDedent`\n            This is part of the file: {filePath}\n\n            The user has the following code in their selection:\n            <${PROMPT_TOPICS.SELECTED}>{selectedText}</${PROMPT_TOPICS.SELECTED}>\n\n            The user wants you to generate documentation for the selected code by following their instructions.\n            Provide your generated documentation using the following instructions:\n            <${PROMPT_TOPICS.INSTRUCTIONS}>\n            {instruction}\n            </${PROMPT_TOPICS.INSTRUCTIONS}>`,\n    },\n}\n\nexport const buildGenericPrompt = (\n    intent: EditIntent,\n    { instruction, selectedText, uri }: GetLLMInteractionOptions\n): LLMPrompt => {\n    switch (intent) {\n        case 'edit':\n            return {\n                system: GENERIC_PROMPTS.edit.system,\n                instruction: GENERIC_PROMPTS.edit.instruction\n                    .replaceAll('{instruction}', instruction)\n                    .replaceAll('{selectedText}', selectedText)\n                    .replaceAll('{filePath}', PromptString.fromDisplayPath(uri)),\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/anthropic.ts:97-142"",""content"":""    private createPromptPrefix(): { messages: Message[]; prefix: PrefixComponents } {\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n\n        const prefixLines = prefix.split('\\n')\n        if (prefixLines.length === 0) {\n            throw new Error('no prefix lines')\n        }\n\n        const { head, tail, overlap } = getHeadAndTail(prefix)\n\n        // Infill block represents the code we want the model to complete\n        const infillBlock = tail.trimmed.toString().endsWith('{\\n')\n            ? tail.trimmed.trimEnd()\n            : tail.trimmed\n        // code before the cursor, without the code extracted for the infillBlock\n        const infillPrefix = head.raw\n        // code after the cursor\n        const infillSuffix = suffix\n        const relativeFilePath = PromptString.fromDisplayPath(this.options.document.uri)\n\n        const prefixMessagesWithInfill: Message[] = [\n            {\n                speaker: 'human',\n                text: ps`You are a code completion AI designed to take the surrounding code and shared context into account in order to predict and suggest high-quality code to complete the code enclosed in ${OPENING_CODE_TAG} tags. You only respond with code that works and fits seamlessly with surrounding code if any or use best practice and nothing else.`,\n            },\n            {\n                speaker: 'assistant',\n                text: ps`I am a code completion AI with exceptional context-awareness designed to auto-complete nested code blocks with high-quality code that seamlessly integrates with surrounding code.`,\n            },\n            {\n                speaker: 'human',\n                text: ps`Below is the code from file path ${relativeFilePath}. Review the code outside the XML tags to detect the functionality, formats, style, patterns, and logics in use. Then, use what you detect and reuse methods/libraries to complete and enclose completed code only inside XML tags precisely without duplicating existing implementations. Here is the code: \\n\\`\\`\\`\\n${\n                    infillPrefix ? infillPrefix : ''\n                }${OPENING_CODE_TAG}${CLOSING_CODE_TAG}${infillSuffix}\\n\\`\\`\\``,\n            },\n            {\n                speaker: 'assistant',\n                text: ps`${OPENING_CODE_TAG}${infillBlock}`,\n            },\n        ]\n\n        return { messages: prefixMessagesWithInfill, prefix: { head, tail, overlap } }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/experimental-ollama.ts:204-215"",""content"":""\n            // For the same reason above, we want a very small suffix because otherwise Ollama needs to\n            // reevaluate more tokens in the prompt. This is because the prompt is (roughly) `prefix\n            // (cursor position) suffix`, so even typing a single character at the cursor position\n            // invalidates the LLM's cache of the suffix.\n            suffixChars: 100,\n        },\n        identifier: PROVIDER_IDENTIFIER,\n        model: ollamaOptions.model,\n    }\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/fireworks.ts:161-221"",""content"":""    private createPrompt(snippets: AutocompleteContextSnippet[]): PromptString {\n        const { prefix, suffix } = PromptString.fromAutocompleteDocumentContext(\n            this.options.docContext,\n            this.options.document.uri\n        )\n\n        const intro: PromptString[] = []\n        let prompt = ps``\n\n        const languageConfig = getLanguageConfig(this.options.document.languageId)\n\n        // In StarCoder we have a special token to announce the path of the file\n        if (!isStarCoderFamily(this.model)) {\n            intro.push(ps`Path: ${PromptString.fromDisplayPath(this.options.document.uri)}`)\n        }\n\n        for (let snippetsToInclude = 0; snippetsToInclude < snippets.length + 1; snippetsToInclude++) {\n            if (snippetsToInclude > 0) {\n                const snippet = snippets[snippetsToInclude - 1]\n                const contextPrompts = PromptString.fromAutocompleteContextSnippet(snippet)\n\n                if (contextPrompts.symbol) {\n                    intro.push(\n                        ps`Additional documentation for \\`${contextPrompts.symbol}\\`:\\n\\n${contextPrompts.content}`\n                    )\n                } else {\n                    intro.push(\n                        ps`Here is a reference snippet of code from ${PromptString.fromDisplayPath(\n                            snippet.uri\n                        )}:\\n\\n${contextPrompts.content}`\n                    )\n                }\n            }\n\n            const introString = ps`${PromptString.join(\n                PromptString.join(intro, ps`\\n\\n`)\n                    .split('\\n')\n                    .map(line => ps`${languageConfig ? languageConfig.commentStart : ps`// `}${line}`),\n                ps`\\n`\n            )}\\n`\n\n            // We want to remove the same line suffix from a completion request since both StarCoder and Llama\n            // code can't handle this correctly.\n            const suffixAfterFirstNewline = getSuffixAfterFirstNewline(suffix)\n\n            const nextPrompt = this.createInfillingPrompt(\n                PromptString.fromDisplayPath(this.options.document.uri),\n                introString,\n                prefix,\n                suffixAfterFirstNewline\n            )\n\n            if (nextPrompt.length >= this.promptChars) {\n                return prompt\n            }\n\n            prompt = nextPrompt\n        }\n\n        return prompt\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:121-131"",""content"":""     * LLMs that support that kind of message, but that `speaker` value is not currently supported\n     * by the `Message` type.)\n     */\n    speaker: 'human'\n\n    /**\n     * The context item that this message introduces into the conversation.\n     */\n    file: ContextItem\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/anthropic.ts:146-182"",""content"":""    protected createPrompt(snippets: AutocompleteContextSnippet[]): {\n        messages: Message[]\n        prefix: PrefixComponents\n    } {\n        const { messages: prefixMessages, prefix } = this.createPromptPrefix()\n\n        const referenceSnippetMessages: Message[] = []\n\n        let remainingChars = this.promptChars - this.emptyPromptLength()\n\n        for (const snippet of snippets) {\n            const contextPrompts = PromptString.fromAutocompleteContextSnippet(snippet)\n\n            const snippetMessages: Message[] = [\n                {\n                    speaker: 'human',\n                    text: contextPrompts.symbol\n                        ? ps`Additional documentation for \\`${contextPrompts.symbol}\\`: ${OPENING_CODE_TAG}${contextPrompts.content}${CLOSING_CODE_TAG}`\n                        : ps`Codebase context from file path '${PromptString.fromDisplayPath(\n                              snippet.uri\n                          )}': ${OPENING_CODE_TAG}${contextPrompts.content}${CLOSING_CODE_TAG}`,\n                },\n                {\n                    speaker: 'assistant',\n                    text: ps`I will refer to this code to complete your next request.`,\n                },\n            ]\n            const numSnippetChars = messagesToText(snippetMessages).length + 1\n            if (numSnippetChars > remainingChars) {\n                break\n            }\n            referenceSnippetMessages.push(...snippetMessages)\n            remainingChars -= numSnippetChars\n        }\n\n        return { messages: [...referenceSnippetMessages, ...prefixMessages], prefix }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/configuration.ts:128-159"",""content"":""\n    /**\n     * Sets the size of the context window used to generate the next token.\n     * (Default: 2048)\n     */\n    num_ctx?: number\n\n    /**\n     * The temperature of the model. Increasing the temperature will make the model answer more creatively.\n     * (Default: 0.8)\n     */\n    temperature?: number\n\n    /**\n     * Sets the stop sequences to use. When this pattern is encountered the LLM will stop generating text and return.\n     * Multiple stop patterns may be set by specifying multiple separate stop parameters in a modelfile.\n     */\n    stop?: string[]\n\n    /**\n     * Reduces the probability of generating nonsense. A higher value (e.g. 100) will give more diverse answers,\n     * while a lower value (e.g. 10) will be more conservative.\n     * (Default: 40)\n     */\n    top_k?: number\n\n    /**\n     * Works together with top-k. A higher value (e.g., 0.95) will lead to more diverse text,\n     * while a lower value (e.g., 0.5) will generate more focused and conservative text.\n     * (Default: 0.9)\n     */\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/prompt/type.ts:3-6"",""content"":""export interface LLMPrompt {\n    system?: PromptString\n    instruction: PromptString\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/provider.ts:97-109"",""content"":""\n    /** Called with the result from the LLM. */\n    result(data: CompletionProviderTracerResultData): void\n}\n\nexport interface CompletionProviderTracerResultData {\n    /** The post-processed completions that are returned by the provider. */\n    completions: InlineCompletionItemWithAnalytics[]\n\n    /** Free-form text with debugging or timing information. */\n    debugMessage?: string\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-string.ts:314-316"",""content"":""    public static unsafe_fromLLMResponse(string: string): PromptString {\n        return internal_createPromptString(string, [])\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/prompt/prompt-string.ts:16-41"",""content"":""//\n// - Literal strings are considered \""safe\"". Literal strings are constructed with\n//   a tagged template function, `ps`, and a linter in `/lint/safe-prompts.ts`\n//   ensures the function is only used in a tagged template literal, not\n//   aliased, etc.\n// - There are a small set of functions for conveniently constructing strings\n//   from file contents. Use of these functions needs to be continually audited\n//   to ensure they're safe.\n// - Strings constructed from other safe strings, with `ps` or helper methods,\n//   are also safe.\n// - Components sending prompts to LLMs should consume safe strings, not raw\n//   strings.\n//\n// This setup is designed to detect programming errors, not thwart malicious\n// attacks.\n\n/**\n * A \""safe\"" string class for constructing prompts.\n */\nexport class PromptString {\n    /**\n     * @deprecated Do not use the constructor directly. Instead, use ps`...` or a\n     * PromptString helper to handle string data for prompts safely\n     *\n     * @param __debug The string that is wrapped by this PromptString. This is\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/llm-providers/google/utils.ts:15-22"",""content"":""export function constructGeminiChatMessages(messages: Message[]): GeminiChatMessage[] {\n    return messages\n        .map(msg => ({\n            role: msg.speaker === 'human' ? 'user' : 'model',\n            parts: [{ text: msg.text?.toString() ?? '' }],\n        }))\n        .filter((_, i, arr) => i !== arr.length - 1 || arr[i].role !== 'model')\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/provider.ts:57-97"",""content"":""\nexport interface ProviderOptions {\n    /**\n     * A unique and descriptive identifier for the provider.\n     */\n    id: string\n\n    position: Position\n    document: TextDocument\n    docContext: DocumentContext\n    multiline: boolean\n    /**\n     * Number of parallel LLM requests per completion.\n     */\n    n: number\n    /**\n     *  Timeout in milliseconds for the first completion to be yielded from the completions generator.\n     */\n    firstCompletionTimeout: number\n\n    // feature flags\n    hotStreak?: boolean\n}\n\nexport abstract class Provider {\n    constructor(public readonly options: Readonly<ProviderOptions>) {}\n\n    public abstract generateCompletions(\n        abortSignal: AbortSignal,\n        snippets: AutocompleteContextSnippet[],\n        tracer?: CompletionProviderTracer\n    ): AsyncGenerator<FetchCompletionResult[]>\n}\n\n/**\n * Tracer for {@link Provider}.\n */\nexport interface CompletionProviderTracer {\n    /** Called with the params passed to the LLM. */\n    params(params: CompletionParameters): void\n""}]",Find logic,,,1,,1,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_027/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the codebase context, remote searches are called in the following places:

1. In `cody_test/vscode/src/chat/chat-view/context.ts`, the `searchRemote` function calls the `remoteSearch.query` method to perform a remote search and retrieve search results.

2. In `cody_test/vscode/src/context/remote-search.ts`, the `RemoteSearch` class has a `query` method that sends the search query to the Sourcegraph search backend and returns the search results.

3. In `cody_test/vscode/src/chat/chat-view/SimpleChatPanelProvider.ts`, the `newSession` method sets the selected repositories for the `remoteSearch` instance, which is likely used for remote searches.

4. In `cody_test/vscode/src/chat/chat-view/SimpleChatPanelProvider.ts`, the constructor sets up the `remoteSearch` instance and adds it as a provider to the `contextStatusAggregator`, suggesting that the `remoteSearch` instance is used for displaying enhanced context status and potentially performing remote searches.

5. In `cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx`, there are event handlers for choosing and removing remote search repositories, indicating that the user can interact with remote search repositories, which likely triggers remote searches.

So, in summary, remote searches are primarily performed through the `RemoteSearch` class and its `query` method, and this functionality is used in various parts of the codebase, such as the chat view, context handling, and user interface components.",Where do we call remote searches?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:159-180"",""content"":""async function searchRemote(\n    remoteSearch: RemoteSearch | null,\n    userText: PromptString\n): Promise<ContextItem[]> {\n    return wrapInActiveSpan('chat.context.search.remote', async () => {\n        if (!remoteSearch) {\n            return []\n        }\n        return (await remoteSearch.query(userText)).map(result => {\n            return {\n                type: 'file',\n                content: result.content,\n                range: new vscode.Range(result.startLine, 0, result.endLine, 0),\n                uri: result.uri,\n                source: ContextItemSource.Unified,\n                repoName: result.repoName,\n                title: result.path,\n                revision: result.commit,\n            } satisfies ContextItem\n        })\n    })\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/search.html:0-20"",""content"":""<!DOCTYPE html>\n<html lang=\""en\"">\n\n<head>\n    <meta charset=\""UTF-8\"" />\n    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"" />\n    <!-- This content security policy also implicitly disables inline scripts and styles. -->\n    <meta http-equiv=\""Content-Security-Policy\""\n        content=\""default-src 'none'; img-src {cspSource} https:; script-src {cspSource}; style-src {cspSource}; font-src {cspSource};\"" />\n    <!-- DO NOT REMOVE: THIS FILE IS THE ENTRY FILE FOR CODY WEBVIEW -->\n    <title>Cody Search</title>\n</head>\n\n<body>\n    <div id=\""root\""></div>\n    <script type=\""module\"" src=\""search.tsx\""></script>\n</body>\n\n</html>\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/local-context/index.ts:21-24"",""content"":""export interface IRemoteSearch {\n    setWorkspaceUri(uri: URI): Promise<void>\n    search(query: PromptString): Promise<ContextItemFile[]>\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx:60-87"",""content"":""    onShouldBuildSymfIndex: (provider: LocalSearchProvider) => void\n}\n\nfunction useEnhancedContextContext(): EnhancedContextContextT {\n    return React.useContext(EnhancedContextContext)\n}\n\nfunction useEnhancedContextEventHandlers(): EnhancedContextEventHandlersT {\n    return React.useContext(EnhancedContextEventHandlers)\n}\n\n// Shortens a repository name into a more succinct--but ambiguous--display name.\nfunction briefName(name: string): string {\n    return name.slice(name.lastIndexOf('/') + 1)\n}\n\nconst CompactGroupsComponent: React.FunctionComponent<{\n    groups: readonly ContextGroup[]\n    handleChoose: () => void\n    handleRemove: (id: string) => void\n}> = ({ groups, handleChoose, handleRemove }): React.ReactNode => {\n    // The compact groups component is only used for enterprise context, which\n    // uses homogeneous remote search providers. Lift the providers out of the\n    // groups.\n    const liftedProviders: [string, RemoteSearchProvider][] = []\n    for (const group of groups) {\n        const providers = group.providers.filter(\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx:353-377"",""content"":""                // Checkbox click: `CodyVSCodeExtension:useEnhancedContextToggler:clicked`\n                // Button click: `CodyVSCodeExtension:useEnhancedContextTogglerBtn:clicked`\n                const eventName = source === 'btn' ? 'Btn' : ''\n                getVSCodeAPI().postMessage({\n                    command: 'event',\n                    eventName: `CodyVSCodeExtension:useEnhancedContextToggler${eventName}:clicked`,\n                    properties: { useEnhancedContext: shouldEnable },\n                })\n            }\n        },\n        [events, enabled]\n    )\n\n    // Handles removing a manually added remote search provider.\n    const handleRemoveRemoteSearchRepo = React.useCallback(\n        (id: string) => {\n            events.onRemoveRemoteSearchRepo(id)\n        },\n        [events]\n    )\n    const handleChooseRemoteSearchRepo = React.useCallback(\n        () => events.onChooseRemoteSearchRepo(),\n        [events]\n    )\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.story.tsx:211-235"",""content"":""                                    kind: 'search',\n                                    type: 'remote',\n                                    state: 'ready',\n                                    id: 'pqrxy',\n                                    inclusion: 'manual',\n                                },\n                            ],\n                        },\n                        {\n                            displayName: 'github.com/megacorp/bar',\n                            providers: [\n                                {\n                                    kind: 'search',\n                                    type: 'remote',\n                                    state: 'ready',\n                                    id: 'xgzwa',\n                                    inclusion: 'auto',\n                                },\n                            ],\n                        },\n                        {\n                            displayName: 'github.com/subsidiarycorp/handbook',\n                            providers: [\n                                {\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/SimpleChatPanelProvider.ts:1017-1043"",""content"":""\n    // #endregion\n    // =======================================================================\n    // #region session management\n    // =======================================================================\n\n    // A unique identifier for this SimpleChatPanelProvider instance used to identify\n    // it when a handle to this specific panel provider is needed.\n    public get sessionID(): string {\n        return this.chatModel.sessionID\n    }\n\n    // Sets the provider up for a new chat that is not being restored from a\n    // saved session.\n    public async newSession(): Promise<void> {\n        // Set the remote search's selected repos to the workspace repo list\n        // by default.\n        this.remoteSearch?.setRepos(\n            (await this.repoPicker?.getDefaultRepos()) || [],\n            RepoInclusion.Manual\n        )\n    }\n\n    // Attempts to restore the chat to the given sessionID, if it exists in\n    // history. If it does, then saves the current session and cancels the\n    // current in-progress completion. If the chat does not exist, then this\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:0-32"",""content"":""import * as vscode from 'vscode'\n\nimport {\n    type ConfigurationUseContext,\n    type ContextItem,\n    ContextItemSource,\n    MAX_BYTES_PER_FILE,\n    NUM_CODE_RESULTS,\n    NUM_TEXT_RESULTS,\n    type PromptString,\n    type Result,\n    isFileURI,\n    truncateTextNearestLine,\n    uriBasename,\n    wrapInActiveSpan,\n} from '@sourcegraph/cody-shared'\n\nimport type { RemoteSearch } from '../../context/remote-search'\nimport type { VSCodeEditor } from '../../editor/vscode-editor'\nimport type { ContextRankingController } from '../../local-context/context-ranking'\nimport type { LocalEmbeddingsController } from '../../local-context/local-embeddings'\nimport type { SymfRunner } from '../../local-context/symf'\nimport { logDebug, logError } from '../../log'\n\ninterface GetEnhancedContextOptions {\n    strategy: ConfigurationUseContext\n    editor: VSCodeEditor\n    text: PromptString\n    providers: {\n        localEmbeddings: LocalEmbeddingsController | null\n        symf: SymfRunner | null\n        remoteSearch: RemoteSearch | null\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/FileLink.tsx:43-65"",""content"":""\n    let tooltip: string\n    let pathWithRange: string\n    let href: string\n    let target: string | undefined\n    if (source === 'unified') {\n        // Remote search result.\n        const repoShortName = repoName?.slice(repoName.lastIndexOf('/') + 1)\n        const pathToDisplay = `${repoShortName} ${title}`\n        pathWithRange = range ? `${pathToDisplay}:${displayLineRange(range)}` : pathToDisplay\n        tooltip = `${repoName} @${revision}\\nincluded via Enhanced Context (Enterprise Search)`\n        // We can skip encoding when the uri path already contains '@'.\n        href = uri.toString(uri.path.includes('@'))\n        target = '_blank'\n    } else {\n        const pathToDisplay = `${displayPath(uri)}`\n        pathWithRange = range ? `${pathToDisplay}:${displayLineRange(range)}` : pathToDisplay\n        const openURI = webviewOpenURIForContextItem({ uri, range })\n        tooltip = isTooLarge ? WARNING : pathWithRange\n        href = openURI.href\n        target = openURI.target\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/README.md:44-60"",""content"":""\n## Cody Natural Language Search (Beta)\n\nCody builds a Search index of your local files to make it easier to find what you’re looking for. Use a natural language query like “password hashing” or \""connection retries\"" to quickly find and open the files that match your search.\n\n<img src=\""https://storage.googleapis.com/sourcegraph-assets/blog/vs-code-onboarding-walkthrough-dec-2023-natural-language.gif\"" width=\""480\"" alt=\""Natural Language Search\"">\n\n## Usage\n\nThis extension works for all Cody plans, including Cody Free, Cody Pro, and Cody Enterprise.\n\nYou can find detailed information about Cody's available plans [on our website](https://sourcegraph.com/pricing?utm_source=marketplace.visualstudio.com&utm_medium=referral).\n\n## Programming Languages\n\nCody works for any programming language because it uses LLMs trained on broad data. Cody works great with Python, Go, JavaScript, and TypeScript code.\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/context/repo-picker.ts:0-22"",""content"":""import * as vscode from 'vscode'\n\nimport { logDebug } from '../log'\nimport { RemoteSearch } from './remote-search'\nimport { type Repo, type RepoFetcher, RepoFetcherState } from './repo-fetcher'\nimport type { WorkspaceRepoMapper } from './workspace-repo-mapper'\n\n// A quickpick for choosing a set of repositories from a Sourcegraph instance.\nexport class RemoteRepoPicker implements vscode.Disposable {\n    private readonly maxSelectedRepoCount: number = RemoteSearch.MAX_REPO_COUNT - 1\n    private disposables: vscode.Disposable[] = []\n    private readonly quickpick: vscode.QuickPick<vscode.QuickPickItem & Repo>\n    private prefetchedRepos: Map<string, Repo> = new Map()\n\n    constructor(\n        private readonly fetcher: RepoFetcher,\n        private readonly workspaceRepoMapper: WorkspaceRepoMapper\n    ) {\n        this.fetcher.onRepoListChanged(() => this.handleRepoListChanged(), undefined, this.disposables)\n        this.fetcher.onStateChanged(\n            state => {\n                this.quickpick.busy = state === RepoFetcherState.Fetching\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/telemetry/index.ts:0-22"",""content"":""/**\n * A service to log telemetry data.\n */\nexport interface TelemetryService {\n    /**\n     * Log a telemetry event.\n     *\n     * PRIVACY: Do NOT include any potentially private information in `eventProperties`. These\n     * properties may get sent to analytics tools, so must not include private information, such as\n     * search queries or repository names.\n     * @param eventName The name of the event.\n     * @param properties Event properties. Do NOT include any private information, such as full URLs\n     * that may contain private repository names or search queries.\n     * @deprecated New callsites should use telemetryRecorder instead. Existing\n     * callsites should ALSO record an event using services/telemetry-v2\n     * as well and indicate this has happened, for example:\n     *\n     * logEvent(name, properties, { hasV2Event: true })\n     * telemetryRecorder.recordEvent(...)\n     *\n     * In the future, all usages of TelemetryService will be removed in\n     * favour of the new libraries. For more information, see:\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/protocol.md:488-509"",""content"":""<p>Notification sent from the server to the client.</p>\n\n\n```ts\n'progress/report': [ProgressReportParams]\n```\n<h2 id=\""progress_end\""><a href=\""#progress_end\"" name=\""progress_end\""><code>progress/end</code> (<img class=\""emoji\"" title=\"":arrow_right:\"" alt=\"":arrow_right:\"" src=\""https://github.githubassets.com/images/icons/emoji/unicode/27a1.png\"" height=\""20\"" width=\""20\"">)</a></h2>\n<p>Notification sent from the server to the client.</p>\n\n\n```ts\n'progress/end': [{ id: string; }]\n\n```ts\n'remoteRepo/*: ...'\n```\n\nMethods and notifications related to a remote list of repositories. Only for enterprise configurations. See [agent-protocol.ts].\n\n```\n<!-- PROTOCOL END -->\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/SimpleChatPanelProvider.ts:213-234"",""content"":""        )\n        this.disposables.push(this.contextStatusAggregator.addProvider(this.codebaseStatusProvider))\n\n        if (this.remoteSearch) {\n            this.disposables.push(\n                // Display enhanced context status from the remote search provider\n                this.contextStatusAggregator.addProvider(this.remoteSearch),\n\n                // When the codebase has a remote ID, include it automatically\n                this.codebaseStatusProvider.onDidChangeStatus(async () => {\n                    const codebase = await this.codebaseStatusProvider.currentCodebase()\n                    if (codebase?.remote && codebase.remoteRepoId) {\n                        this.remoteSearch?.setRepos(\n                            [\n                                {\n                                    name: codebase.remote,\n                                    id: codebase.remoteRepoId,\n                                },\n                            ],\n                            RepoInclusion.Automatic\n                        )\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/context-status.ts:28-62"",""content"":""\nexport interface LocalEmbeddingsProvider {\n    kind: 'embeddings'\n    state: 'indeterminate' | 'no-match' | 'unconsented' | 'indexing' | 'ready'\n    errorReason?: 'not-a-git-repo' | 'git-repo-has-no-remote'\n}\n\nexport type SearchProvider = LocalSearchProvider | RemoteSearchProvider\n\nexport interface LocalSearchProvider {\n    kind: 'search'\n    type: 'local'\n    state: 'unindexed' | 'indexing' | 'ready' | 'failed'\n}\n\nexport interface ContextGroup {\n    /** The directory that this context group represents. */\n    dir?: URI\n\n    /**\n     * Usually `basename(dir)`.\n     *\n     * TODO(sqs): when old remote embeddings code is removed, remove this field and compute it as\n     * late as possible for presentation only.\n     */\n    displayName: string\n\n    providers: ContextProvider[]\n}\n\n// TODO: rename to EnhancedContextStatusT\nexport interface EnhancedContextContextT {\n    groups: ContextGroup[]\n}\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/context/remote-search.ts:0-163"",""content"":""import * as vscode from 'vscode'\n\nimport {\n    type ContextGroup,\n    type ContextItem,\n    type ContextItemFile,\n    ContextItemSource,\n    type ContextSearchResult,\n    type ContextStatusProvider,\n    type Disposable,\n    type IRemoteSearch,\n    type PromptString,\n    graphqlClient,\n    isError,\n} from '@sourcegraph/cody-shared'\n\nimport type { URI } from 'vscode-uri'\nimport { getCodebaseFromWorkspaceUri } from '../repository/git-extension-api'\nimport type * as repofetcher from './repo-fetcher'\n\nexport enum RepoInclusion {\n    Automatic = 'auto',\n    Manual = 'manual',\n}\n\ninterface DisplayRepo {\n    displayName: string\n}\n\nexport class RemoteSearch implements ContextStatusProvider, IRemoteSearch {\n    public static readonly MAX_REPO_COUNT = 10\n\n    private statusChangedEmitter = new vscode.EventEmitter<ContextStatusProvider>()\n\n    // Repositories we are including automatically because of the workspace.\n    private reposAuto: Map<string, DisplayRepo> = new Map()\n\n    // Repositories the user has added manually.\n    private reposManual: Map<string, DisplayRepo> = new Map()\n\n    public dispose(): void {\n        this.statusChangedEmitter.dispose()\n    }\n\n    // #region ContextStatusProvider implementation.\n\n    public onDidChangeStatus(callback: (provider: ContextStatusProvider) => void): Disposable {\n        return this.statusChangedEmitter.event(callback)\n    }\n\n    public get status(): ContextGroup[] {\n        return [...this.getRepoIdSet()].map(id => {\n            const auto = this.reposAuto.get(id)\n            const manual = this.reposManual.get(id)\n            const displayName = auto?.displayName || manual?.displayName || '?'\n            return {\n                displayName,\n                providers: [\n                    {\n                        kind: 'search',\n                        type: 'remote',\n                        state: 'ready',\n                        id,\n                        inclusion: auto ? 'auto' : 'manual',\n                    },\n                ],\n            }\n        })\n    }\n\n    // #endregion\n\n    // Removes a manually included repository.\n    public removeRepo(repoId: string): void {\n        if (this.reposManual.delete(repoId)) {\n            this.statusChangedEmitter.fire(this)\n        }\n    }\n\n    // Sets the repos to search. RepoInclusion.Automatic is for repositories added\n    // automatically based on the workspace; these are presented differently\n    // and can't be removed by the user. RepoInclusion.Manual is for repositories\n    // added manually by the user.\n    public setRepos(repos: repofetcher.Repo[], inclusion: RepoInclusion): void {\n        const repoMap: Map<string, DisplayRepo> = new Map(\n            repos.map(repo => [repo.id, { displayName: repo.name }])\n        )\n        switch (inclusion) {\n            case RepoInclusion.Automatic: {\n                this.reposAuto = repoMap\n                break\n            }\n            case RepoInclusion.Manual: {\n                this.reposManual = repoMap\n                break\n            }\n        }\n        this.statusChangedEmitter.fire(this)\n    }\n\n    public getRepos(inclusion: RepoInclusion): repofetcher.Repo[] {\n        return [\n            ...(inclusion === RepoInclusion.Automatic ? this.reposAuto : this.reposManual).entries(),\n        ].map(([id, repo]) => ({ id, name: repo.displayName }))\n    }\n\n    // Gets the set of all repositories to search.\n    public getRepoIdSet(): Set<string> {\n        return new Set([...this.reposAuto.keys(), ...this.reposManual.keys()])\n    }\n\n    public async query(query: PromptString): Promise<ContextSearchResult[]> {\n        // Sending prompt strings to the Sourcegraph search backend is fine.\n        const result = await graphqlClient.contextSearch(this.getRepoIdSet(), query.toString())\n        if (result instanceof Error) {\n            throw result\n        }\n        return result || []\n    }\n\n    // IRemoteSearch implementation. This is only used for inline edit context.\n\n    public async setWorkspaceUri(uri: URI): Promise<void> {\n        const codebase = getCodebaseFromWorkspaceUri(uri)\n        if (!codebase) {\n            this.setRepos([], RepoInclusion.Automatic)\n            return\n        }\n        const repos = await graphqlClient.getRepoIds([codebase], 10)\n        if (isError(repos)) {\n            throw repos\n        }\n        this.setRepos(repos, RepoInclusion.Automatic)\n    }\n\n    public async search(query: PromptString): Promise<ContextItemFile[]> {\n        const results = await this.query(query)\n        if (isError(results)) {\n            throw results\n        }\n        return (results || []).map(\n            result =>\n                ({\n                    type: 'file',\n                    uri: result.uri,\n                    repoName: result.repoName,\n                    revision: result.commit,\n                    source: ContextItemSource.Unified,\n                    content: result.content,\n                    range: {\n                        start: {\n                            line: result.startLine,\n                            character: 0,\n                        },\n                        end: {\n                            line: result.endLine,\n                            character: 0,\n                        },\n                    },\n                }) satisfies ContextItem\n        )\n    }\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/SearchPanel.tsx:249-272"",""content"":""                <div className={styles.searchInputContainer}>\n                    <textarea\n                        placeholder=\""Search\""\n                        className={styles.searchInput}\n                        onChange={onInputChange}\n                        onKeyDown={onInputKeyDown}\n                        ref={queryInputRef}\n                    />\n                </div>\n            </form>\n            {!searching && query.trim().length === 0 && (\n                <p className={styles.instructions}>\n                    Search for code using a natural language query, such as “password hashing”,\n                    \""connection retries\"", a symbol name, or a topic.\n                </p>\n            )}\n            {!searching && results.length === 0 && query.trim().length !== 0 && (\n                <p className={styles.instructions}>No results found</p>\n            )}\n            <div className={styles.searchResultsContainer}>\n                {results.map((result, fileIndex) => (\n                    <>\n                        {/* File result */}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/agent-protocol.ts:175-202"",""content"":""        {\n            error: string | null\n            repoNames: string[]\n            limitHit: boolean\n        },\n    ]\n\n    // Gets whether the specific repo name is known on the remote.\n    'remoteRepo/has': [{ repoName: string }, { result: boolean }]\n\n    // Gets paginated list of repositories matching a fuzzy search query (or ''\n    // for all repositories.) Remote repositories are fetched concurrently, so\n    // subscribe to 'remoteRepo/didChange' to invalidate results.\n    //\n    // At the end of the list, returns an empty list of repositories.\n    // If `afterId` is specified, but not in the query result set,\n    // `startIndex` is -1.\n    //\n    // remoteRepo/list caches a single query result, making it efficient to page\n    // through a large list of results provided the query is the same.\n    'remoteRepo/list': [\n        {\n            // The user input to perform a fuzzy match with\n            query?: string\n            // The maximum number of results to retrieve\n            first: number\n            // The repository ID of the last result in the previous\n""}]",Find logic,,,1,,0,false,,,,,,,,,,,,,,,,
yaml,chat-context,claude-3-sonnet,chat,question_028/question.yaml,9cddf3856b5a55fc00e1ad07be3e6d6ad982b474,,,,0,0,0,0,,,,,,,,,,,"Based on the provided code context, the types of completions seem to be checked in the `cody_test/agent/src/cli/scip-codegen/scip.ts` file. Specifically, there is a union type defined that checks for different types of completions, such as `SingleType`, `ConstantType`, `IntersectionType`, `UnionType`, `WithType`, `StructuralType`, `AnnotatedType`, `ExistentialType`, `UniversalType`, `ByNameType`, `RepeatedType`, `MatchType`, `LambdaType`, `ThisType`, and `SuperType`.

For example, here's a snippet from that file:

```typescript
export type Type =
      | {
              type_ref?: never
              single_type?: SingleType
              this_type?: never
              super_type?: never
              constant_type?: ConstantType
              intersection_type?: never
              union_type?: never
              with_type?: never
              structural_type?: never
              annotated_type?: never
              existential_type?: never
              universal_type?: never
              by_name_type?: never
              repeated_type?: never
              match_type?: never
              lambda_type?: never
          }
      | {
              type_ref?: never
              single_type?: never
              this_type?: never
              super_type?: never
              constant_type?: never
              intersection_type?: IntersectionType
              // ... (other types omitted for brevity)
```

This union type seems to be used to handle different types of completions in the context of the `scip-codegen` module.",Where do we check for completion types?,"[{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/completions/types.ts:16-33"",""content"":""export interface DocumentContext extends DocumentDependentContext, LinesContext {\n    position: vscode.Position\n    multilineTrigger: string | null\n    multilineTriggerPosition: vscode.Position | null\n    /**\n     * A temporary workaround for the fact that we cannot modify `TextDocument` text.\n     * Having these fields set on a `DocumentContext` means we can still get the full\n     * document text in the `parse-completion` function with the \""virtually\"" inserted\n     * completion text.\n     *\n     * TODO(valery): we need a better abstraction that would allow us to mutate\n     * the `TextDocument` text in memory without actually pasting it into the `TextDocument`\n     * and that would not require copy-pasting and modifying the whole document text\n     * on every completion update or new virtual completion creation.\n     */\n    injectedCompletionText?: string\n    positionWithoutInjectedCompletionText?: vscode.Position\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/index.ts:0-2"",""content"":""export type { Message } from './completions/types'\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/types.ts:0-59"",""content"":""import type * as vscode from 'vscode'\n\nimport type { AutocompleteContextSnippet, DocumentContext } from '@sourcegraph/cody-shared'\nimport type { LastInlineCompletionCandidate } from './get-inline-completions'\n\n/**\n * @see vscode.InlineCompletionItem\n */\nexport interface InlineCompletionItem {\n    insertText: string\n    /**\n     * The range to replace.\n     * Must begin and end on the same line.\n     *\n     * Prefer replacements over insertions to provide a better experience when the user deletes typed text.\n     */\n    range?: vscode.Range\n}\n\nexport interface ContextRetrieverOptions {\n    document: vscode.TextDocument\n    position: vscode.Position\n    docContext: DocumentContext\n    hints: {\n        maxChars: number\n        maxMs: number\n    }\n    lastCandidate?: LastInlineCompletionCandidate\n    abortSignal?: AbortSignal\n}\n\n/**\n * Interface for a general purpose retrieval strategy. During the retrieval phase, all retrievers\n * that are outlined in the execution plan will be called concurrently.\n */\nexport interface ContextRetriever extends vscode.Disposable {\n    /**\n     * The identifier of the retriever. Used for logging purposes.\n     */\n    identifier: string\n\n    /**\n     * Start a retrieval processes. Implementers should observe the hints to return the best results\n     * in the available time.\n     *\n     * The client hints signalize _soft_ timeouts. When a hard timeout is reached, the retriever's\n     * results will not be taken into account anymore so it's suggested to return _something_ during\n     * the maxMs time.\n     *\n     * The abortSignal can be used to detect when the completion request becomes invalidated. When\n     * triggered, any further work is ignored so you can stop immediately.\n     */\n    retrieve(options: ContextRetrieverOptions): Promise<AutocompleteContextSnippet[]>\n\n    /**\n     * Return true if the retriever supports the given languageId.\n     */\n    isSupportedForLanguageId(languageId: string): boolean\n}\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2372-2394"",""content"":""                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: SuperType\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2478-2500"",""content"":""                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: AnnotatedType\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/text-processing/process-inline-completions.ts:123-127"",""content"":""interface GetNodeTypesInfoParams {\n    position: Position\n    parseTree?: Tree\n    multilineTriggerPosition: Position | null\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2350-2372"",""content"":""                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: ThisType\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/text-processing/process-inline-completions.ts:129-160"",""content"":""function getNodeTypesInfo(\n    params: GetNodeTypesInfoParams\n): InlineCompletionItemWithAnalytics['nodeTypes'] | undefined {\n    const { position, parseTree, multilineTriggerPosition } = params\n\n    const positionBeforeCursor = asPoint({\n        line: position.line,\n        character: Math.max(0, position.character - 1),\n    })\n\n    if (parseTree) {\n        const captures = getNodeAtCursorAndParents(parseTree.rootNode, positionBeforeCursor)\n\n        if (captures.length > 0) {\n            const [atCursor, ...parents] = captures\n            const lastAncestorOnTheSameLine = findLastAncestorOnTheSameRow(\n                parseTree.rootNode,\n                asPoint(multilineTriggerPosition || position)\n            )\n\n            return {\n                atCursor: atCursor.node.type,\n                parent: parents[0]?.node.type,\n                grandparent: parents[1]?.node.type,\n                greatGrandparent: parents[2]?.node.type,\n                lastAncestorOnTheSameLine: lastAncestorOnTheSameLine?.type,\n            }\n        }\n    }\n\n    return undefined\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2584-2605"",""content"":""                              repeated_type?: never\n                              match_type?: MatchType\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: LambdaType\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:3655-3657"",""content"":""        set types(value: Type[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2436-2457"",""content"":""                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: WithType\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:3740-3742"",""content"":""        set types(value: Type[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2457-2478"",""content"":""                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: StructuralType\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:3825-3827"",""content"":""        set types(value: Type[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value)\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2500-2521"",""content"":""                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: ExistentialType\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:6-8"",""content"":""interface CompletionEvent extends CompletionResponse {\n    type: 'completion'\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2415-2436"",""content"":""                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: UnionType\n                              with_type?: never\n                              structural_type?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:23-26"",""content"":""export interface CompletionResponse {\n    completion: string\n    stopReason: string\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2521-2542"",""content"":""                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: UniversalType\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:39-43"",""content"":""export interface CompletionCallbacks {\n    onChange: (text: string) => void\n    onComplete: () => void\n    onError: (error: Error, statusCode?: number) => void\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2329-2350"",""content"":""                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: SingleType\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:28-37"",""content"":""export interface CompletionParameters {\n    fast?: boolean\n    messages: Message[]\n    maxTokensToSample: number\n    temperature?: number\n    stopSequences?: string[]\n    topK?: number\n    topP?: number\n    model?: string\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2563-2584"",""content"":""                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: RepeatedType\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/test-helpers.ts:17-31"",""content"":""export function completion(string: TemplateStringsArray, ...values: unknown[]): CompletionResponse {\n    const raw = dedent(string, ...values)\n    let completion = raw\n\n    const start = raw.indexOf('├')\n    const end = raw.lastIndexOf('┤')\n    if (0 <= start && start <= end) {\n        completion = raw.slice(start + 1, end)\n    }\n\n    return {\n        completion,\n        stopReason: 'unknown',\n    }\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2855-2869"",""content"":""            super_type?: ReturnType<typeof SuperType.prototype.toObject>\n            constant_type?: ReturnType<typeof ConstantType.prototype.toObject>\n            intersection_type?: ReturnType<typeof IntersectionType.prototype.toObject>\n            union_type?: ReturnType<typeof UnionType.prototype.toObject>\n            with_type?: ReturnType<typeof WithType.prototype.toObject>\n            structural_type?: ReturnType<typeof StructuralType.prototype.toObject>\n            annotated_type?: ReturnType<typeof AnnotatedType.prototype.toObject>\n            existential_type?: ReturnType<typeof ExistentialType.prototype.toObject>\n            universal_type?: ReturnType<typeof UniversalType.prototype.toObject>\n            by_name_type?: ReturnType<typeof ByNameType.prototype.toObject>\n            repeated_type?: ReturnType<typeof RepeatedType.prototype.toObject>\n            match_type?: ReturnType<typeof MatchType.prototype.toObject>\n            lambda_type?: ReturnType<typeof LambdaType.prototype.toObject>\n        }): Type {\n""},{""source"":""search"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/get-completion-params.ts:10-13"",""content"":""interface LineNumberDependentCompletionParamsByType {\n    singlelineParams: LineNumberDependentCompletionParams\n    multilineParams: LineNumberDependentCompletionParams\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2542-2563"",""content"":""                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: ByNameType\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n""},{""source"":""embeddings"",""file"":""/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2394-2415"",""content"":""                              super_type?: never\n                              constant_type?: ConstantType\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: IntersectionType\n""}]",Find logic,,,0,,1,false,,,,,,,,,,,,,,,,
