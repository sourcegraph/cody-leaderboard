 question: What all different CodeSearch services are being used by Cody context?
# CHAT
# CHAT_QUESTION What all different CodeSearch services are being used by Cody context?

# CHAT_REPLY Based on the provided code snippets, Cody context uses these CodeSearch services:
# CHAT_REPLY 
# CHAT_REPLY * **Remote Search:** This service allows Cody to search across your entire codebase on Sourcegraph. It's used for features like finding file references, understanding how components are used across projects, and providing context-aware code completions. (`cody_test/vscode/src/context/remote-search.ts`)
# CHAT_REPLY * **Local Search:** This service allows Cody to search within your locally opened files and workspace. It's used for features like finding symbol definitions, understanding the structure of your current file, and providing basic code intelligence. This is implied by the existence of `RemoteSearch` and the need for both local and remote context.
# CHAT_REPLY 
# CHAT_REPLY Let me know if you have more questions about Cody's context or any other part of the codebase!

# CONTEXT_ITEMS [{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:1466-1491","content":"\n## [0.1.5]\n\n### Added\n\n### Fixed\n\n- Inline Assist broken decorations for Inline-Fixup tasks [pull/52322](https://github.com/sourcegraph/sourcegraph/pull/52322)\n\n### Changed\n\n- Various Cody completions related improvements [pull/52365](https://github.com/sourcegraph/sourcegraph/pull/52365)\n\n## [0.1.4]\n\n### Added\n\n- Added support for local keyword search on Windows. [pull/52251](https://github.com/sourcegraph/sourcegraph/pull/52251)\n\n### Fixed\n\n- Setting `cody.useContext` to `none` will now limit Cody to using only the currently open file. [pull/52126](https://github.com/sourcegraph/sourcegraph/pull/52126)\n- Fixes race condition in telemetry. [pull/52279](https://github.com/sourcegraph/sourcegraph/pull/52279)\n- Don't search for file paths if no file paths to validate. [pull/52267](https://github.com/sourcegraph/sourcegraph/pull/52267)\n- Fix handling of embeddings search backward compatibility. [pull/52286](https://github.com/sourcegraph/sourcegraph/pull/52286)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/context/enterprise-context-factory.ts:39-41","content":"    public createRemoteSearch(): RemoteSearch {\n        return new RemoteSearch()\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/index.ts:0-25","content":"import * as vscode from 'vscode'\n\nimport { type CodyCommandContext, type ContextItem, isCodyIgnoredFile } from '@sourcegraph/cody-shared'\n\nimport { Utils } from 'vscode-uri'\nimport { logDebug } from '../../log'\nimport { getContextFileFromCurrentFile } from './current-file'\nimport { getContextFileFromDirectory } from './directory'\nimport { getContextFileFromUri } from './file-path'\nimport { getContextFileFromTabs } from './open-tabs'\nimport { getContextFileFromCursor } from './selection'\n\n/**\n * Gets the context files for a Cody command based on the given configuration.\n *\n * This handles getting context files from the selection, current file,\n * file path, directories, and open tabs based on the `config` object passed in.\n *\n * Context from context.command is added during the initial step in CommandController.\n *\n * The returned context files are filtered to remove any files ignored by Cody.\n */\nexport const getCommandContextFiles = async (config: CodyCommandContext): Promise<ContextItem[]> => {\n    try {\n        const contextFiles: ContextItem[] = []\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:92-108","content":"\n### Document\n\n- [ ] Verify that the option to run the `Document Code` command is available in the following locations:\n  - [ ] Sidebar `Document Code`\n  - [ ] Context (right-click) menu `Cody > Document Code`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Document Code`\n  - [ ] Cody Command Menu (option+c, `Document Code`)\n- [ ] Highlight a section of code in a file.\n- [ ] Run the `Document Code` command.\n- [ ] Verify that an icon appears above the highlighted code with \"Cody is working...\" while Cody generates documentation.\n- [ ] Verify that you can see a diff view of the generated documentation in a new tab by clicking `Show diff`.\n- [ ] Verify that you can prompt Cody to retry the command by clicking `Retry` and entering new instructions.\n- [ ] Verify that you can undo the documentation by clicking `Undo`.\n- [ ] Verify that the ghost text disappears by clicking `Accept`.\n- [ ] Move your cursor inside a function in the file without highlighting code, before running the `Document Code` command again.\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:1214-1234","content":"\n### Fixed\n\n### Changed\n\n- The setting `cody.autocomplete.experimental.triggerMoreEagerly` (which causes autocomplete to trigger earlier, before you type a space or other non-word character) now defaults to `true`.\n- If you run the `Trigger Inline Suggestion` VS Code action, 3 suggestions instead of just 1 will be shown.\n\n## [0.6.1]\n\n### Added\n\n- A new experimental user setting `cody.autocomplete.experimental.triggerMoreEagerly` causes autocomplete to trigger earlier, before you type a space or other non-word character.\n- [Internal Only] `Custom Recipe`: Support context type selection when creating a new recipe via UI. [pull/279](https://github.com/sourcegraph/cody/pull/279)\n- New `/open` command for opening workspace files from chat box. [pull/327](https://github.com/sourcegraph/cody/pull/327)\n\n### Fixed\n\n- Insert at Cusor now inserts the complete code snippets at cursor position. [pull/282](https://github.com/sourcegraph/cody/pull/282)\n- Minimizing the change of Cody replying users with response related to the language-uage prompt. [pull/279](https://github.com/sourcegraph/cody/pull/279)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/local-context/context-ranking.ts:113-119","content":"    private getService(): Promise<MessageHandler> {\n        if (!this.service) {\n            const instance = CodyEngineService.getInstance(this.context)\n            this.service = instance.getService(this.setupContextRankingService)\n        }\n        return this.service\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:1412-1423","content":"- Cody Inline Assist: Decorations for `/fix` errors. [pull/52796](https://github.com/sourcegraph/sourcegraph/pull/52796)\n- Open file paths from Cody's responses in workspace. [pull/53069](https://github.com/sourcegraph/sourcegraph/pull/53069)\n- Help & Getting Started: Walkthrough to help users get setup with Cody and discover new features. [pull/52560](https://github.com/sourcegraph/sourcegraph/pull/52560)\n\n### Fixed\n\n- Cody Inline Assist: Decorations for `/fix` on light theme. [pull/52796](https://github.com/sourcegraph/sourcegraph/pull/52796)\n- Cody Inline Assist: Use more than 1 context file for `/touch`. [pull/52796](https://github.com/sourcegraph/sourcegraph/pull/52796)\n- Cody Inline Assist: Fixes cody processing indefinitely issue. [pull/52796](https://github.com/sourcegraph/sourcegraph/pull/52796)\n- Cody completions: Various fixes for completion analytics. [pull/52935](https://github.com/sourcegraph/sourcegraph/pull/52935)\n- Cody Inline Assist: Indentation on `/fix` [pull/53068](https://github.com/sourcegraph/sourcegraph/pull/53068)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/context/remote-search.ts:29-162","content":"export class RemoteSearch implements ContextStatusProvider, IRemoteSearch {\n    public static readonly MAX_REPO_COUNT = 10\n\n    private statusChangedEmitter = new vscode.EventEmitter<ContextStatusProvider>()\n\n    // Repositories we are including automatically because of the workspace.\n    private reposAuto: Map<string, DisplayRepo> = new Map()\n\n    // Repositories the user has added manually.\n    private reposManual: Map<string, DisplayRepo> = new Map()\n\n    public dispose(): void {\n        this.statusChangedEmitter.dispose()\n    }\n\n    // #region ContextStatusProvider implementation.\n\n    public onDidChangeStatus(callback: (provider: ContextStatusProvider) => void): Disposable {\n        return this.statusChangedEmitter.event(callback)\n    }\n\n    public get status(): ContextGroup[] {\n        return [...this.getRepoIdSet()].map(id => {\n            const auto = this.reposAuto.get(id)\n            const manual = this.reposManual.get(id)\n            const displayName = auto?.displayName || manual?.displayName || '?'\n            return {\n                displayName,\n                providers: [\n                    {\n                        kind: 'search',\n                        type: 'remote',\n                        state: 'ready',\n                        id,\n                        inclusion: auto ? 'auto' : 'manual',\n                    },\n                ],\n            }\n        })\n    }\n\n    // #endregion\n\n    // Removes a manually included repository.\n    public removeRepo(repoId: string): void {\n        if (this.reposManual.delete(repoId)) {\n            this.statusChangedEmitter.fire(this)\n        }\n    }\n\n    // Sets the repos to search. RepoInclusion.Automatic is for repositories added\n    // automatically based on the workspace; these are presented differently\n    // and can't be removed by the user. RepoInclusion.Manual is for repositories\n    // added manually by the user.\n    public setRepos(repos: repofetcher.Repo[], inclusion: RepoInclusion): void {\n        const repoMap: Map<string, DisplayRepo> = new Map(\n            repos.map(repo => [repo.id, { displayName: repo.name }])\n        )\n        switch (inclusion) {\n            case RepoInclusion.Automatic: {\n                this.reposAuto = repoMap\n                break\n            }\n            case RepoInclusion.Manual: {\n                this.reposManual = repoMap\n                break\n            }\n        }\n        this.statusChangedEmitter.fire(this)\n    }\n\n    public getRepos(inclusion: RepoInclusion): repofetcher.Repo[] {\n        return [\n            ...(inclusion === RepoInclusion.Automatic ? this.reposAuto : this.reposManual).entries(),\n        ].map(([id, repo]) => ({ id, name: repo.displayName }))\n    }\n\n    // Gets the set of all repositories to search.\n    public getRepoIdSet(): Set<string> {\n        return new Set([...this.reposAuto.keys(), ...this.reposManual.keys()])\n    }\n\n    public async query(query: PromptString): Promise<ContextSearchResult[]> {\n        // Sending prompt strings to the Sourcegraph search backend is fine.\n        const result = await graphqlClient.contextSearch(this.getRepoIdSet(), query.toString())\n        if (result instanceof Error) {\n            throw result\n        }\n        return result || []\n    }\n\n    // IRemoteSearch implementation. This is only used for inline edit context.\n\n    public async setWorkspaceUri(uri: URI): Promise<void> {\n        const codebase = getCodebaseFromWorkspaceUri(uri)\n        if (!codebase) {\n            this.setRepos([], RepoInclusion.Automatic)\n            return\n        }\n        const repos = await graphqlClient.getRepoIds([codebase], 10)\n        if (isError(repos)) {\n            throw repos\n        }\n        this.setRepos(repos, RepoInclusion.Automatic)\n    }\n\n    public async search(query: PromptString): Promise<ContextItemFile[]> {\n        const results = await this.query(query)\n        if (isError(results)) {\n            throw results\n        }\n        return (results || []).map(\n            result =>\n                ({\n                    type: 'file',\n                    uri: result.uri,\n                    repoName: result.repoName,\n                    revision: result.commit,\n                    source: ContextItemSource.Unified,\n                    content: result.content,\n                    range: {\n                        start: {\n                            line: result.startLine,\n                            character: 0,\n                        },\n                        end: {\n                            line: result.endLine,\n                            character: 0,\n                        },\n                    },\n                }) satisfies ContextItem\n        )\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:993-1016","content":"          \"order\": 99,\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enables verbose debug output. Debug messages may contain more details if the invocation includes verbose information.\"\n        },\n        \"cody.debug.filter\": {\n          \"order\": 99,\n          \"type\": \"string\",\n          \"markdownDescription\": \"Regular expression to filter debug output. If empty, defaults to '.*', which prints all messages.\"\n        },\n        \"cody.telemetry.level\": {\n          \"order\": 99,\n          \"type\": \"string\",\n          \"enum\": [\"all\", \"off\"],\n          \"enumDescriptions\": [\"Sends usage data and errors.\", \"Disables all extension telemetry.\"],\n          \"markdownDescription\": \"Controls the telemetry about Cody usage and errors. See [Cody usage and privacy notice](https://about.sourcegraph.com/terms/cody-notice).\",\n          \"default\": \"all\"\n        },\n        \"cody.autocomplete.advanced.provider\": {\n          \"type\": \"string\",\n          \"default\": null,\n          \"enum\": [\n            null,\n            \"anthropic\",\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1050-1068","content":"          \"markdownDescription\": \"Prevent autocomplete requests while inside code comments.\"\n        },\n        \"cody.experimental.foldingRanges\": {\n          \"type\": \"string\",\n          \"enum\": [\"lsp\", \"indentation-based\"],\n          \"enumDescriptions\": [\n            \"Use folding ranges that are enabled by default in VS Code, and are usually powered by LSP\",\n            \"Use custom implementation of folding ranges that is indentation based. This is the implementation that is used by other Cody clients like the JetBrains plugin\"\n          ],\n          \"markdownDescription\": \"Determines the algorithm Cody uses to detect folding ranges. Cody uses folding ranges for several features like the 'Document code' command\",\n          \"default\": \"all\"\n        },\n        \"cody.experimental.hoverCommands\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"markdownDescription\": \"Display commands in hover tooltips for code elements.\",\n          \"description\": \"%config.experimental.hoverCommands%\",\n          \"tags\": [\"experimental\", \"feature-flag\"]\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/CHANGELOG.md:1123-1136","content":"\n- Cody Commands: Add tab-to-complete & enter-to-complete behavior. [pull/606](https://github.com/sourcegraph/cody/pull/606)\n- Option to toggle `cody.experimental.editorTitleCommandIcon` setting through status bar. [pull/611](https://github.com/sourcegraph/cody/pull/611)\n- New walkthrough for Cody Commands. [pull/648](https://github.com/sourcegraph/cody/pull/648)\n\n### Fixed\n\n- Update file link color to match buttons. [pull/600](https://github.com/sourcegraph/cody/pull/600)\n- Handle `socket hung up` errors that are not caused by the `stop generating` button. [pull/598](https://github.com/sourcegraph/cody/pull/598)\n- Fix \"Reload Window\" appearing in all VS Code views. [pull/603](https://github.com/sourcegraph/cody/pull/603)\n- Fixes issues where in some instances, suggested autocomplete events were under counted. [pull/649](https://github.com/sourcegraph/cody/pull/649)\n- Various smaller tweaks to autocomplete analytics. [pull/644](https://github.com/sourcegraph/cody/pull/644)\n- Includes the correct pre-release version in analytics events. [pull/641](https://github.com/sourcegraph/cody/pull/641)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx:63-65","content":"function useEnhancedContextContext(): EnhancedContextContextT {\n    return React.useContext(EnhancedContextContext)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1016-1033","content":"            \"fireworks\",\n            \"unstable-openai\",\n            \"experimental-ollama\",\n            \"experimental-openaicompatible\"\n          ],\n          \"markdownDescription\": \"The provider used for code autocomplete. Most providers other than `anthropic` require the `cody.autocomplete.advanced.serverEndpoint` and `cody.autocomplete.advanced.accessToken` settings to also be set. Check the Cody output channel for error messages if autocomplete is not working as expected.\"\n        },\n        \"cody.autocomplete.advanced.serverEndpoint\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"The server endpoint used for code autocomplete. This is only supported with a provider other than `anthropic`.\"\n        },\n        \"cody.autocomplete.advanced.accessToken\": {\n          \"type\": \"string\",\n          \"markdownDescription\": \"The access token used for code autocomplete. This is only supported with a provider other than `anthropic`.\"\n        },\n        \"cody.autocomplete.advanced.model\": {\n          \"type\": \"string\",\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:940-962","content":"          \"examples\": [\"Answer all my questions in Spanish.\"]\n        },\n        \"cody.edit.preInstruction\": {\n          \"order\": 7,\n          \"type\": \"string\",\n          \"markdownDescription\": \"A custom instruction to be included at the end of all instructions for edit commands (e.g. \\\"Write all unit tests with Jest instead of detected framework.\\\")\",\n          \"examples\": [\"Write all unit tests with Jest instead of detected framework.\"]\n        },\n        \"cody.codeActions.enabled\": {\n          \"order\": 11,\n          \"title\": \"Cody Code Actions\",\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Add Cody options to Quick Fix menus for fixing, explaining, documenting, and editing code.\",\n          \"default\": true\n        },\n        \"cody.commandHints.enabled\": {\n          \"order\": 12,\n          \"title\": \"Cody Command Hints\",\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Enable hints for Cody commands such as \\\"Opt+K to Edit\\\" or \\\"Opt+D to Document\\\"\",\n          \"default\": true\n        },\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/cody-ignore.ts:0-229","content":"import * as vscode from 'vscode'\n\nimport {\n    CODY_IGNORE_POSIX_GLOB,\n    type ConfigurationWithAccessToken,\n    type IgnoreFileContent,\n    ignores,\n} from '@sourcegraph/cody-shared'\n\nimport { logDebug } from '../log'\nimport { telemetryService } from './telemetry'\nimport { telemetryRecorder } from './telemetry-v2'\n\nconst utf8 = new TextDecoder('utf-8')\n\n/**\n * Parses `.code/ignore` files from the workspace and sets up a watcher to refresh\n * whenever the files change.\n *\n * NOTE: Execute ONCE at extension activation time.\n */\nexport function setUpCodyIgnore(config: ConfigurationWithAccessToken): vscode.Disposable[] {\n    ignores.setActiveState(config.internalUnstable)\n    if (!config.internalUnstable) {\n        return []\n    }\n\n    // Enable ignore and then handle existing workspace folders.\n    vscode.workspace.workspaceFolders?.map(async wf => await refresh(wf.uri))\n\n    const disposables: vscode.Disposable[] = []\n\n    // Refresh ignore rules when any ignore file in the workspace changes.\n    const watcher = vscode.workspace.createFileSystemWatcher(CODY_IGNORE_POSIX_GLOB)\n    watcher.onDidChange(refresh)\n    watcher.onDidCreate(refresh)\n    watcher.onDidDelete(refresh)\n\n    // Handle any added/removed workspace folders.\n    const didChangeSubscription = vscode.workspace.onDidChangeWorkspaceFolders(e => {\n        e.added.map(wf => refresh(wf.uri))\n        e.removed.map(wf => clear(wf))\n    })\n\n    const onDidChangeConfig = vscode.workspace.onDidChangeConfiguration(e => {\n        // NOTE This can be removed once cody ignore is stable.\n        if (e.affectsConfiguration('cody')) {\n            onConfigChange()\n        }\n        // NOTE This allows us to search for the ignore files again\n        // if the user changes the search.symlinks setting.\n        if (e.affectsConfiguration('search')) {\n            // Only refresh if the ignore sidebar is empty,\n            // which means the setup step has initially failed.\n            if (ignores.isActive && !ignores.hasCodyIgnoreFiles) {\n                onConfigChange()\n            }\n        }\n    })\n\n    disposables.push(...[watcher, didChangeSubscription, onDidChangeConfig])\n    return disposables\n}\n\n/**\n * The cancellation tokens for finding workspace ignore file processes.\n */\nconst findInProgressTokens = new Map<string, vscode.CancellationTokenSource>()\n\n/**\n * Refreshes the ignore rules for the given workspace URI by searching\n * for `.cody/ignore` files and reading their contents. This allows\n * dynamically updating the ignore rules as ignore files are added/removed.\n *\n * Cancels any existing findFiles processes for the workspace to avoid\n * multiple concurrent processes. Also sets a timeout of 1 min to avoid long running\n * processes.\n */\nasync function refresh(uri: vscode.Uri): Promise<void> {\n    // Skip refresh if .cody/ignore is not enabled\n    if (!ignores.isActive) {\n        return\n    }\n\n    const wf = vscode.workspace.getWorkspaceFolder(uri)\n    const cancel = () => {\n        const tokenFound = findInProgressTokens.get(uri.path)\n        tokenFound?.cancel()\n        tokenFound?.dispose()\n        findInProgressTokens.delete(uri.path)\n    }\n\n    if (!wf) {\n        // If this happens, we either have no workspace folder or it was removed before we started\n        // processing the watch event.\n        logDebug('CodyIgnore:refresh', 'failed', { verbose: 'no workspace detecetd' })\n        return\n    }\n\n    // We currently only support file://. To support others, we need to change all file\n    // paths in lots of places to be URIs.\n    if (wf.uri.scheme !== 'file') {\n        logDebug('CodyIgnore:refresh', 'failed', { verbose: 'not a file' })\n        return\n    }\n\n    const startTime = performance.now()\n    logDebug('CodyIgnore:refresh', 'started', { verbose: startTime })\n\n    // Cancel fileFiles process for current workspace if there is one in progress to avoid\n    // having multiple find files in progress that can cause performance slow-down issues.\n    cancel()\n\n    // Set a new cancellation token for the workspace.\n    const newToken = new vscode.CancellationTokenSource()\n    findInProgressTokens.set(uri.path, newToken)\n\n    // Timeout after 1 minutes to avoid causing performance issues.\n    setTimeout(\n        () => {\n            // The search is already completed / canceled if no token is found.\n            if (findInProgressTokens.get(uri.path)) {\n                cancel()\n                // TODO locate ignore file from codebase root instead of workspace\n                // Try looking for ignore file at workspace root as fallback.\n                const ignoreFileAtRoot = vscode.Uri.joinPath(wf.uri, '.cody', 'ignore')\n                tryReadFile(ignoreFileAtRoot).then(content => {\n                    if (content.length) {\n                        setCodyIgnoreFiles(wf.uri, [{ uri: ignoreFileAtRoot, content }])\n                        logDebug('CodyIgnore:refresh', 'found ignore file at root', {\n                            verbose: wf.uri.path,\n                        })\n                        return\n                    }\n                    const title = 'Failed to locate Cody ignore files in current workspace.'\n                    const description = 'Try disable the `search.followSymlinks` setting in your editor.'\n                    const message = `${title} ${description}`\n                    logDebug('CodyIgnore:refresh:failed', message, { verbose: wf.uri.path })\n                })\n            }\n            return\n        },\n        1 * 60 * 1000 // 1 minute\n    )\n\n    // Look for .cody/ignore files within the workspace,\n    // exclude all dot files (except .cody) and common build files.\n    const ignoreFilePattern = new vscode.RelativePattern(wf.uri, CODY_IGNORE_POSIX_GLOB)\n    const excludePattern = '.*, **/.* ,**/{node_modules,out,build,dist}/**'\n    const ignoreFiles = await vscode.workspace.findFiles(\n        ignoreFilePattern,\n        excludePattern,\n        undefined,\n        newToken.token\n    )\n    const filesWithContent: IgnoreFileContent[] = await Promise.all(\n        ignoreFiles?.map(async fileUri => ({\n            uri: fileUri,\n            content: await tryReadFile(fileUri),\n        }))\n    )\n\n    setCodyIgnoreFiles(wf.uri, filesWithContent)\n\n    // If we can locate the token, that means the job was completed before it times out.\n    if (findInProgressTokens.get(uri.path)) {\n        findInProgressTokens.delete(uri.path)\n        const elapsed = performance.now() - startTime\n        logDebug('CodyIgnore:refresh', `refresh completed in ${elapsed}`, { verbose: wf.uri.path })\n    }\n}\n\nfunction setCodyIgnoreFiles(ws: vscode.Uri, files: IgnoreFileContent[]): void {\n    ignores.setIgnoreFiles(ws, files)\n    if (files.length) {\n        telemetryService.log('CodyVSCodeExtension:codyIgnore:hasFile')\n        telemetryRecorder.recordEvent('cody.codyIgnore', 'hasFile')\n    }\n}\n\n/**\n * Removes ignore rules for the provided WorkspaceFolder.\n */\nfunction clear(wf: vscode.WorkspaceFolder): void {\n    // We currently only support file://. To support others, we need to change all file\n    // paths in lots of places to be URIs.\n    if (wf.uri.scheme !== 'file') {\n        return\n    }\n\n    ignores.clearIgnoreFiles(wf.uri)\n\n    // Remove any in-progress cancellation tokens for the workspace.\n    const tokens = findInProgressTokens.values()\n    for (const token of tokens) {\n        token.cancel()\n        token.dispose()\n    }\n    findInProgressTokens.clear()\n    logDebug('CodyIgnore:clearIgnoreFiles:workspace', 'removed', { verbose: wf.uri.toString() })\n}\n\n/**\n * Read the content of `fileUri`.\n *\n * Returns an empty string if the file was not readable (for example it was removed before we read it).\n */\nasync function tryReadFile(fileUri: vscode.Uri): Promise<string> {\n    return vscode.workspace.fs.readFile(fileUri).then(\n        content => utf8.decode(content),\n        error => {\n            logDebug('CodyIgnore:clearIgnoreFiles:tryReadFile', 'failed', {\n                verbose: `Skipping unreadable ignore file ${fileUri}: ${error}`,\n            })\n            return ''\n        }\n    )\n}\n\n/**\n * Check if the config for enabling cody ignore is changed.\n *\n * NOTE This can be removed once cody ignore is stable.\n */\nfunction onConfigChange(): void {\n    const config = vscode.workspace.getConfiguration('cody')\n    const isEnabled = config.get('internal.unstable') as boolean\n    ignores.setActiveState(isEnabled)\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:909-940","content":"            \"*\": true\n          },\n          \"examples\": [\n            {\n              \"*\": true,\n              \"plaintext\": false\n            }\n          ]\n        },\n        \"cody.commandCodeLenses\": {\n          \"order\": 8,\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Adds code lenses to current file for quick access to Cody commands.\",\n          \"default\": false\n        },\n        \"cody.experimental.guardrails\": {\n          \"order\": 9,\n          \"type\": \"boolean\",\n          \"markdownDescription\": \"Experimental feature for internal use.\",\n          \"default\": false\n        },\n        \"cody.experimental.localSymbols\": {\n          \"order\": 9,\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"markdownDescription\": \"Experimental feature for internal use.\"\n        },\n        \"cody.chat.preInstruction\": {\n          \"order\": 6,\n          \"type\": \"string\",\n          \"markdownDescription\": \"A custom instruction to be included at the start of all chat messages (e.g. \\\"Answer all my questions in Spanish.\\\")\",\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/storybook/VSCodeStoryDecorator.tsx:61-69","content":"function useDummyChatModelContext(): ChatModelContext {\n    const [chatModels, setChatModels] = useState(getDotComDefaultModels('default'))\n    const onCurrentChatModelChange = (value: ModelProvider): void => {\n        setChatModels(chatModels =>\n            chatModels.map(model => ({ ...model, default: model.model === value.model }))\n        )\n    }\n    return { chatModels, onCurrentChatModelChange }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/walkthroughs/chat.md:0-13","content":"## Chat\n\n<img src=\"https://storage.googleapis.com/sourcegraph-assets/blog/blog-vscode-v018-release/blog-v018-context-controls-002.gif\">\n\nAnswer questions about general programming topics, or specific to your codebase, with Cody chat. You can choose between LLMs, @-mentions files and symbols, and enable enhanced repository-wide code context.\n\nYou can start a chat at any time using the default keyboard shortcut of `Option` `/` on macOS and `Alt` `/` on Windows & Linux.\n\n**✨ Pro-tips for using Cody chat**\n<br>• Enabling “Enhanced Context”, and tagging specific files and symbols, gives the selected LLM more context to help answer your questions more accurately.\n<br>• If you want to chat directly with the LLM without any additional context adding, disable \"Enhanced Context\".\n<br>• You can increase the quality of your chat responses by enabling \"Search Context (Beta)\" in your [Cody Settings](command:cody.status-bar.interacted).\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/utils/code-count.test.ts:0-57","content":"import { describe, expect, it } from 'vitest'\n\nimport { countCode, matchCodeSnippets } from './code-count'\n\ndescribe('countCode', () => {\n    it('counts lines correctly', () => {\n        const code = `line1\n  line2\n  line3`\n        const result = countCode(code)\n        expect(result.lineCount).toBe(3)\n    })\n\n    it('counts characters correctly', () => {\n        const code = 'foo bar'\n        const result = countCode(code)\n        expect(result.charCount).toBe(7)\n    })\n\n    it('handles windows line endings', () => {\n        const code = 'line1\\r\\nline2\\r\\nline3'\n        const result = countCode(code)\n        expect(result.lineCount).toBe(3)\n    })\n\n    it('handles empty string', () => {\n        const code = ''\n        const result = countCode(code)\n        expect(result.lineCount).toBe(1)\n        expect(result.charCount).toBe(0)\n    })\n})\n\ndescribe('matchCodeSnippets', () => {\n    it('returns false if either input is empty', () => {\n        expect(matchCodeSnippets('', 'foo')).toBe(false)\n        expect(matchCodeSnippets('foo', '')).toBe(false)\n    })\n\n    it('returns true if inputs match without whitespace', () => {\n        const copied = 'foo\\nbar'\n        const changed = 'foobar'\n        expect(matchCodeSnippets(copied, changed)).toBe(true)\n    })\n\n    it('returns false if inputs do not match without whitespace', () => {\n        const copied = 'foo\\nbar'\n        const changed = 'foobaz'\n        expect(matchCodeSnippets(copied, changed)).toBe(false)\n    })\n\n    it('handles trailing whitespace correctly', () => {\n        const copied = 'foo '\n        const changed = 'foo'\n        expect(matchCodeSnippets(copied, changed)).toBe(true)\n    })\n})\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/experimentation/FeatureFlagProvider.ts:34-54","content":"\n    // use-ssc-for-cody-subscription is a feature flag that enables the use of SSC as the source of truth for Cody subscription data.\n    UseSscForCodySubscription = 'use-ssc-for-cody-subscription',\n\n    // cody-pro-trial-ended is a feature flag that indicates if the Cody Pro \"Free Trial\"  has ended.\n    // (Enabling users to use Cody Pro for free for 3-months starting in late Q4'2023.)\n    CodyProTrialEnded = 'cody-pro-trial-ended',\n\n    // Show document hints above a symbol if the users' cursor is there. \"Opt+D to Document\"\n    CodyDocumentHints = 'cody-document-hints',\n\n    /** Support @-mentioning URLs in chat to add context from web pages. */\n    URLContext = 'cody-url-context',\n\n    /** Display Cody commands in a pop-up window on hover. */\n    CodyHoverCommands = 'cody-hover-commands',\n\n    /** Apply a higher context window for user context items (e.g., @-mentions). */\n    CodyChatContextBudget = 'cody-chat-context-budget',\n}\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/services/utils/code-count.ts:0-21","content":"export function countCode(code: string): { lineCount: number; charCount: number } {\n    const lineCount = code.split(/\\r\\n|\\r|\\n/).length\n    const charCount = code.length\n    return { lineCount, charCount }\n}\n\n/**\n * Handle edge cases for code snippets where code is not pasted correctly\n * or code is multiline and the formatting is changed on paste\n */\nexport function matchCodeSnippets(copiedText: string, text: string): boolean {\n    if (!text || !copiedText) {\n        return false\n    }\n    // Code can be multiline, so we need to remove all new lines and spaces\n    // from the copied code and changed text as formatting on paste may change the spacing\n    const copiedTextNoSpace = copiedText.replaceAll(/\\s/g, '')\n    const textNoSpace = text?.replace(/\\s/g, '')\n    // check if the copied code is the same as the changed text without spaces\n    return copiedTextNoSpace === textNoSpace\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/README.md:44-60","content":"\n## Cody Natural Language Search (Beta)\n\nCody builds a Search index of your local files to make it easier to find what you’re looking for. Use a natural language query like “password hashing” or \"connection retries\" to quickly find and open the files that match your search.\n\n<img src=\"https://storage.googleapis.com/sourcegraph-assets/blog/vs-code-onboarding-walkthrough-dec-2023-natural-language.gif\" width=\"480\" alt=\"Natural Language Search\">\n\n## Usage\n\nThis extension works for all Cody plans, including Cody Free, Cody Pro, and Cody Enterprise.\n\nYou can find detailed information about Cody's available plans [on our website](https://sourcegraph.com/pricing?utm_source=marketplace.visualstudio.com&utm_medium=referral).\n\n## Programming Languages\n\nCody works for any programming language because it uses LLMs trained on broad data. Cody works great with Python, Go, JavaScript, and TypeScript code.\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/code-lenses.ts:0-203","content":"import * as vscode from 'vscode'\nimport { getEditor } from '../../editor/active-editor'\nimport { getDocumentSections } from '../../editor/utils/document-sections'\nimport { telemetryService } from '../../services/telemetry'\nimport { telemetryRecorder } from '../../services/telemetry-v2'\nimport { isValidTestFile } from '../utils/test-commands'\n\ninterface EditorCodeLens {\n    name: string\n    selection: vscode.Selection\n}\n\n/**\n * Adds Code lenses for triggering Command Menu\n */\nexport class CommandCodeLenses implements vscode.CodeLensProvider {\n    private isEnabled = false\n    private addTestEnabled = false\n\n    private _disposables: vscode.Disposable[] = []\n    private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>()\n    public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event\n    constructor() {\n        this.provideCodeLenses = this.provideCodeLenses.bind(this)\n        this.updateConfig()\n\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('cody')) {\n                this.updateConfig()\n            }\n        })\n    }\n\n    /**\n     * init\n     */\n    private init(): void {\n        if (!this.isEnabled) {\n            return\n        }\n        this._disposables.push(vscode.languages.registerCodeLensProvider({ scheme: 'file' }, this))\n        this._disposables.push(\n            vscode.commands.registerCommand('cody.editor.codelens.click', async lens => {\n                telemetryService.log('CodyVSCodeExtension:command:codelens:clicked')\n                telemetryRecorder.recordEvent('cody.command.codelens', 'clicked')\n                const clickedLens = lens as EditorCodeLens\n                await this.onCodeLensClick(clickedLens)\n            })\n        )\n        // on change events for toggling\n        this._disposables.push(\n            vscode.window.onDidChangeVisibleTextEditors(() => this.fire()),\n            vscode.window.onDidChangeActiveTextEditor(() => this.fire())\n        )\n    }\n\n    /**\n     * Update the configurations\n     */\n    private updateConfig(): void {\n        const config = vscode.workspace.getConfiguration('cody')\n        this.isEnabled = config.get('commandCodeLenses') as boolean\n        this.addTestEnabled = config.get('internal.unstable') as boolean\n\n        if (this.isEnabled && !this._disposables.length) {\n            this.init()\n        }\n        this.fire()\n    }\n\n    /**\n     * Gets the code lenses for the specified document.\n     */\n    public async provideCodeLenses(\n        document: vscode.TextDocument,\n        token: vscode.CancellationToken\n    ): Promise<vscode.CodeLens[]> {\n        if (!this.isEnabled) {\n            return []\n        }\n\n        token.onCancellationRequested(() => [])\n        const editor = getEditor()?.active\n        if (editor?.document !== document || document.languageId === 'json') {\n            return []\n        }\n\n        // For test files, adds code lenses for each symbol\n        if (this.addTestEnabled && isValidTestFile(document.uri)) {\n            return await this.provideCodeLensesForSymbols(document.uri)\n        }\n\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        const smartRanges = await getDocumentSections(document)\n        for (const range of smartRanges) {\n            if (linesWithLenses.has(range.start)) {\n                continue\n            }\n            const selection = new vscode.Selection(range.start, range.end)\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.cody,\n                    arguments: [{ name: 'cody.menu.commands', selection }],\n                })\n            )\n\n            linesWithLenses.add(range.start.line)\n        }\n\n        return codeLenses\n    }\n\n    private async provideCodeLensesForSymbols(doc: vscode.Uri): Promise<vscode.CodeLens[]> {\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        // Get a list of symbols from the document, filter out symbols that are not functions / classes / methods\n        const allSymbols = await vscode.commands.executeCommand<vscode.SymbolInformation[]>(\n            'vscode.executeDocumentSymbolProvider',\n            doc\n        )\n        const symbols =\n            allSymbols?.filter(\n                symbol =>\n                    symbol.kind === vscode.SymbolKind.Function ||\n                    symbol.kind === vscode.SymbolKind.Class ||\n                    symbol.kind === vscode.SymbolKind.Method ||\n                    symbol.kind === vscode.SymbolKind.Constructor\n            ) ?? []\n\n        for (const symbol of symbols) {\n            const range = symbol.location.range\n            const startLine = range.start.line\n            if (linesWithLenses.has(startLine)) {\n                continue\n            }\n\n            const selection = new vscode.Selection(startLine, 0, range.end.line + 1, 0)\n\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.test,\n                    arguments: [{ name: 'cody.command.tests-cases', selection }],\n                })\n            )\n\n            linesWithLenses.add(startLine)\n        }\n\n        return codeLenses\n    }\n\n    /**\n     * Handle the code lens click event\n     */\n    private async onCodeLensClick(lens: EditorCodeLens): Promise<void> {\n        // Update selection in active editor to the selection of the clicked code lens\n        const activeEditor = getEditor().active\n        if (activeEditor) {\n            activeEditor.selection = lens.selection\n        }\n        await vscode.commands.executeCommand(lens.name, 'codeLens')\n    }\n\n    /**\n     * Fire an event to notify VS Code that the code lenses have changed.\n     */\n    public fire(): void {\n        if (!this.isEnabled) {\n            this.dispose()\n            return\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n\n    /**\n     * Dispose the disposables\n     */\n    public dispose(): void {\n        if (this._disposables.length) {\n            for (const disposable of this._disposables) {\n                disposable.dispose()\n            }\n            this._disposables = []\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n}\n\nconst commandLenses = {\n    cody: {\n        title: '$(cody-logo) Cody',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Open command menu',\n    },\n    test: {\n        title: '$(cody-logo) Add More Tests',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Generate new test cases',\n    },\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/README.md:60-74","content":"\n## Code Graph\n\nCody is powered by Sourcegraph’s code graph, and uses context of your codebase to extend its capabilities. By using context from the entire repository, Cody is able to give more accurate answers and generate idiomatic code.\n\nFor example:\n\n- Ask Cody to generate an API call. Cody can gather context on your API schema to inform the code it writes.\n- Ask Cody to find where in your codebase a specific component is defined. Cody can retrieve and describe the exact files where that component is written.\n- Ask Cody questions that require an understanding of multiple files. For example, ask Cody how frontend data is populated in a React app; Cody can find the React component definitions to understand what data is being passed and where it originates.\n\n## Cody Enterprise\n\nCody Enterprise is able to retrieve context from your entire remote codebase using Sourcegraph search. This gives Cody the ability to understand and answer questions about all of your code, even the repositories that don't live on your local machine.\n"}]

 class: Gather information
