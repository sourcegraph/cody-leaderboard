 question: Where do we call remote searches?
# CHAT
# CHAT_QUESTION Where do we call remote searches?

# CHAT_REPLY The function `searchRemote` in `cody_test/vscode/src/chat/chat-view/context.ts` is responsible for calling remote searches. It utilizes the `RemoteSearch` instance to query for context based on the provided user text.

# CONTEXT_ITEMS [{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:159-180","content":"async function searchRemote(\n    remoteSearch: RemoteSearch | null,\n    userText: PromptString\n): Promise<ContextItem[]> {\n    return wrapInActiveSpan('chat.context.search.remote', async () => {\n        if (!remoteSearch) {\n            return []\n        }\n        return (await remoteSearch.query(userText)).map(result => {\n            return {\n                type: 'file',\n                content: result.content,\n                range: new vscode.Range(result.startLine, 0, result.endLine, 0),\n                uri: result.uri,\n                source: ContextItemSource.Unified,\n                repoName: result.repoName,\n                title: result.path,\n                revision: result.commit,\n            } satisfies ContextItem\n        })\n    })\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/search.html:0-20","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <!-- This content security policy also implicitly disables inline scripts and styles. -->\n    <meta http-equiv=\"Content-Security-Policy\"\n        content=\"default-src 'none'; img-src {cspSource} https:; script-src {cspSource}; style-src {cspSource}; font-src {cspSource};\" />\n    <!-- DO NOT REMOVE: THIS FILE IS THE ENTRY FILE FOR CODY WEBVIEW -->\n    <title>Cody Search</title>\n</head>\n\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"search.tsx\"></script>\n</body>\n\n</html>\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/local-context/index.ts:21-24","content":"export interface IRemoteSearch {\n    setWorkspaceUri(uri: URI): Promise<void>\n    search(query: PromptString): Promise<ContextItemFile[]>\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx:60-87","content":"    onShouldBuildSymfIndex: (provider: LocalSearchProvider) => void\n}\n\nfunction useEnhancedContextContext(): EnhancedContextContextT {\n    return React.useContext(EnhancedContextContext)\n}\n\nfunction useEnhancedContextEventHandlers(): EnhancedContextEventHandlersT {\n    return React.useContext(EnhancedContextEventHandlers)\n}\n\n// Shortens a repository name into a more succinct--but ambiguous--display name.\nfunction briefName(name: string): string {\n    return name.slice(name.lastIndexOf('/') + 1)\n}\n\nconst CompactGroupsComponent: React.FunctionComponent<{\n    groups: readonly ContextGroup[]\n    handleChoose: () => void\n    handleRemove: (id: string) => void\n}> = ({ groups, handleChoose, handleRemove }): React.ReactNode => {\n    // The compact groups component is only used for enterprise context, which\n    // uses homogeneous remote search providers. Lift the providers out of the\n    // groups.\n    const liftedProviders: [string, RemoteSearchProvider][] = []\n    for (const group of groups) {\n        const providers = group.providers.filter(\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.tsx:353-377","content":"                // Checkbox click: `CodyVSCodeExtension:useEnhancedContextToggler:clicked`\n                // Button click: `CodyVSCodeExtension:useEnhancedContextTogglerBtn:clicked`\n                const eventName = source === 'btn' ? 'Btn' : ''\n                getVSCodeAPI().postMessage({\n                    command: 'event',\n                    eventName: `CodyVSCodeExtension:useEnhancedContextToggler${eventName}:clicked`,\n                    properties: { useEnhancedContext: shouldEnable },\n                })\n            }\n        },\n        [events, enabled]\n    )\n\n    // Handles removing a manually added remote search provider.\n    const handleRemoveRemoteSearchRepo = React.useCallback(\n        (id: string) => {\n            events.onRemoveRemoteSearchRepo(id)\n        },\n        [events]\n    )\n    const handleChooseRemoteSearchRepo = React.useCallback(\n        () => events.onChooseRemoteSearchRepo(),\n        [events]\n    )\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/EnhancedContextSettings.story.tsx:211-235","content":"                                    kind: 'search',\n                                    type: 'remote',\n                                    state: 'ready',\n                                    id: 'pqrxy',\n                                    inclusion: 'manual',\n                                },\n                            ],\n                        },\n                        {\n                            displayName: 'github.com/megacorp/bar',\n                            providers: [\n                                {\n                                    kind: 'search',\n                                    type: 'remote',\n                                    state: 'ready',\n                                    id: 'xgzwa',\n                                    inclusion: 'auto',\n                                },\n                            ],\n                        },\n                        {\n                            displayName: 'github.com/subsidiarycorp/handbook',\n                            providers: [\n                                {\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/SimpleChatPanelProvider.ts:1017-1043","content":"\n    // #endregion\n    // =======================================================================\n    // #region session management\n    // =======================================================================\n\n    // A unique identifier for this SimpleChatPanelProvider instance used to identify\n    // it when a handle to this specific panel provider is needed.\n    public get sessionID(): string {\n        return this.chatModel.sessionID\n    }\n\n    // Sets the provider up for a new chat that is not being restored from a\n    // saved session.\n    public async newSession(): Promise<void> {\n        // Set the remote search's selected repos to the workspace repo list\n        // by default.\n        this.remoteSearch?.setRepos(\n            (await this.repoPicker?.getDefaultRepos()) || [],\n            RepoInclusion.Manual\n        )\n    }\n\n    // Attempts to restore the chat to the given sessionID, if it exists in\n    // history. If it does, then saves the current session and cancels the\n    // current in-progress completion. If the chat does not exist, then this\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/context.ts:0-32","content":"import * as vscode from 'vscode'\n\nimport {\n    type ConfigurationUseContext,\n    type ContextItem,\n    ContextItemSource,\n    MAX_BYTES_PER_FILE,\n    NUM_CODE_RESULTS,\n    NUM_TEXT_RESULTS,\n    type PromptString,\n    type Result,\n    isFileURI,\n    truncateTextNearestLine,\n    uriBasename,\n    wrapInActiveSpan,\n} from '@sourcegraph/cody-shared'\n\nimport type { RemoteSearch } from '../../context/remote-search'\nimport type { VSCodeEditor } from '../../editor/vscode-editor'\nimport type { ContextRankingController } from '../../local-context/context-ranking'\nimport type { LocalEmbeddingsController } from '../../local-context/local-embeddings'\nimport type { SymfRunner } from '../../local-context/symf'\nimport { logDebug, logError } from '../../log'\n\ninterface GetEnhancedContextOptions {\n    strategy: ConfigurationUseContext\n    editor: VSCodeEditor\n    text: PromptString\n    providers: {\n        localEmbeddings: LocalEmbeddingsController | null\n        symf: SymfRunner | null\n        remoteSearch: RemoteSearch | null\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/Components/FileLink.tsx:43-65","content":"\n    let tooltip: string\n    let pathWithRange: string\n    let href: string\n    let target: string | undefined\n    if (source === 'unified') {\n        // Remote search result.\n        const repoShortName = repoName?.slice(repoName.lastIndexOf('/') + 1)\n        const pathToDisplay = `${repoShortName} ${title}`\n        pathWithRange = range ? `${pathToDisplay}:${displayLineRange(range)}` : pathToDisplay\n        tooltip = `${repoName} @${revision}\\nincluded via Enhanced Context (Enterprise Search)`\n        // We can skip encoding when the uri path already contains '@'.\n        href = uri.toString(uri.path.includes('@'))\n        target = '_blank'\n    } else {\n        const pathToDisplay = `${displayPath(uri)}`\n        pathWithRange = range ? `${pathToDisplay}:${displayLineRange(range)}` : pathToDisplay\n        const openURI = webviewOpenURIForContextItem({ uri, range })\n        tooltip = isTooLarge ? WARNING : pathWithRange\n        href = openURI.href\n        target = openURI.target\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/README.md:44-60","content":"\n## Cody Natural Language Search (Beta)\n\nCody builds a Search index of your local files to make it easier to find what you’re looking for. Use a natural language query like “password hashing” or \"connection retries\" to quickly find and open the files that match your search.\n\n<img src=\"https://storage.googleapis.com/sourcegraph-assets/blog/vs-code-onboarding-walkthrough-dec-2023-natural-language.gif\" width=\"480\" alt=\"Natural Language Search\">\n\n## Usage\n\nThis extension works for all Cody plans, including Cody Free, Cody Pro, and Cody Enterprise.\n\nYou can find detailed information about Cody's available plans [on our website](https://sourcegraph.com/pricing?utm_source=marketplace.visualstudio.com&utm_medium=referral).\n\n## Programming Languages\n\nCody works for any programming language because it uses LLMs trained on broad data. Cody works great with Python, Go, JavaScript, and TypeScript code.\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/context/repo-picker.ts:0-22","content":"import * as vscode from 'vscode'\n\nimport { logDebug } from '../log'\nimport { RemoteSearch } from './remote-search'\nimport { type Repo, type RepoFetcher, RepoFetcherState } from './repo-fetcher'\nimport type { WorkspaceRepoMapper } from './workspace-repo-mapper'\n\n// A quickpick for choosing a set of repositories from a Sourcegraph instance.\nexport class RemoteRepoPicker implements vscode.Disposable {\n    private readonly maxSelectedRepoCount: number = RemoteSearch.MAX_REPO_COUNT - 1\n    private disposables: vscode.Disposable[] = []\n    private readonly quickpick: vscode.QuickPick<vscode.QuickPickItem & Repo>\n    private prefetchedRepos: Map<string, Repo> = new Map()\n\n    constructor(\n        private readonly fetcher: RepoFetcher,\n        private readonly workspaceRepoMapper: WorkspaceRepoMapper\n    ) {\n        this.fetcher.onRepoListChanged(() => this.handleRepoListChanged(), undefined, this.disposables)\n        this.fetcher.onStateChanged(\n            state => {\n                this.quickpick.busy = state === RepoFetcherState.Fetching\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/telemetry/index.ts:0-22","content":"/**\n * A service to log telemetry data.\n */\nexport interface TelemetryService {\n    /**\n     * Log a telemetry event.\n     *\n     * PRIVACY: Do NOT include any potentially private information in `eventProperties`. These\n     * properties may get sent to analytics tools, so must not include private information, such as\n     * search queries or repository names.\n     * @param eventName The name of the event.\n     * @param properties Event properties. Do NOT include any private information, such as full URLs\n     * that may contain private repository names or search queries.\n     * @deprecated New callsites should use telemetryRecorder instead. Existing\n     * callsites should ALSO record an event using services/telemetry-v2\n     * as well and indicate this has happened, for example:\n     *\n     * logEvent(name, properties, { hasV2Event: true })\n     * telemetryRecorder.recordEvent(...)\n     *\n     * In the future, all usages of TelemetryService will be removed in\n     * favour of the new libraries. For more information, see:\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/protocol.md:488-509","content":"<p>Notification sent from the server to the client.</p>\n\n\n```ts\n'progress/report': [ProgressReportParams]\n```\n<h2 id=\"progress_end\"><a href=\"#progress_end\" name=\"progress_end\"><code>progress/end</code> (<img class=\"emoji\" title=\":arrow_right:\" alt=\":arrow_right:\" src=\"https://github.githubassets.com/images/icons/emoji/unicode/27a1.png\" height=\"20\" width=\"20\">)</a></h2>\n<p>Notification sent from the server to the client.</p>\n\n\n```ts\n'progress/end': [{ id: string; }]\n\n```ts\n'remoteRepo/*: ...'\n```\n\nMethods and notifications related to a remote list of repositories. Only for enterprise configurations. See [agent-protocol.ts].\n\n```\n<!-- PROTOCOL END -->\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/chat/chat-view/SimpleChatPanelProvider.ts:213-234","content":"        )\n        this.disposables.push(this.contextStatusAggregator.addProvider(this.codebaseStatusProvider))\n\n        if (this.remoteSearch) {\n            this.disposables.push(\n                // Display enhanced context status from the remote search provider\n                this.contextStatusAggregator.addProvider(this.remoteSearch),\n\n                // When the codebase has a remote ID, include it automatically\n                this.codebaseStatusProvider.onDidChangeStatus(async () => {\n                    const codebase = await this.codebaseStatusProvider.currentCodebase()\n                    if (codebase?.remote && codebase.remoteRepoId) {\n                        this.remoteSearch?.setRepos(\n                            [\n                                {\n                                    name: codebase.remote,\n                                    id: codebase.remoteRepoId,\n                                },\n                            ],\n                            RepoInclusion.Automatic\n                        )\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/context-status.ts:28-62","content":"\nexport interface LocalEmbeddingsProvider {\n    kind: 'embeddings'\n    state: 'indeterminate' | 'no-match' | 'unconsented' | 'indexing' | 'ready'\n    errorReason?: 'not-a-git-repo' | 'git-repo-has-no-remote'\n}\n\nexport type SearchProvider = LocalSearchProvider | RemoteSearchProvider\n\nexport interface LocalSearchProvider {\n    kind: 'search'\n    type: 'local'\n    state: 'unindexed' | 'indexing' | 'ready' | 'failed'\n}\n\nexport interface ContextGroup {\n    /** The directory that this context group represents. */\n    dir?: URI\n\n    /**\n     * Usually `basename(dir)`.\n     *\n     * TODO(sqs): when old remote embeddings code is removed, remove this field and compute it as\n     * late as possible for presentation only.\n     */\n    displayName: string\n\n    providers: ContextProvider[]\n}\n\n// TODO: rename to EnhancedContextStatusT\nexport interface EnhancedContextContextT {\n    groups: ContextGroup[]\n}\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/context/remote-search.ts:0-163","content":"import * as vscode from 'vscode'\n\nimport {\n    type ContextGroup,\n    type ContextItem,\n    type ContextItemFile,\n    ContextItemSource,\n    type ContextSearchResult,\n    type ContextStatusProvider,\n    type Disposable,\n    type IRemoteSearch,\n    type PromptString,\n    graphqlClient,\n    isError,\n} from '@sourcegraph/cody-shared'\n\nimport type { URI } from 'vscode-uri'\nimport { getCodebaseFromWorkspaceUri } from '../repository/git-extension-api'\nimport type * as repofetcher from './repo-fetcher'\n\nexport enum RepoInclusion {\n    Automatic = 'auto',\n    Manual = 'manual',\n}\n\ninterface DisplayRepo {\n    displayName: string\n}\n\nexport class RemoteSearch implements ContextStatusProvider, IRemoteSearch {\n    public static readonly MAX_REPO_COUNT = 10\n\n    private statusChangedEmitter = new vscode.EventEmitter<ContextStatusProvider>()\n\n    // Repositories we are including automatically because of the workspace.\n    private reposAuto: Map<string, DisplayRepo> = new Map()\n\n    // Repositories the user has added manually.\n    private reposManual: Map<string, DisplayRepo> = new Map()\n\n    public dispose(): void {\n        this.statusChangedEmitter.dispose()\n    }\n\n    // #region ContextStatusProvider implementation.\n\n    public onDidChangeStatus(callback: (provider: ContextStatusProvider) => void): Disposable {\n        return this.statusChangedEmitter.event(callback)\n    }\n\n    public get status(): ContextGroup[] {\n        return [...this.getRepoIdSet()].map(id => {\n            const auto = this.reposAuto.get(id)\n            const manual = this.reposManual.get(id)\n            const displayName = auto?.displayName || manual?.displayName || '?'\n            return {\n                displayName,\n                providers: [\n                    {\n                        kind: 'search',\n                        type: 'remote',\n                        state: 'ready',\n                        id,\n                        inclusion: auto ? 'auto' : 'manual',\n                    },\n                ],\n            }\n        })\n    }\n\n    // #endregion\n\n    // Removes a manually included repository.\n    public removeRepo(repoId: string): void {\n        if (this.reposManual.delete(repoId)) {\n            this.statusChangedEmitter.fire(this)\n        }\n    }\n\n    // Sets the repos to search. RepoInclusion.Automatic is for repositories added\n    // automatically based on the workspace; these are presented differently\n    // and can't be removed by the user. RepoInclusion.Manual is for repositories\n    // added manually by the user.\n    public setRepos(repos: repofetcher.Repo[], inclusion: RepoInclusion): void {\n        const repoMap: Map<string, DisplayRepo> = new Map(\n            repos.map(repo => [repo.id, { displayName: repo.name }])\n        )\n        switch (inclusion) {\n            case RepoInclusion.Automatic: {\n                this.reposAuto = repoMap\n                break\n            }\n            case RepoInclusion.Manual: {\n                this.reposManual = repoMap\n                break\n            }\n        }\n        this.statusChangedEmitter.fire(this)\n    }\n\n    public getRepos(inclusion: RepoInclusion): repofetcher.Repo[] {\n        return [\n            ...(inclusion === RepoInclusion.Automatic ? this.reposAuto : this.reposManual).entries(),\n        ].map(([id, repo]) => ({ id, name: repo.displayName }))\n    }\n\n    // Gets the set of all repositories to search.\n    public getRepoIdSet(): Set<string> {\n        return new Set([...this.reposAuto.keys(), ...this.reposManual.keys()])\n    }\n\n    public async query(query: PromptString): Promise<ContextSearchResult[]> {\n        // Sending prompt strings to the Sourcegraph search backend is fine.\n        const result = await graphqlClient.contextSearch(this.getRepoIdSet(), query.toString())\n        if (result instanceof Error) {\n            throw result\n        }\n        return result || []\n    }\n\n    // IRemoteSearch implementation. This is only used for inline edit context.\n\n    public async setWorkspaceUri(uri: URI): Promise<void> {\n        const codebase = getCodebaseFromWorkspaceUri(uri)\n        if (!codebase) {\n            this.setRepos([], RepoInclusion.Automatic)\n            return\n        }\n        const repos = await graphqlClient.getRepoIds([codebase], 10)\n        if (isError(repos)) {\n            throw repos\n        }\n        this.setRepos(repos, RepoInclusion.Automatic)\n    }\n\n    public async search(query: PromptString): Promise<ContextItemFile[]> {\n        const results = await this.query(query)\n        if (isError(results)) {\n            throw results\n        }\n        return (results || []).map(\n            result =>\n                ({\n                    type: 'file',\n                    uri: result.uri,\n                    repoName: result.repoName,\n                    revision: result.commit,\n                    source: ContextItemSource.Unified,\n                    content: result.content,\n                    range: {\n                        start: {\n                            line: result.startLine,\n                            character: 0,\n                        },\n                        end: {\n                            line: result.endLine,\n                            character: 0,\n                        },\n                    },\n                }) satisfies ContextItem\n        )\n    }\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/SearchPanel.tsx:249-272","content":"                <div className={styles.searchInputContainer}>\n                    <textarea\n                        placeholder=\"Search\"\n                        className={styles.searchInput}\n                        onChange={onInputChange}\n                        onKeyDown={onInputKeyDown}\n                        ref={queryInputRef}\n                    />\n                </div>\n            </form>\n            {!searching && query.trim().length === 0 && (\n                <p className={styles.instructions}>\n                    Search for code using a natural language query, such as “password hashing”,\n                    \"connection retries\", a symbol name, or a topic.\n                </p>\n            )}\n            {!searching && results.length === 0 && query.trim().length !== 0 && (\n                <p className={styles.instructions}>No results found</p>\n            )}\n            <div className={styles.searchResultsContainer}>\n                {results.map((result, fileIndex) => (\n                    <>\n                        {/* File result */}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/jsonrpc/agent-protocol.ts:175-202","content":"        {\n            error: string | null\n            repoNames: string[]\n            limitHit: boolean\n        },\n    ]\n\n    // Gets whether the specific repo name is known on the remote.\n    'remoteRepo/has': [{ repoName: string }, { result: boolean }]\n\n    // Gets paginated list of repositories matching a fuzzy search query (or ''\n    // for all repositories.) Remote repositories are fetched concurrently, so\n    // subscribe to 'remoteRepo/didChange' to invalidate results.\n    //\n    // At the end of the list, returns an empty list of repositories.\n    // If `afterId` is specified, but not in the query result set,\n    // `startIndex` is -1.\n    //\n    // remoteRepo/list caches a single query result, making it efficient to page\n    // through a large list of results provided the query is the same.\n    'remoteRepo/list': [\n        {\n            // The user input to perform a fuzzy match with\n            query?: string\n            // The maximum number of results to retrieve\n            first: number\n            // The repository ID of the last result in the previous\n"}]

 class: Find logic
