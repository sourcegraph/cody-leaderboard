 question: Where are the build and lint tools configured?
# CHAT
# CHAT_QUESTION Where are the build and lint tools configured?

# CHAT_REPLY The build process and tools are primarily configured in the following files:
# CHAT_REPLY 
# CHAT_REPLY - **package.json (root and vscode directories):** These files contain the scripts for building the different parts of the project (agent, vscode extension).  They use tools like `esbuild` and `vite` for bundling.
# CHAT_REPLY - **pnpm-lock.yaml:** This file locks down the versions of all dependencies, ensuring consistent builds.
# CHAT_REPLY 
# CHAT_REPLY For linting, the configuration is likely in:
# CHAT_REPLY 
# CHAT_REPLY - **.stylelintrc.cjs (likely in the root or vscode directory):** This file is a common location for configuring the `stylelint` tool, which is used for linting CSS/SCSS/Less files.
# CHAT_REPLY 
# CHAT_REPLY You can find more specific configurations for individual tools within the "scripts" section of the `package.json` files. For example, the `_build:esbuild:desktop` script in `vscode/package.json` shows how `esbuild` is configured for building the desktop version of the VS Code extension.

# CONTEXT_ITEMS [{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:1746-1760","content":"      '@babel/core': 7.24.0\n      '@babel/helper-compilation-targets': 7.23.6\n      '@babel/helper-plugin-utils': 7.24.0\n      '@babel/helper-validator-option': 7.23.5\n      '@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression': 7.23.3(@babel/core@7.24.0)\n      '@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining': 7.23.3(@babel/core@7.24.0)\n      '@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly': 7.23.7(@babel/core@7.24.0)\n      '@babel/plugin-proposal-private-property-in-object': 7.21.0-placeholder-for-preset-env.2(@babel/core@7.24.0)\n      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.24.0)\n      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.24.0)\n      '@babel/plugin-syntax-class-static-block': 7.14.5(@babel/core@7.24.0)\n      '@babel/plugin-syntax-dynamic-import': 7.8.3(@babel/core@7.24.0)\n      '@babel/plugin-syntax-export-namespace-from': 7.8.3(@babel/core@7.24.0)\n      '@babel/plugin-syntax-import-assertions': 7.23.3(@babel/core@7.24.0)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/common/markdown/contributions.ts:43-72","content":" */\nexport function registerHighlightContributions(): void {\n    if (registered) {\n        // Don't double-register these. (There is no way to unregister them.)\n        return\n    }\n    registered = true\n    registerLanguage('go', goLang)\n    registerLanguage('javascript', javascript)\n    registerLanguage('typescript', typescript)\n    registerLanguage('java', java)\n    registerLanguage('python', python)\n    registerLanguage('php', php)\n    registerLanguage('bash', bash)\n    registerLanguage('clojure', clojure)\n    // This is a dependency of cpp.\n    registerLanguage('c-like', cLike)\n    registerLanguage('cpp', cpp)\n    registerLanguage('cs', csharp)\n    registerLanguage('csharp', csharp)\n    registerLanguage('css', css)\n    registerLanguage('dockerfile', dockerfile)\n    registerLanguage('elixir', elixir)\n    registerLanguage('haskell', haskell)\n    registerLanguage('html', xml)\n    registerLanguage('lua', lua)\n    registerLanguage('ocaml', ocaml)\n    registerLanguage('r', rLang)\n    registerLanguage('ruby', ruby)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:44-81","content":"      '@testing-library/jest-dom':\n        specifier: ^6.4.2\n        version: 6.4.2(vitest@1.5.0)\n      '@testing-library/react':\n        specifier: ^14.2.2\n        version: 14.2.2(react-dom@18.2.0)(react@18.2.0)\n      '@types/node':\n        specifier: 20.12.7\n        version: 20.12.7\n      '@types/react':\n        specifier: 18.2.79\n        version: 18.2.79\n      '@types/react-dom':\n        specifier: 18.2.25\n        version: 18.2.25\n      '@vitejs/plugin-react':\n        specifier: ^4.2.1\n        version: 4.2.1(vite@5.2.9)\n      esbuild:\n        specifier: ^0.18.20\n        version: 0.18.20\n      happy-dom:\n        specifier: ^14.3.10\n        version: 14.3.10\n      jsdom:\n        specifier: ^22.1.0\n        version: 22.1.0\n      knip:\n        specifier: ^3.13.2\n        version: 3.13.2(@types/node@20.12.7)(typescript@5.4.2)\n      storybook:\n        specifier: ^8.0.5\n        version: 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      stylelint:\n        specifier: ^15.11.0\n        version: 15.11.0(typescript@5.4.2)\n      stylelint-config-standard:\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:4219-4245","content":"      '@storybook/csf-tools': 8.0.5\n      '@storybook/global': 5.0.0\n      '@storybook/node-logger': 8.0.5\n      '@storybook/preview-api': 8.0.5\n      '@storybook/react-dom-shim': 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/theming': 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/types': 8.0.5\n      '@types/react': 18.2.79\n      fs-extra: 11.2.0\n      react: 18.2.0\n      react-dom: 18.2.0(react@18.2.0)\n      rehype-external-links: 3.0.0\n      rehype-slug: 6.0.0\n      ts-dedent: 2.2.0\n    transitivePeerDependencies:\n      - encoding\n      - supports-color\n    dev: true\n\n  /@storybook/addon-essentials@8.0.5(@types/react@18.2.79)(react-dom@18.2.0)(react@18.2.0):\n    resolution: {integrity: sha512-1yjwf9ibKn2rVqv+fqxACoIjsaUsimSEx8QwjIl2krDNhMULXzFeVubTQ09gXSVEnHUR1nKX3X9qOXJQ2bOFlQ==}\n    dependencies:\n      '@storybook/addon-actions': 8.0.5\n      '@storybook/addon-backgrounds': 8.0.5\n      '@storybook/addon-controls': 8.0.5(@types/react@18.2.79)(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/addon-docs': 8.0.5\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:409-453","content":"        version: 10.0.0\n      mkdirp:\n        specifier: ^3.0.1\n        version: 3.0.1\n      os-browserify:\n        specifier: ^0.3.0\n        version: 0.3.0\n      parse-git-diff:\n        specifier: ^0.0.14\n        version: 0.0.14\n      proxy-agent:\n        specifier: ^6.4.0\n        version: 6.4.0\n      re2-wasm:\n        specifier: ^1.0.2\n        version: 1.0.2\n      semver:\n        specifier: ^7.5.4\n        version: 7.6.0\n      socks-proxy-agent:\n        specifier: ^8.0.1\n        version: 8.0.1\n      unzipper:\n        specifier: ^0.10.14\n        version: 0.10.14\n      uuid:\n        specifier: ^9.0.0\n        version: 9.0.0\n      vscode-languageserver-textdocument:\n        specifier: ^1.0.8\n        version: 1.0.8\n      vscode-uri:\n        specifier: ^3.0.7\n        version: 3.0.7\n      web-tree-sitter:\n        specifier: ^0.21.0\n        version: 0.21.0\n      wink-nlp-utils:\n        specifier: ^2.1.0\n        version: 2.1.0\n    devDependencies:\n      '@google-cloud/pubsub':\n        specifier: ^3.7.3\n        version: 3.7.3\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:16-24","content":"    \"dev:web\": \"pnpm run -s build:dev:web && pnpm run -s _dev:vscode-test-web --browserType none\",\n    \"watch:dev:web\": \"concurrently \\\"pnpm run -s watch:build:dev:web\\\" \\\"pnpm run -s _dev:vscode-test-web --browserType none\\\"\",\n    \"_dev:vscode-test-web\": \"vscode-test-web --extensionDevelopmentPath=. ${WORKSPACE-test/fixtures/workspace}\",\n    \"build\": \"tsc --build && pnpm run -s _build:esbuild:desktop && pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\",\n    \"_build:desktop\": \"pnpm run -s _build:esbuild:desktop && pnpm run -s _build:webviews --mode production\",\n    \"_build:web\": \"pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\",\n    \"build:dev:desktop\": \"concurrently \\\"pnpm run -s _build:esbuild:desktop --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\" \\\"pnpm run -s _build:webviews --mode development\\\"\",\n    \"build:dev:web\": \"concurrently \\\"pnpm run -s _build:esbuild:web --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\" \\\"pnpm run -s _build:webviews --mode development\\\"\",\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/AgentWorkspaceConfiguration.ts:8-138","content":"export class AgentWorkspaceConfiguration implements vscode.WorkspaceConfiguration {\n    constructor(\n        private prefix: string[],\n        private clientInfo: () => ClientInfo | undefined,\n        private extensionConfig: () => ExtensionConfiguration | undefined,\n        private dictionary: Record<string, any> = {}\n    ) {}\n\n    public withPrefix(prefix: string): AgentWorkspaceConfiguration {\n        return new AgentWorkspaceConfiguration(\n            this.prefix.concat(prefix),\n            this.clientInfo,\n            this.extensionConfig,\n            this.dictionary\n        )\n    }\n\n    private actualSection(section: string): string {\n        if (this.prefix.length === 0) {\n            return section\n        }\n        return [...this.prefix, section].join('.')\n    }\n\n    private clientNameToIDE(value: string): Configuration['agentIDE'] | undefined {\n        switch (value.toLowerCase()) {\n            case 'vscode':\n                return 'VSCode'\n            case 'jetbrains':\n                return 'JetBrains'\n            case 'emacs':\n                return 'Emacs'\n            case 'neovim':\n                return 'Neovim'\n            default:\n                return undefined\n        }\n    }\n\n    public get(userSection: string, defaultValue?: unknown): any {\n        const section = this.actualSection(userSection)\n\n        const fromDictionary = this.dictionary?.[section]\n        if (fromDictionary !== undefined) {\n            return fromDictionary\n        }\n        const extensionConfig = this.extensionConfig()\n\n        const fromCustomConfiguration = extensionConfig?.customConfiguration?.[section]\n        if (fromCustomConfiguration !== undefined) {\n            return fromCustomConfiguration\n        }\n        switch (section) {\n            case 'cody.serverEndpoint':\n                return extensionConfig?.serverEndpoint\n            case 'cody.proxy':\n                return extensionConfig?.proxy ?? null\n            case 'cody.customHeaders':\n                return extensionConfig?.customHeaders\n            case 'cody.telemetry.level':\n                // Use the dedicated `telemetry/recordEvent` to send telemetry from\n                // agent clients.  The reason we disable telemetry via config is\n                // that we don't want to submit vscode-specific events when\n                // running inside the agent.\n                return 'agent'\n            case 'cody.autocomplete.enabled':\n                return true\n            case 'cody.autocomplete.advanced.provider':\n                return extensionConfig?.autocompleteAdvancedProvider ?? null\n            case 'cody.autocomplete.advanced.model':\n                return extensionConfig?.autocompleteAdvancedModel ?? null\n            case 'cody.advanced.agent.running':\n                return true\n            case 'cody.debug.verbose':\n                return extensionConfig?.verboseDebug ?? false\n            case 'cody.experimental.tracing':\n                return extensionConfig?.verboseDebug ?? false\n            case 'cody.useContext':\n                // Disable embeddings by default.\n                return 'keyword'\n            case 'cody.codebase':\n                return extensionConfig?.codebase\n            case 'cody.advanced.agent.ide':\n                return this.clientNameToIDE(this.clientInfo()?.name ?? '')\n            case 'editor.insertSpaces':\n                return true // TODO: override from IDE clients\n            default:\n                // VS Code picks up default value in package.json, and only uses\n                // the `defaultValue` parameter if package.json provides no\n                // default.\n                return defaultConfigurationValue(section) ?? defaultValue\n        }\n    }\n\n    public has(section: string): boolean {\n        const actual = this.actualSection(section)\n        for (const key in this.dictionary) {\n            if (key.startsWith(actual)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public inspect<T>(section: string):\n        | {\n              key: string\n              defaultValue?: T | undefined\n              globalValue?: T | undefined\n              workspaceValue?: T | undefined\n              workspaceFolderValue?: T | undefined\n              defaultLanguageValue?: T | undefined\n              globalLanguageValue?: T | undefined\n              workspaceLanguageValue?: T | undefined\n              workspaceFolderLanguageValue?: T | undefined\n              languageIds?: string[] | undefined\n          }\n        | undefined {\n        return undefined\n    }\n\n    public async update(\n        section: string,\n        value: any,\n        _configurationTarget?: boolean | vscode.ConfigurationTarget | null | undefined,\n        _overrideInLanguage?: boolean | undefined\n    ): Promise<void> {\n        this.dictionary[this.actualSection(section)] = value\n        return Promise.resolve()\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/testutils/mocks.ts:653-709","content":"            'yaml',\n            'tailwindcss',\n            'editorconfig',\n            'graphql',\n            'vue',\n            'go.mod',\n            'go.work',\n            'go.sum',\n            'gotmpl',\n            'govulncheck',\n            'kotlin',\n            'kotlinscript',\n            'lisp',\n            'toml',\n            'jinja',\n            'pip-requirements',\n            'raw',\n            'prisma',\n            'starlark',\n            'bazel',\n            'bazelrc',\n            'vimrc',\n        ])\n    },\n}\n\nexport enum TextDocumentChangeReason {\n    Undo = 1,\n    Redo = 2,\n}\nexport enum UIKind {\n    Desktop = 1,\n    Web = 2,\n}\n\nexport class FileSystemError extends Error {}\n\nexport const vsCodeMocks = {\n    FileSystemError,\n    FileType,\n    Range,\n    Position,\n    InlineCompletionItem,\n    EventEmitter,\n    EndOfLine,\n    CancellationTokenSource,\n    ThemeColor,\n    ThemeIcon,\n    TreeItem,\n    WorkspaceEdit,\n    UIKind,\n    QuickInputButtons,\n    Uri,\n    languages,\n    env: {\n        uiKind: 1 satisfies vscode_types.UIKind.Desktop,\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:4554-4589","content":"      '@storybook/builder-manager': 8.0.5\n      '@storybook/channels': 8.0.5\n      '@storybook/core-common': 8.0.5\n      '@storybook/core-events': 8.0.5\n      '@storybook/csf': 0.1.2\n      '@storybook/csf-tools': 8.0.5\n      '@storybook/docs-mdx': 3.0.0\n      '@storybook/global': 5.0.0\n      '@storybook/manager': 8.0.5\n      '@storybook/manager-api': 8.0.5(react-dom@18.2.0)(react@18.2.0)\n      '@storybook/node-logger': 8.0.5\n      '@storybook/preview-api': 8.0.5\n      '@storybook/telemetry': 8.0.5\n      '@storybook/types': 8.0.5\n      '@types/detect-port': 1.3.5\n      '@types/node': 18.19.31\n      '@types/pretty-hrtime': 1.0.3\n      '@types/semver': 7.5.8\n      better-opn: 3.0.2\n      chalk: 4.1.2\n      cli-table3: 0.6.3\n      compression: 1.7.4\n      detect-port: 1.5.1\n      express: 4.18.3\n      fs-extra: 11.2.0\n      globby: 11.1.0\n      ip: 2.0.1\n      lodash: 4.17.21\n      open: 8.4.2\n      pretty-hrtime: 1.0.3\n      prompts: 2.4.2\n      read-pkg-up: 7.0.1\n      semver: 7.6.0\n      telejson: 7.2.0\n      tiny-invariant: 1.3.3\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/configuration.ts:93-97","content":"export interface ConfigurationWithAccessToken extends Configuration {\n    serverEndpoint: string\n    /** The access token, which is stored in the secret storage (not configuration). */\n    accessToken: string | null\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:66-97","content":"} from './commands/types'\nexport { CustomCommandType } from './commands/types'\nexport { type DefaultCodyCommands, DefaultChatCommands, DefaultEditCommands } from './commands/types'\nexport { dedupeWith, isDefined, isErrorLike, pluralize } from './common'\nexport { type RangeData, toRangeData, displayLineRange, displayRange } from './common/range'\nexport {\n    ProgrammingLanguage,\n    languageFromFilename,\n    markdownCodeBlockLanguageIDForFilename,\n    extensionForLanguage,\n} from './common/languages'\nexport { renderMarkdown, escapeHTML } from './common/markdown'\nexport { posixFilePaths, pathFunctionsForURI } from './common/path'\nexport { isWindows, isMacOS } from './common/platform'\nexport {\n    assertFileURI,\n    isFileURI,\n    uriBasename,\n    uriDirname,\n    uriExtname,\n    uriParseNameAndExtension,\n    type FileURI,\n} from './common/uri'\nexport type {\n    AutocompleteTimeouts,\n    Configuration,\n    ConfigurationUseContext,\n    ConfigurationWithAccessToken,\n    OllamaGenerateParameters,\n    OllamaOptions,\n    ConfigGetter,\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration-keys.ts:6-9","content":"export function defaultConfigurationValue(key: string): any {\n    const value = (properties as any)[key as any]?.default\n    return value\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1321-1329","content":"    \"ovsx\": \"^0.8.2\",\n    \"pako\": \"^2.1.0\",\n    \"path-browserify\": \"^1.0.1\",\n    \"playwright\": \"1.39.0\",\n    \"progress\": \"^2.0.3\",\n    \"yaml\": \"^2.3.4\"\n  }\n}\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/configuration.ts:20-86","content":"export interface Configuration {\n    proxy?: string | null\n    codebase?: string\n    debugFilter: RegExp | null\n    debugVerbose: boolean\n    telemetryLevel: 'all' | 'off' | 'agent'\n    useContext: ConfigurationUseContext\n    customHeaders: Record<string, string>\n    chatPreInstruction: PromptString\n    editPreInstruction: PromptString\n    codeActions: boolean\n    commandHints: boolean\n    commandCodeLenses: boolean\n\n    /**\n     * Autocomplete\n     */\n    autocomplete: boolean\n    autocompleteLanguages: Record<string, boolean>\n    autocompleteAdvancedProvider:\n        | 'anthropic'\n        | 'fireworks'\n        | 'unstable-openai'\n        | 'experimental-openaicompatible'\n        | 'experimental-ollama'\n        | null\n    autocompleteAdvancedModel: string | null\n    autocompleteCompleteSuggestWidgetSelection?: boolean\n    autocompleteFormatOnAccept?: boolean\n    autocompleteDisableInsideComments: boolean\n\n    /**\n     * Experimental\n     */\n    experimentalGuardrails: boolean\n    experimentalSymfContext: boolean\n    experimentalTracing: boolean\n    experimentalSimpleChatContext: boolean\n    experimentalChatContextRanker: boolean | undefined\n    experimentalOllamaChat: boolean\n    experimentalSupercompletions: boolean\n\n    /**\n     * Unstable Features for internal testing only\n     */\n    internalUnstable: boolean\n\n    /**\n     * Experimental autocomplete\n     */\n    autocompleteExperimentalHotStreak?: boolean\n    autocompleteExperimentalGraphContext: 'bfg' | 'bfg-mixed' | null\n    autocompleteExperimentalOllamaOptions: OllamaOptions\n    autocompleteExperimentalFireworksOptions?: FireworksOptions\n    autocompleteExperimentalSmartThrottle?: boolean\n\n    /**\n     * Hidden settings\n     */\n    isRunningInsideAgent?: boolean\n    agentIDE?: 'VSCode' | 'JetBrains' | 'Neovim' | 'Emacs'\n    autocompleteTimeouts: AutocompleteTimeouts\n\n    testingLocalEmbeddingsModel: string | undefined\n    testingLocalEmbeddingsEndpoint: string | undefined\n    testingLocalEmbeddingsIndexLibraryPath: string | undefined\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/doc/dev/index.md:0-18","content":"## Development\n\n### Setup\n\n1. Install [asdf](https://asdf-vm.com/)\n1. Run `asdf install` (if needed, run `asdf plugin add NAME` for any missing plugins)\n1. Run `pnpm install && pnpm build`\n\n### Build and run the VS Code extension\n\nOpen this repository in VS Code and run the `Launch VS Code Extension (Desktop)` build/debug task (or run `pnpm -C vscode run dev`).\n\nSee [vscode/CONTRIBUTING.md](../../vscode/CONTRIBUTING.md) for more information.\n\n### Other topics\n\n- [Quality tools](quality/index.md)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/configuration.ts:28-183","content":"export function getConfiguration(\n    config: ConfigGetter = vscode.workspace.getConfiguration()\n): Configuration {\n    const isTesting = process.env.CODY_TESTING === 'true'\n\n    function getHiddenSetting<T>(configKey: string, defaultValue?: T): T {\n        return config.get<T>(`cody.${configKey}` as any, defaultValue)\n    }\n\n    let debugRegex: RegExp | null = null\n    try {\n        const debugPattern: string | null = config.get<string | null>(CONFIG_KEY.debugFilter, null)\n        if (debugPattern) {\n            if (debugPattern === '*') {\n                debugRegex = /.*/\n            } else {\n                debugRegex = new RegExp(debugPattern)\n            }\n        }\n    } catch (error: any) {\n        void vscode.window.showErrorMessage(\n            \"Error parsing cody.debug.filter regex - using default '*'\",\n            error\n        )\n        debugRegex = /.*/\n    }\n\n    let autocompleteAdvancedProvider = config.get<\n        | Configuration['autocompleteAdvancedProvider']\n        | 'unstable-ollama'\n        | 'unstable-fireworks'\n        | 'experimental-openaicompatible'\n    >(CONFIG_KEY.autocompleteAdvancedProvider, null)\n\n    // Handle deprecated provider identifiers\n    switch (autocompleteAdvancedProvider) {\n        case 'unstable-fireworks':\n            autocompleteAdvancedProvider = 'fireworks'\n            break\n        case 'unstable-ollama':\n            autocompleteAdvancedProvider = 'experimental-ollama'\n            break\n    }\n\n    // check if the configured enum values are valid\n    const configKeys = [\n        'autocompleteAdvancedProvider',\n        'autocompleteAdvancedModel',\n    ] as (keyof ConfigurationKeysMap)[]\n\n    for (const configVal of configKeys) {\n        const key = configVal.replaceAll(/([A-Z])/g, '.$1').toLowerCase()\n        const value: string | null = config.get(CONFIG_KEY[configVal])\n        checkValidEnumValues(key, value)\n    }\n\n    const autocompleteExperimentalGraphContext: 'bfg' | null = getHiddenSetting(\n        'autocomplete.experimental.graphContext',\n        null\n    )\n\n    return {\n        proxy: config.get<string | null>(CONFIG_KEY.proxy, null),\n        codebase: sanitizeCodebase(config.get(CONFIG_KEY.codebase)),\n        customHeaders: config.get<object>(CONFIG_KEY.customHeaders, {}) as Record<string, string>,\n        useContext: config.get<ConfigurationUseContext>(CONFIG_KEY.useContext) || 'embeddings',\n        debugVerbose: config.get<boolean>(CONFIG_KEY.debugVerbose, false),\n        debugFilter: debugRegex,\n        telemetryLevel: config.get<'all' | 'off'>(CONFIG_KEY.telemetryLevel, 'all'),\n        autocomplete: config.get(CONFIG_KEY.autocompleteEnabled, true),\n        autocompleteLanguages: config.get(CONFIG_KEY.autocompleteLanguages, {\n            '*': true,\n        }),\n        chatPreInstruction: PromptString.fromConfig(config, CONFIG_KEY.chatPreInstruction, ps``),\n        editPreInstruction: PromptString.fromConfig(config, CONFIG_KEY.editPreInstruction, ps``),\n        commandCodeLenses: config.get(CONFIG_KEY.commandCodeLenses, false),\n        autocompleteAdvancedProvider,\n        autocompleteAdvancedModel: config.get<string | null>(CONFIG_KEY.autocompleteAdvancedModel, null),\n        autocompleteCompleteSuggestWidgetSelection: config.get(\n            CONFIG_KEY.autocompleteCompleteSuggestWidgetSelection,\n            true\n        ),\n        autocompleteFormatOnAccept: config.get(CONFIG_KEY.autocompleteFormatOnAccept, true),\n        autocompleteDisableInsideComments: config.get(\n            CONFIG_KEY.autocompleteDisableInsideComments,\n            false\n        ),\n        codeActions: config.get(CONFIG_KEY.codeActionsEnabled, true),\n        commandHints: config.get(CONFIG_KEY.commandHintsEnabled, false),\n\n        /**\n         * Hidden settings for internal use only.\n         */\n\n        internalUnstable: getHiddenSetting('internal.unstable', isTesting),\n\n        autocompleteExperimentalGraphContext,\n        experimentalSimpleChatContext: getHiddenSetting('experimental.simpleChatContext', true),\n        experimentalSymfContext: getHiddenSetting('experimental.symfContext', true),\n\n        experimentalGuardrails: getHiddenSetting('experimental.guardrails', isTesting),\n        experimentalTracing: getHiddenSetting('experimental.tracing', false),\n\n        experimentalOllamaChat: getHiddenSetting('experimental.ollamaChat', false),\n        experimentalSupercompletions: getHiddenSetting('experimental.supercompletions', false),\n\n        experimentalChatContextRanker: getHiddenSetting('experimental.chatContextRanker', false),\n\n        autocompleteExperimentalHotStreak: getHiddenSetting(\n            'autocomplete.experimental.hotStreak',\n            false\n        ),\n        autocompleteExperimentalOllamaOptions: getHiddenSetting(\n            'autocomplete.experimental.ollamaOptions',\n            {\n                url: OLLAMA_DEFAULT_URL,\n                model: 'codellama:7b-code',\n            }\n        ),\n        autocompleteExperimentalFireworksOptions: getHiddenSetting(\n            'autocomplete.experimental.fireworksOptions',\n            undefined\n        ),\n        autocompleteExperimentalSmartThrottle: getHiddenSetting(\n            'autocomplete.experimental.smartThrottle',\n            false\n        ),\n\n        // Note: In spirit, we try to minimize agent-specific code paths in the VSC extension.\n        // We currently use this flag for the agent to provide more helpful error messages\n        // when something goes wrong, and to suppress event logging in the agent.\n        // Rely on this flag sparingly.\n        isRunningInsideAgent: getHiddenSetting('advanced.agent.running', false),\n        agentIDE: getHiddenSetting<'VSCode' | 'JetBrains' | 'Neovim' | 'Emacs'>('advanced.agent.ide'),\n        autocompleteTimeouts: {\n            multiline: getHiddenSetting<number | undefined>(\n                'autocomplete.advanced.timeout.multiline',\n                undefined\n            ),\n            singleline: getHiddenSetting<number | undefined>(\n                'autocomplete.advanced.timeout.singleline',\n                undefined\n            ),\n        },\n\n        testingLocalEmbeddingsModel: isTesting\n            ? getHiddenSetting<string | undefined>('testing.localEmbeddings.model', undefined)\n            : undefined,\n        testingLocalEmbeddingsEndpoint: isTesting\n            ? getHiddenSetting<string | undefined>('testing.localEmbeddings.endpoint', undefined)\n            : undefined,\n        testingLocalEmbeddingsIndexLibraryPath: isTesting\n            ? getHiddenSetting<string | undefined>('testing.localEmbeddings.indexLibraryPath', undefined)\n            : undefined,\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:24-32","content":"    \"watch:build:dev:web\": \"concurrently \\\"pnpm run -s _build:esbuild:web --watch\\\" \\\"pnpm run -s _build:webviews --mode development --watch\\\"\",\n    \"watch:build:dev:desktop\": \"concurrently \\\"pnpm run -s _build:esbuild:desktop --watch\\\" \\\"pnpm run -s _build:webviews --mode development --watch\\\"\",\n    \"_build:esbuild:desktop\": \"pnpm download-wasm && esbuild ./src/extension.node.ts --bundle --outfile=dist/extension.node.js --external:vscode --format=cjs --platform=node --sourcemap\",\n    \"_build:esbuild:web\": \"esbuild ./src/extension.web.ts --platform=browser --bundle --outfile=dist/extension.web.js --alias:path=path-browserify --alias:node:path=path-browserify --alias:node:os=os-browserify --external:vscode --define:process='{\\\"env\\\":{}}' --define:window=self --format=cjs --sourcemap\",\n    \"_build:webviews\": \"vite -c webviews/vite.config.ts build\",\n    \"release\": \"ts-node-transpile-only ./scripts/release.ts\",\n    \"download-wasm\": \"ts-node-transpile-only ./scripts/download-wasm-modules.ts\",\n    \"release:dry-run\": \"pnpm run download-wasm && CODY_RELEASE_DRY_RUN=1 ts-node ./scripts/release.ts\",\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/CodePrinter.ts:43-45","content":"    public build(): string {\n        return this.out.join('')\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/package.json:64-78","content":"    \"@types/diff\": \"^5.0.9\",\n    \"@types/google-protobuf\": \"3.15.12\",\n    \"@types/minimatch\": \"^5.1.2\",\n    \"@types/uuid\": \"^9.0.2\",\n    \"@types/vscode\": \"^1.80.0\",\n    \"@types/ws\": \"^8.5.10\",\n    \"diff\": \"^5.2.0\",\n    \"esbuild\": \"^0.18.19\",\n    \"google-protobuf\": \"^3.21.2\",\n    \"parse-git-diff\": \"^0.0.14\",\n    \"pkg\": \"^5.8.1\",\n    \"rimraf\": \"^5.0.5\"\n  }\n}\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/custom-commands.ts:147-174","content":"    public async build(type: CustomCommandType): Promise<Map<string, CodyCommand> | null> {\n        const uri = this.getConfigFileByType(type)\n        if (!uri || (type === CustomCommandType.Workspace && !vscode.workspace.isTrusted)) {\n            return null\n        }\n        try {\n            const content = await getDocText(uri)\n            if (!content.trim()) {\n                return null\n            }\n            const customCommandsMap = buildCodyCommandMap(type, content)\n            this.customCommandsMap = new Map([...this.customCommandsMap, ...customCommandsMap])\n\n            // Register Custom Commands as VS Code commands\n            for (const [key, _command] of customCommandsMap) {\n                this.registeredCommands.push(\n                    vscode.commands.registerCommand(`cody.command.custom.${key}`, () =>\n                        vscode.commands.executeCommand('cody.action.command', key, {\n                            source: 'editor',\n                        })\n                    )\n                )\n            }\n        } catch (error) {\n            console.error('CustomCommandsProvider:build', 'failed', { verbose: error })\n        }\n        return this.customCommandsMap\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/language-file-extensions.json:115-192","content":"    \"ant\",\n    \"axml\",\n    \"builds\",\n    \"ccxml\",\n    \"clixml\",\n    \"cproject\",\n    \"csl\",\n    \"csproj\",\n    \"ct\",\n    \"dita\",\n    \"ditamap\",\n    \"ditaval\",\n    \"dll.config\",\n    \"dotsettings\",\n    \"filters\",\n    \"fsproj\",\n    \"fxml\",\n    \"glade\",\n    \"gml\",\n    \"grxml\",\n    \"iml\",\n    \"ivy\",\n    \"jelly\",\n    \"jsproj\",\n    \"kml\",\n    \"launch\",\n    \"mdpolicy\",\n    \"mjml\",\n    \"mod\",\n    \"mxml\",\n    \"nproj\",\n    \"nuspec\",\n    \"odd\",\n    \"osm\",\n    \"pkgproj\",\n    \"plist\",\n    \"props\",\n    \"ps1xml\",\n    \"psc1\",\n    \"pt\",\n    \"rdf\",\n    \"resx\",\n    \"rss\",\n    \"scxml\",\n    \"sfproj\",\n    \"srdf\",\n    \"storyboard\",\n    \"stTheme\",\n    \"sublime-snippet\",\n    \"targets\",\n    \"tmCommand\",\n    \"tml\",\n    \"tmLanguage\",\n    \"tmPreferences\",\n    \"tmSnippet\",\n    \"tmTheme\",\n    \"ui\",\n    \"urdf\",\n    \"ux\",\n    \"vbproj\",\n    \"vcxproj\",\n    \"vsixmanifest\",\n    \"vssettings\",\n    \"vstemplate\",\n    \"vxml\",\n    \"wixproj\",\n    \"wsdl\",\n    \"wsf\",\n    \"wxi\",\n    \"wxl\",\n    \"wxs\",\n    \"x3d\",\n    \"xacro\",\n    \"xaml\",\n    \"xib\",\n    \"xlf\",\n    \"xliff\",\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/prompt-builder/index.ts:39-41","content":"    public build(): Message[] {\n        return this.prefixMessages.concat([...this.reverseMessages].reverse())\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/index.ts:97-130","content":"} from './configuration'\nexport { NoopEditor } from './editor'\nexport type {\n    ActiveTextEditor,\n    ActiveTextEditorDiagnostic,\n    ActiveTextEditorDiagnosticType,\n    ActiveTextEditorSelection,\n    ActiveTextEditorVisibleContent,\n    Editor,\n} from './editor'\nexport {\n    displayPath,\n    displayPathBasename,\n    displayPathDirname,\n    displayPathWithoutWorkspaceFolderPrefix,\n    setDisplayPathEnvInfo,\n    type DisplayPathEnvInfo,\n} from './editor/displayPath'\nexport { hydrateAfterPostMessage } from './editor/hydrateAfterPostMessage'\nexport * from './editor/utils'\nexport {\n    FeatureFlag,\n    FeatureFlagProvider,\n    featureFlagProvider,\n} from './experimentation/FeatureFlagProvider'\nexport { GuardrailsPost, summariseAttribution } from './guardrails'\nexport type { Attribution, Guardrails } from './guardrails'\nexport { SourcegraphGuardrailsClient } from './guardrails/client'\nexport {\n    CompletionStopReason,\n    type CodeCompletionsClient,\n    type CodeCompletionsParams,\n    type CompletionResponseGenerator,\n"}]

 class: Find logic
