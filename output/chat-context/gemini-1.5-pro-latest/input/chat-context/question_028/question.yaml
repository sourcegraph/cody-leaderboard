 question: Where do we check for completion types?
# CHAT
# CHAT_QUESTION Where do we check for completion types?

# CHAT_REPLY The code you provided doesn't seem to have a central place where "completion types" are explicitly checked in the traditional sense of a conditional statement or switch case. 
# CHAT_REPLY 
# CHAT_REPLY However, based on the context, it seems like "completion types" might refer to the different kinds of type information associated with code completion suggestions. 
# CHAT_REPLY 
# CHAT_REPLY Here's how the code you provided seems to handle different aspects of completion types:
# CHAT_REPLY 
# CHAT_REPLY - **`scip.ts`:** This file defines various TypeScript types like `SingleType`, `SuperType`, `AnnotatedType`, etc. These types likely represent different categories of code completion suggestions, such as suggesting a variable of a specific type, a superclass, or an annotated type.
# CHAT_REPLY - **`get-completion-params.ts`:** This file defines an interface `LineNumberDependentCompletionParamsByType` which suggests that completion parameters might vary depending on whether the code is on a single line or multiple lines. This could influence the types of completions offered.
# CHAT_REPLY - **`test-helpers.ts`:** This file defines a `completion` function that seems to extract completion suggestions from a template string. This suggests that completion types might be implicitly determined based on the context of the code and the template being used.
# CHAT_REPLY - **`types.ts`:** This file defines several interfaces related to completions, including `CompletionResponse`, `CompletionEvent`, `CompletionParameters`, and `CompletionCallbacks`. These interfaces likely define the structure of data related to code completion suggestions, and the different types of information that might be associated with a suggestion.
# CHAT_REPLY 
# CHAT_REPLY Therefore, instead of a single point of checking, the code likely determines and utilizes "completion types" throughout the completion suggestion process based on factors like:
# CHAT_REPLY 
# CHAT_REPLY - The specific type definitions in `scip.ts`.
# CHAT_REPLY - The context of the code being edited (e.g., single-line vs. multi-line).
# CHAT_REPLY - The templates used for generating completion suggestions.
# CHAT_REPLY - The data structures used to represent completions and their associated information. 
# CHAT_REPLY 
# CHAT_REPLY To get a more precise understanding of how "completion types" are used, you would need to analyze how these different components interact during the code completion process.

# CONTEXT_ITEMS [{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/index.ts:0-2","content":"export type { Message } from './completions/types'\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/types.ts:0-59","content":"import type * as vscode from 'vscode'\n\nimport type { AutocompleteContextSnippet, DocumentContext } from '@sourcegraph/cody-shared'\nimport type { LastInlineCompletionCandidate } from './get-inline-completions'\n\n/**\n * @see vscode.InlineCompletionItem\n */\nexport interface InlineCompletionItem {\n    insertText: string\n    /**\n     * The range to replace.\n     * Must begin and end on the same line.\n     *\n     * Prefer replacements over insertions to provide a better experience when the user deletes typed text.\n     */\n    range?: vscode.Range\n}\n\nexport interface ContextRetrieverOptions {\n    document: vscode.TextDocument\n    position: vscode.Position\n    docContext: DocumentContext\n    hints: {\n        maxChars: number\n        maxMs: number\n    }\n    lastCandidate?: LastInlineCompletionCandidate\n    abortSignal?: AbortSignal\n}\n\n/**\n * Interface for a general purpose retrieval strategy. During the retrieval phase, all retrievers\n * that are outlined in the execution plan will be called concurrently.\n */\nexport interface ContextRetriever extends vscode.Disposable {\n    /**\n     * The identifier of the retriever. Used for logging purposes.\n     */\n    identifier: string\n\n    /**\n     * Start a retrieval processes. Implementers should observe the hints to return the best results\n     * in the available time.\n     *\n     * The client hints signalize _soft_ timeouts. When a hard timeout is reached, the retriever's\n     * results will not be taken into account anymore so it's suggested to return _something_ during\n     * the maxMs time.\n     *\n     * The abortSignal can be used to detect when the completion request becomes invalidated. When\n     * triggered, any further work is ignored so you can stop immediately.\n     */\n    retrieve(options: ContextRetrieverOptions): Promise<AutocompleteContextSnippet[]>\n\n    /**\n     * Return true if the retriever supports the given languageId.\n     */\n    isSupportedForLanguageId(languageId: string): boolean\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2372-2394","content":"                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: SuperType\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2478-2500","content":"                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: AnnotatedType\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/text-processing/process-inline-completions.ts:123-127","content":"interface GetNodeTypesInfoParams {\n    position: Position\n    parseTree?: Tree\n    multilineTriggerPosition: Position | null\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2350-2372","content":"                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: ThisType\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/text-processing/process-inline-completions.ts:129-160","content":"function getNodeTypesInfo(\n    params: GetNodeTypesInfoParams\n): InlineCompletionItemWithAnalytics['nodeTypes'] | undefined {\n    const { position, parseTree, multilineTriggerPosition } = params\n\n    const positionBeforeCursor = asPoint({\n        line: position.line,\n        character: Math.max(0, position.character - 1),\n    })\n\n    if (parseTree) {\n        const captures = getNodeAtCursorAndParents(parseTree.rootNode, positionBeforeCursor)\n\n        if (captures.length > 0) {\n            const [atCursor, ...parents] = captures\n            const lastAncestorOnTheSameLine = findLastAncestorOnTheSameRow(\n                parseTree.rootNode,\n                asPoint(multilineTriggerPosition || position)\n            )\n\n            return {\n                atCursor: atCursor.node.type,\n                parent: parents[0]?.node.type,\n                grandparent: parents[1]?.node.type,\n                greatGrandparent: parents[2]?.node.type,\n                lastAncestorOnTheSameLine: lastAncestorOnTheSameLine?.type,\n            }\n        }\n    }\n\n    return undefined\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2584-2605","content":"                              repeated_type?: never\n                              match_type?: MatchType\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: LambdaType\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:3655-3657","content":"        set types(value: Type[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2436-2457","content":"                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: WithType\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:3740-3742","content":"        set types(value: Type[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2457-2478","content":"                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: StructuralType\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:3825-3827","content":"        set types(value: Type[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2500-2521","content":"                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: ExistentialType\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:39-43","content":"export interface CompletionCallbacks {\n    onChange: (text: string) => void\n    onComplete: () => void\n    onError: (error: Error, statusCode?: number) => void\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2415-2436","content":"                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: UnionType\n                              with_type?: never\n                              structural_type?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:28-37","content":"export interface CompletionParameters {\n    fast?: boolean\n    messages: Message[]\n    maxTokensToSample: number\n    temperature?: number\n    stopSequences?: string[]\n    topK?: number\n    topP?: number\n    model?: string\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2521-2542","content":"                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: UniversalType\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:6-8","content":"interface CompletionEvent extends CompletionResponse {\n    type: 'completion'\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2329-2350","content":"                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: SingleType\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/sourcegraph-api/completions/types.ts:23-26","content":"export interface CompletionResponse {\n    completion: string\n    stopReason: string\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2563-2584","content":"                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: RepeatedType\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/test-helpers.ts:17-31","content":"export function completion(string: TemplateStringsArray, ...values: unknown[]): CompletionResponse {\n    const raw = dedent(string, ...values)\n    let completion = raw\n\n    const start = raw.indexOf('├')\n    const end = raw.lastIndexOf('┤')\n    if (0 <= start && start <= end) {\n        completion = raw.slice(start + 1, end)\n    }\n\n    return {\n        completion,\n        stopReason: 'unknown',\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2855-2869","content":"            super_type?: ReturnType<typeof SuperType.prototype.toObject>\n            constant_type?: ReturnType<typeof ConstantType.prototype.toObject>\n            intersection_type?: ReturnType<typeof IntersectionType.prototype.toObject>\n            union_type?: ReturnType<typeof UnionType.prototype.toObject>\n            with_type?: ReturnType<typeof WithType.prototype.toObject>\n            structural_type?: ReturnType<typeof StructuralType.prototype.toObject>\n            annotated_type?: ReturnType<typeof AnnotatedType.prototype.toObject>\n            existential_type?: ReturnType<typeof ExistentialType.prototype.toObject>\n            universal_type?: ReturnType<typeof UniversalType.prototype.toObject>\n            by_name_type?: ReturnType<typeof ByNameType.prototype.toObject>\n            repeated_type?: ReturnType<typeof RepeatedType.prototype.toObject>\n            match_type?: ReturnType<typeof MatchType.prototype.toObject>\n            lambda_type?: ReturnType<typeof LambdaType.prototype.toObject>\n        }): Type {\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/completions/providers/get-completion-params.ts:10-13","content":"interface LineNumberDependentCompletionParamsByType {\n    singlelineParams: LineNumberDependentCompletionParams\n    multilineParams: LineNumberDependentCompletionParams\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2542-2563","content":"                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: ByNameType\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2394-2415","content":"                              super_type?: never\n                              constant_type?: ConstantType\n                              intersection_type?: never\n                              union_type?: never\n                              with_type?: never\n                              structural_type?: never\n                              annotated_type?: never\n                              existential_type?: never\n                              universal_type?: never\n                              by_name_type?: never\n                              repeated_type?: never\n                              match_type?: never\n                              lambda_type?: never\n                          }\n                      | {\n                              type_ref?: never\n                              single_type?: never\n                              this_type?: never\n                              super_type?: never\n                              constant_type?: never\n                              intersection_type?: IntersectionType\n"}]

 class: Find logic
