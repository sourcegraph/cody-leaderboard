 question: Where is the code that executes the "Find Code Smells" command?
# CHAT
# CHAT_QUESTION Where is the code that executes the "Find Code Smells" command?

# CHAT_REPLY The code that executes the "Find Code Smells" command is in the file `cody_test/vscode/src/commands/execute/smell.ts`.
# CHAT_REPLY 
# CHAT_REPLY Here's a breakdown:
# CHAT_REPLY 
# CHAT_REPLY - The `executeSmellCommand` function is the entry point for the command. 
# CHAT_REPLY - It uses `telemetryService` and `telemetryRecorder` to record that the command was executed.
# CHAT_REPLY - The core logic of the command is within the `smellCommand` function, which is called by `executeChat`. 
# CHAT_REPLY 
# CHAT_REPLY The provided code snippet doesn't show the implementation of `smellCommand`, so the exact details of how it finds code smells are in that function's definition elsewhere in the codebase.

# CONTEXT_ITEMS [{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/explain.ts:23-42","content":"    private createCommandCodeAction(\n        uri: vscode.Uri,\n        diagnostics: vscode.Diagnostic[]\n    ): vscode.CodeAction {\n        const action = new vscode.CodeAction('Ask Cody to Explain', vscode.CodeActionKind.QuickFix)\n        const instruction = this.getCodeActionInstruction(uri, diagnostics)\n        action.command = {\n            command: 'cody.action.chat',\n            arguments: [\n                {\n                    text: instruction,\n                    source: 'code-action:explain',\n                    submitType: 'user-newchat',\n                } satisfies ExecuteChatArguments,\n            ],\n            title: 'Ask Cody to Explain',\n        }\n        action.diagnostics = diagnostics\n        return action\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/pnpm-lock.yaml:258-301","content":"        version: 4.0.16\n      vscode-uri:\n        specifier: ^3.0.7\n        version: 3.0.7\n    devDependencies:\n      '@types/crypto-js':\n        specifier: ^4.2.2\n        version: 4.2.2\n      '@types/dedent':\n        specifier: ^0.7.0\n        version: 0.7.0\n      '@types/diff':\n        specifier: ^5.0.9\n        version: 5.0.9\n      '@types/dompurify':\n        specifier: ^3.0.2\n        version: 3.0.2\n      '@types/highlight.js':\n        specifier: ^9.12.4\n        version: 9.12.4\n      '@types/isomorphic-fetch':\n        specifier: ^0.0.39\n        version: 0.0.39\n      '@types/lodash':\n        specifier: ^4.14.195\n        version: 4.14.195\n      '@types/marked':\n        specifier: ^5.0.0\n        version: 5.0.0\n      '@types/node-fetch':\n        specifier: ^2.6.4\n        version: 2.6.4\n      '@types/vscode':\n        specifier: ^1.80.0\n        version: 1.80.0\n\n  vscode:\n    dependencies:\n      '@anthropic-ai/sdk':\n        specifier: ^0.4.2\n        version: 0.4.3\n      '@floating-ui/react':\n        specifier: ^0.26.9\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/fixup.ts:47-77","content":"    private async createCommandCodeAction(\n        document: vscode.TextDocument,\n        diagnostics: vscode.Diagnostic[],\n        range: vscode.Range\n    ): Promise<vscode.CodeAction> {\n        const action = new vscode.CodeAction('Ask Cody to Fix', vscode.CodeActionKind.QuickFix)\n        const instruction = await this.getCodeActionInstruction(\n            document.uri,\n            PromptString.fromDocumentText(document, range),\n            diagnostics\n        )\n        const source = 'code-action:fix'\n        action.command = {\n            command: 'cody.command.edit-code',\n            arguments: [\n                {\n                    configuration: { instruction, range, intent: 'fix', document },\n                    source,\n                    telemetryMetadata: {\n                        diagnostics: diagnostics.map(diagnostic => ({\n                            code: getDiagnosticCode(diagnostic.code),\n                            source: diagnostic.source,\n                        })),\n                    },\n                } satisfies ExecuteEditArguments,\n            ],\n            title: 'Ask Cody to Fix',\n        }\n        action.diagnostics = diagnostics\n        return action\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/non-stop/strategies.ts:0-29","content":"// FixupController has pluggable strategies for controls and presentation. This\n// file defines the interfaces for those strategies.\n\nimport type * as vscode from 'vscode'\nimport type { FixupFile } from './FixupFile'\nimport type { FixupTask } from './FixupTask'\n\n// An interface for decorating fixup tasks with controls.\nexport interface FixupControlApplicator extends vscode.Disposable {\n    didUpdateTask(task: FixupTask): void\n    didDeleteTask(task: FixupTask): void\n    // Called when visible files changed.\n    // TODO: This API design is gross: this is *not* called when a new task\n    // is created in a file that is already visible. It *is* called every time\n    // visible files change, so be prepared to handle repeated calls with\n    // an empty or unchanged set of files efficiently. Unearth a consistent\n    // API here.\n    visibleFilesWithTasksMaybeChanged(files: readonly FixupFile[]): void\n}\n\n// A FixupControlApplicator which does not present any controls for fixup\n// tasks.\nexport class NullFixupControlApplicator implements FixupControlApplicator {\n    public didUpdateTask(task: FixupTask): void {}\n    public didDeleteTask(task: FixupTask): void {}\n    public visibleFilesWithTasksMaybeChanged(files: readonly FixupFile[]): void {}\n    public dispose(): void {}\n}\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/code-actions/test.ts:40-53","content":"    private createCommandCodeAction(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        displayText: string\n    ): vscode.CodeAction {\n        const action = new vscode.CodeAction(displayText, vscode.CodeActionKind.RefactorRewrite)\n        const source = 'code-action:test'\n        action.command = {\n            command: 'cody.command.unit-tests',\n            arguments: [{ source } satisfies Partial<CodyCommandArgs>],\n            title: displayText,\n        }\n        return action\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:16-24","content":"    \"dev:web\": \"pnpm run -s build:dev:web && pnpm run -s _dev:vscode-test-web --browserType none\",\n    \"watch:dev:web\": \"concurrently \\\"pnpm run -s watch:build:dev:web\\\" \\\"pnpm run -s _dev:vscode-test-web --browserType none\\\"\",\n    \"_dev:vscode-test-web\": \"vscode-test-web --extensionDevelopmentPath=. ${WORKSPACE-test/fixtures/workspace}\",\n    \"build\": \"tsc --build && pnpm run -s _build:esbuild:desktop && pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\",\n    \"_build:desktop\": \"pnpm run -s _build:esbuild:desktop && pnpm run -s _build:webviews --mode production\",\n    \"_build:web\": \"pnpm run -s _build:esbuild:web && pnpm run -s _build:webviews --mode production\",\n    \"build:dev:desktop\": \"concurrently \\\"pnpm run -s _build:esbuild:desktop --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\" \\\"pnpm run -s _build:webviews --mode development\\\"\",\n    \"build:dev:web\": \"concurrently \\\"pnpm run -s _build:esbuild:web --alias:@sourcegraph/cody-shared=@sourcegraph/cody-shared/src/index --alias:@sourcegraph/cody-shared/src=@sourcegraph/cody-shared/src\\\" \\\"pnpm run -s _build:webviews --mode development\\\"\",\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/package.json:1254-1289","content":"    \"@vscode/codicons\": \"^0.0.35\",\n    \"@vscode/webview-ui-toolkit\": \"^1.2.2\",\n    \"async-mutex\": \"^0.4.0\",\n    \"axios\": \"^1.3.6\",\n    \"classnames\": \"^2.3.2\",\n    \"crypto-js\": \"^4.2.0\",\n    \"detect-indent\": \"^7.0.1\",\n    \"diff\": \"^5.2.0\",\n    \"fast-xml-parser\": \"^4.3.2\",\n    \"glob\": \"^7.2.3\",\n    \"ini\": \"^4.1.2\",\n    \"isomorphic-fetch\": \"^3.0.0\",\n    \"js-levenshtein\": \"^1.1.6\",\n    \"lexical\": \"^0.13.1\",\n    \"lodash\": \"^4.17.21\",\n    \"lru-cache\": \"^10.0.0\",\n    \"mkdirp\": \"^3.0.1\",\n    \"os-browserify\": \"^0.3.0\",\n    \"parse-git-diff\": \"^0.0.14\",\n    \"proxy-agent\": \"^6.4.0\",\n    \"re2-wasm\": \"^1.0.2\",\n    \"semver\": \"^7.5.4\",\n    \"socks-proxy-agent\": \"^8.0.1\",\n    \"unzipper\": \"^0.10.14\",\n    \"uuid\": \"^9.0.0\",\n    \"vscode-languageserver-textdocument\": \"^1.0.8\",\n    \"vscode-uri\": \"^3.0.7\",\n    \"web-tree-sitter\": \"^0.21.0\",\n    \"wink-nlp-utils\": \"^2.1.0\"\n  },\n  \"devDependencies\": {\n    \"@google-cloud/pubsub\": \"^3.7.3\",\n    \"@playwright/test\": \"1.39.0\",\n    \"@pollyjs/adapter-node-http\": \"^6.0.6\",\n    \"@pollyjs/core\": \"^6.0.6\",\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:144-164","content":"- [ ] Verify that the chat executed by running the command appears in the chat list in the left hand panel.\n\n#### Editing\n\n- [ ] Highlight a section of code.\n- [ ] Click the Code Action lightbulb icon in the project file\n- [ ] Select `Cody: Edit Code`.\n- [ ] Provide instructions for how Cody should edit the selected code.\n- [ ] Verify that there is a notification that \"Cody is working...\" while edits are being applied.\n- [ ] Verify that Cody automatically applies edits to the selected code, per the userâ€™s instructions\n- [ ] Verify that you can see a diff view of the edit in a new tab by clicking `Show diff`.\n- [ ] Verify that you can prompt Cody to retry the command by clicking `Retry` and entering new instructions.\n- [ ] Verify that you can undo the edit by clicking `Undo`.\n- [ ] Verify that the ghost text disappears by clicking `Accept`.\n\n#### Generating code\n\n- [ ] Move the cursor to an empty line, do not highlight any selection.\n- [ ] Click the Code Action lightbulb icon in the project file.\n- [ ] Select `Cody: Generate Code`.\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/language-file-extensions.json:0-34","content":"{\n  \"actionscript\": [\"as\"],\n  \"ada\": [\"adb\", \"ada\", \"ads\"],\n  \"apache\": [\"apacheconf\"],\n  \"apex\": [\"cls\", \"apex\", \"trigger\"],\n  \"applescript\": [\"applescript\", \"scpt\"],\n  \"beancount\": [\"beancount\"],\n  \"bibtex\": [\"bib\"],\n  \"clojure\": [\"clj\", \"cljs\", \"cljx\"],\n  \"cmake\": [\"cmake\", \"cmake.in\", \"in\"],\n  \"coffescript\": [\"coffee\", \"cake\", \"cson\", \"cjsx\", \"iced\"],\n  \"cpp\": [\"c\", \"cc\", \"cpp\", \"cxx\", \"c++\", \"h++\", \"hh\", \"h\", \"hpp\", \"pc\", \"pcc\"],\n  \"csharp\": [\"cs\", \"csx\"],\n  \"css\": [\"css\"],\n  \"cuda\": [\"cu\", \"cuh\"],\n  \"d\": [\"d\"],\n  \"dot\": [\"dot\"],\n  \"dart\": [\"dart\"],\n  \"diff\": [\"diff\", \"patch\"],\n  \"dockerfile\": [\"Dockerfile\"],\n  \"django\": [\"jinja\"],\n  \"dos\": [\"bat\", \"cmd\"],\n  \"elixir\": [\"ex\", \"exs\"],\n  \"elm\": [\"elm\"],\n  \"erlang\": [\"erl\"],\n  \"fortran\": [\"f\", \"for\", \"frt\", \"fr\", \"forth\", \"4th\", \"fth\"],\n  \"fsharp\": [\"fs\"],\n  \"go\": [\"go\"],\n  \"graphql\": [\"graphql\"],\n  \"groovy\": [\"groovy\"],\n  \"haml\": [\"haml\"],\n  \"handlebars\": [\"hbs\", \"handlebars\"],\n  \"haskell\": [\"hs\", \"hsc\"],\n  \"hcl\": [\"hcl\", \"nomad\", \"tf\", \"tfvars\", \"workflow\"],\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/tree-sitter/query-tests/test-data/graph-identifiers.tsx:50-108","content":"\nfunction signature()\n//                |\n\n// ------------------------------------\n\n// comment\n//       |\n\n// ------------------------------------\n\n/**\n * comment\n //      |\n */\n\n// ------------------------------------\n\nfunction functionName() {}\n//                  |\n\n// ------------------------------------\n\nfunction returnStatement() {\n    return\n    //   |\n}\n\n// ------------------------------------\n\nfunction returnStatementValue(value: Agent, flag?: boolean) {\n    return 'asd'\n    //     |\n}\n\n// ------------------------------------\n\ninterface TestInterface {\n    //                  |\n}\n\n// ------------------------------------\n\ntype TestType = {\n    //          |\n}\n\n// ------------------------------------\n\nreturnStatementValue('value')\n//                   |\n\n// ------------------------------------\n\nreturnStatementValue('value', false)\n//                            |\n\n// ------------------------------------\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/language-file-extensions.json:115-192","content":"    \"ant\",\n    \"axml\",\n    \"builds\",\n    \"ccxml\",\n    \"clixml\",\n    \"cproject\",\n    \"csl\",\n    \"csproj\",\n    \"ct\",\n    \"dita\",\n    \"ditamap\",\n    \"ditaval\",\n    \"dll.config\",\n    \"dotsettings\",\n    \"filters\",\n    \"fsproj\",\n    \"fxml\",\n    \"glade\",\n    \"gml\",\n    \"grxml\",\n    \"iml\",\n    \"ivy\",\n    \"jelly\",\n    \"jsproj\",\n    \"kml\",\n    \"launch\",\n    \"mdpolicy\",\n    \"mjml\",\n    \"mod\",\n    \"mxml\",\n    \"nproj\",\n    \"nuspec\",\n    \"odd\",\n    \"osm\",\n    \"pkgproj\",\n    \"plist\",\n    \"props\",\n    \"ps1xml\",\n    \"psc1\",\n    \"pt\",\n    \"rdf\",\n    \"resx\",\n    \"rss\",\n    \"scxml\",\n    \"sfproj\",\n    \"srdf\",\n    \"storyboard\",\n    \"stTheme\",\n    \"sublime-snippet\",\n    \"targets\",\n    \"tmCommand\",\n    \"tml\",\n    \"tmLanguage\",\n    \"tmPreferences\",\n    \"tmSnippet\",\n    \"tmTheme\",\n    \"ui\",\n    \"urdf\",\n    \"ux\",\n    \"vbproj\",\n    \"vcxproj\",\n    \"vsixmanifest\",\n    \"vssettings\",\n    \"vstemplate\",\n    \"vxml\",\n    \"wixproj\",\n    \"wsdl\",\n    \"wsf\",\n    \"wxi\",\n    \"wxl\",\n    \"wxs\",\n    \"x3d\",\n    \"xacro\",\n    \"xaml\",\n    \"xib\",\n    \"xlf\",\n    \"xliff\",\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/src/cli/scip-codegen/scip.ts:2010-2012","content":"        set code(value: string) {\n            pb_1.Message.setField(this, 2, value)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/package.json:0-29","content":"{\n  \"private\": true,\n  \"name\": \"@sourcegraph/cody\",\n  \"description\": \"Cody, the code AI that writes code, fixes bugs, and answers questions using the code graph\",\n  \"license\": \"Apache-2.0\",\n  \"homepage\": \"https://cody.dev\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/sourcegraph/cody\"\n  },\n  \"engines\": {\n    \"node\": \"^v20.4.0\",\n    \"pnpm\": \"^8.6.7\"\n  },\n  \"browser\": {\n    \"fs\": false\n  },\n  \"scripts\": {\n    \"build\": \"tsc --build\",\n    \"watch\": \"tsc --build --watch\",\n    \"check\": \"pnpm run -s biome && pnpm run -s check:css\",\n    \"check:css\": \"stylelint --quiet --cache '**/*.css'\",\n    \"biome\": \"biome check --apply --error-on-warnings .\",\n    \"test\": \"vitest\",\n    \"test:unit\": \"vitest run\",\n    \"test:integration\": \"pnpm -C vscode test:integration\",\n    \"test:e2e\": \"pnpm -C vscode test:e2e\",\n    \"generate-agent-kotlin-bindings\": \"pnpm build && pnpm dlx ts-node agent/src/cli/scip-codegen/command.ts --output ../jetbrains/src/main/kotlin/com/sourcegraph/cody/protocol_generated\",\n    \"update-agent-recordings\": \"pnpm build && CODY_KEEP_UNUSED_RECORDINGS=false CODY_RECORD_IF_MISSING=true vitest agent/src/index.test.ts\",\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/fixtures/workspace2/README.md:0-3","content":"This is a second workspace folder included in `multi-root.code-workspace` used by integration\ntests in `test/integration/multi-root` for testing in multi-root workspaces.\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/execute/smell.ts:60-89","content":"export async function executeSmellCommand(\n    args?: Partial<CodyCommandArgs>\n): Promise<ChatCommandResult | undefined> {\n    return wrapInActiveSpan('command.smell', async span => {\n        span.setAttribute('sampled', true)\n        logDebug('executeSmellCommand', 'executing', { args })\n        telemetryService.log('CodyVSCodeExtension:command:smell:executed', {\n            useCodebaseContex: false,\n            requestID: args?.requestID,\n            source: args?.source,\n            traceId: span.spanContext().traceId,\n        })\n        telemetryRecorder.recordEvent('cody.command.smell', 'executed', {\n            metadata: {\n                useCodebaseContex: 0,\n            },\n            interactionID: args?.requestID,\n            privateMetadata: {\n                requestID: args?.requestID,\n                source: args?.source,\n                traceId: span.spanContext().traceId,\n            },\n        })\n\n        return {\n            type: 'chat',\n            session: await executeChat(await smellCommand(span, args)),\n        }\n    })\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:123-144","content":"\n### Code Actions\n\n#### Fixing code\n\n- [ ] Deliberately break a line or section of code to trigger the IDEâ€™s red squiggly error warning.\n- [ ] Click the Code Action (in VSC) lightbulb icon in the project file\n- [ ] Select `Ask Cody to Fix`.\n- [ ] Verify that there is a notification that \"Cody is working...\" while edits are being applied.\n- [ ] Verify that Cody automatically applies a code fix to the selected code.\n- [ ] Verify that you can see a diff view of the fix in a new tab by clicking `Show diff`.\n- [ ] Verify that you can prompt Cody to retry the command by clicking `Retry` and entering new instructions.\n- [ ] Verify that you can undo the fix by clicking `Undo`.\n- [ ] Verify that the ghost text disappears by clicking `Accept`.\n\n#### Explaining code\n\n- [ ] Deliberately break a line or section of code to trigger the IDEâ€™s red squiggly error warning.\n- [ ] Click the Code Action lightbulb icon in the project file\n- [ ] Select `Ask Cody to Explain`.\n- [ ] Verify that Cody provides an explanation of the error in a new chat window.\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/editor/displayPath.ts:116-145","content":"                : ''\n            return fixPathSep(\n                workspaceDisplayPrefix + uri.path.slice(workspacePrefix.length + 1),\n                isWindows,\n                uri.scheme\n            )\n        }\n    }\n\n    if (uri.scheme === 'file') {\n        // Show the absolute file path because we couldn't find a parent workspace folder.\n        return fixPathSep(uri.fsPath, isWindows, uri.scheme)\n    }\n\n    // Show the full URI for anything else.\n    return uri\n}\n\n/**\n * Fixes the path separators for Windows paths. This makes it possible to write cross-platform\n * tests.\n */\nfunction fixPathSep(fsPath: string, isWindows: boolean, scheme: string): string {\n    return isWindows && scheme === 'file' ? fsPath.replaceAll('/', '\\\\') : fsPath\n}\n\nexport function uriHasPrefix(uri: URI, prefix: URI, isWindows: boolean): boolean {\n    // On Windows, it's common to have drive letter casing mismatches (VS Code's APIs tend to normalize\n    // to lowercase, but many other tools use uppercase and we don't know where the context file came\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:0-32","content":"## Checklist\n\n- Commands\n  - [ ] [Explain](#explain)\n  - [ ] [Edit](#edit)\n  - [ ] [Test](#test)\n  - [ ] [Document](#document)\n  - [ ] [Smell](#smell)\n  - [ ] [Code Actions](#code-actions)\n  - [ ] [Custom Commands](#custom-commands)\n- Chat\n  - [ ] [Chat UX](#chat-ux)\n  - [ ] [Chats lefthand panel](#chats-lefthand-panel)\n  - [ ] [Enhanced Context](#enhanced-context)\n  - [ ] [LLM Selection](#llm-selection)\n- [Search](#search)\n- Autocomplete\n  - [ ] [Manual trigger key binding](#manual-trigger-key-binding)\n  - [ ] [Language ignore list](#language-ignore-list)\n  - [ ] [LLM selection](#llm-selection)\n  - [ ] [Multi-line completions](#multi-line-completions)\n  - [ ] [Telemetry and analytics](#telemetry-and-analytics)\n\n## Commands\n\n### Explain\n\n- [ ] Verify that the option to run the `Explain Code` command is available in the following locations:\n  - [ ] Sidebar `Explain Code`\n  - [ ] Context (right-click) menu `Cody > Explain Code`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Explain Code`\n  - [ ] Cody Command Menu (option+c, `Explain Code`)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/bindings/kotlin/gradlew.bat:0-25","content":"@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/services/code-lenses.ts:0-203","content":"import * as vscode from 'vscode'\nimport { getEditor } from '../../editor/active-editor'\nimport { getDocumentSections } from '../../editor/utils/document-sections'\nimport { telemetryService } from '../../services/telemetry'\nimport { telemetryRecorder } from '../../services/telemetry-v2'\nimport { isValidTestFile } from '../utils/test-commands'\n\ninterface EditorCodeLens {\n    name: string\n    selection: vscode.Selection\n}\n\n/**\n * Adds Code lenses for triggering Command Menu\n */\nexport class CommandCodeLenses implements vscode.CodeLensProvider {\n    private isEnabled = false\n    private addTestEnabled = false\n\n    private _disposables: vscode.Disposable[] = []\n    private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>()\n    public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event\n    constructor() {\n        this.provideCodeLenses = this.provideCodeLenses.bind(this)\n        this.updateConfig()\n\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('cody')) {\n                this.updateConfig()\n            }\n        })\n    }\n\n    /**\n     * init\n     */\n    private init(): void {\n        if (!this.isEnabled) {\n            return\n        }\n        this._disposables.push(vscode.languages.registerCodeLensProvider({ scheme: 'file' }, this))\n        this._disposables.push(\n            vscode.commands.registerCommand('cody.editor.codelens.click', async lens => {\n                telemetryService.log('CodyVSCodeExtension:command:codelens:clicked')\n                telemetryRecorder.recordEvent('cody.command.codelens', 'clicked')\n                const clickedLens = lens as EditorCodeLens\n                await this.onCodeLensClick(clickedLens)\n            })\n        )\n        // on change events for toggling\n        this._disposables.push(\n            vscode.window.onDidChangeVisibleTextEditors(() => this.fire()),\n            vscode.window.onDidChangeActiveTextEditor(() => this.fire())\n        )\n    }\n\n    /**\n     * Update the configurations\n     */\n    private updateConfig(): void {\n        const config = vscode.workspace.getConfiguration('cody')\n        this.isEnabled = config.get('commandCodeLenses') as boolean\n        this.addTestEnabled = config.get('internal.unstable') as boolean\n\n        if (this.isEnabled && !this._disposables.length) {\n            this.init()\n        }\n        this.fire()\n    }\n\n    /**\n     * Gets the code lenses for the specified document.\n     */\n    public async provideCodeLenses(\n        document: vscode.TextDocument,\n        token: vscode.CancellationToken\n    ): Promise<vscode.CodeLens[]> {\n        if (!this.isEnabled) {\n            return []\n        }\n\n        token.onCancellationRequested(() => [])\n        const editor = getEditor()?.active\n        if (editor?.document !== document || document.languageId === 'json') {\n            return []\n        }\n\n        // For test files, adds code lenses for each symbol\n        if (this.addTestEnabled && isValidTestFile(document.uri)) {\n            return await this.provideCodeLensesForSymbols(document.uri)\n        }\n\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        const smartRanges = await getDocumentSections(document)\n        for (const range of smartRanges) {\n            if (linesWithLenses.has(range.start)) {\n                continue\n            }\n            const selection = new vscode.Selection(range.start, range.end)\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.cody,\n                    arguments: [{ name: 'cody.menu.commands', selection }],\n                })\n            )\n\n            linesWithLenses.add(range.start.line)\n        }\n\n        return codeLenses\n    }\n\n    private async provideCodeLensesForSymbols(doc: vscode.Uri): Promise<vscode.CodeLens[]> {\n        const codeLenses = []\n        const linesWithLenses = new Set()\n\n        // Get a list of symbols from the document, filter out symbols that are not functions / classes / methods\n        const allSymbols = await vscode.commands.executeCommand<vscode.SymbolInformation[]>(\n            'vscode.executeDocumentSymbolProvider',\n            doc\n        )\n        const symbols =\n            allSymbols?.filter(\n                symbol =>\n                    symbol.kind === vscode.SymbolKind.Function ||\n                    symbol.kind === vscode.SymbolKind.Class ||\n                    symbol.kind === vscode.SymbolKind.Method ||\n                    symbol.kind === vscode.SymbolKind.Constructor\n            ) ?? []\n\n        for (const symbol of symbols) {\n            const range = symbol.location.range\n            const startLine = range.start.line\n            if (linesWithLenses.has(startLine)) {\n                continue\n            }\n\n            const selection = new vscode.Selection(startLine, 0, range.end.line + 1, 0)\n\n            codeLenses.push(\n                new vscode.CodeLens(range, {\n                    ...commandLenses.test,\n                    arguments: [{ name: 'cody.command.tests-cases', selection }],\n                })\n            )\n\n            linesWithLenses.add(startLine)\n        }\n\n        return codeLenses\n    }\n\n    /**\n     * Handle the code lens click event\n     */\n    private async onCodeLensClick(lens: EditorCodeLens): Promise<void> {\n        // Update selection in active editor to the selection of the clicked code lens\n        const activeEditor = getEditor().active\n        if (activeEditor) {\n            activeEditor.selection = lens.selection\n        }\n        await vscode.commands.executeCommand(lens.name, 'codeLens')\n    }\n\n    /**\n     * Fire an event to notify VS Code that the code lenses have changed.\n     */\n    public fire(): void {\n        if (!this.isEnabled) {\n            this.dispose()\n            return\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n\n    /**\n     * Dispose the disposables\n     */\n    public dispose(): void {\n        if (this._disposables.length) {\n            for (const disposable of this._disposables) {\n                disposable.dispose()\n            }\n            this._disposables = []\n        }\n        this._onDidChangeCodeLenses.fire()\n    }\n}\n\nconst commandLenses = {\n    cody: {\n        title: '$(cody-logo) Cody',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Open command menu',\n    },\n    test: {\n        title: '$(cody-logo) Add More Tests',\n        command: 'cody.editor.codelens.click',\n        tooltip: 'Generate new test cases',\n    },\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:108-123","content":"- [ ] Verify that Cody adds documentation above the function that contains your cursor.\n\n### Smell\n\n- [ ] Verify that the option to run the `Find Code Smells` command is available in the following locations:\n  - [ ] Sidebar `Find Code Smells`\n  - [ ] Context (right-click) menu `Cody > Find Code Smells`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Find Code Smells`\n  - [ ] Cody Command Menu (option+c, `Find Code Smells`)\n- [ ] Highlight a section of code in a file.\n- [ ] Run the `Find Code Smells` command.\n- [ ] Verify that Cody provides suggestion for how to improve the selected code in a new chat window.\n- [ ] Move your cursor inside a function in the file without highlighting code, before running the `Find Code Smells` command again\n- [ ] Verify that Cody provides suggestion for how to improve the function that contains your cursor in a new chat window.\n- [ ] Verify that the chat executed by running the command is added to the sidebar under `Chats`.\n"}]

 class: Find logic
