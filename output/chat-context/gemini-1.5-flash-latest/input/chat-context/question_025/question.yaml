 question: Where is the logic for adding context by mentioning files with @?
# CHAT
# CHAT_QUESTION Where is the logic for adding context by mentioning files with @?

# CHAT_REPLY The logic for adding context by mentioning files with "@" is spread across several files, but the core functionality is in the following:
# CHAT_REPLY 
# CHAT_REPLY 1. **`cody_test/lib/shared/src/mentions/query.ts`:** This file defines the `MentionQuery` interface and the `parseMentionQuery` function. This function parses the user's input after the "@" symbol to determine the type of context item being requested (file, symbol, etc.) and the text to search for.
# CHAT_REPLY 
# CHAT_REPLY 2. **`cody_test/vscode/src/editor/utils/editor-context.ts`:** This file contains the `getFileContextFiles` function, which is responsible for searching for files based on the user's query. It uses the `fuzzysort` library for fuzzy matching and returns a list of `ContextItemFile` objects.
# CHAT_REPLY 
# CHAT_REPLY 3. **`cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts`:** This file defines the `ContextItemMentionNode` class, which represents a mention of a context item in the prompt editor. The `exportDOM` method of this class generates the HTML for the mention, including a link that opens the mentioned file in the editor.
# CHAT_REPLY 
# CHAT_REPLY 4. **`cody_test/vscode/src/commands/context/file-path.ts`:** This file contains the `getContextFileFromUri` function, which is used to create a `ContextItem` object from a given URI. This function is called by the `ContextItemMentionNode` class to create the context item for the mentioned file.
# CHAT_REPLY 
# CHAT_REPLY 5. **`cody_test/vscode/src/commands/context/current-file.ts`:** This file contains the `getContextFileFromCurrentFile` function, which is used to create a `ContextItem` object from the currently open file. This function is called when the user wants to add the current file as context.
# CHAT_REPLY 
# CHAT_REPLY 6. **`cody_test/vscode/src/commands/context/open-tabs.ts`:** This file contains the `getContextFileFromTabs` function, which is used to create `ContextItem` objects from all the currently open tabs. This function is called when the user wants to add all open tabs as context.
# CHAT_REPLY 
# CHAT_REPLY 7. **`cody_test/vscode/src/commands/context/unit-test-file.ts`:** This file contains the `getContextFilesForUnitTestCommand` function, which is used to create `ContextItem` objects for unit test files related to the current file. This function is called when the user wants to add unit test files as context.
# CHAT_REPLY 
# CHAT_REPLY These files work together to provide the functionality for adding context by mentioning files with "@" in the chat input. The user's input is parsed, files are searched for, and the results are displayed in the chat input and added to the context list.

# CONTEXT_ITEMS [{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:108-123","content":"- [ ] Verify that Cody adds documentation above the function that contains your cursor.\n\n### Smell\n\n- [ ] Verify that the option to run the `Find Code Smells` command is available in the following locations:\n  - [ ] Sidebar `Find Code Smells`\n  - [ ] Context (right-click) menu `Cody > Find Code Smells`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Find Code Smells`\n  - [ ] Cody Command Menu (option+c, `Find Code Smells`)\n- [ ] Highlight a section of code in a file.\n- [ ] Run the `Find Code Smells` command.\n- [ ] Verify that Cody provides suggestion for how to improve the selected code in a new chat window.\n- [ ] Move your cursor inside a function in the file without highlighting code, before running the `Find Code Smells` command again\n- [ ] Verify that Cody provides suggestion for how to improve the function that contains your cursor in a new chat window.\n- [ ] Verify that the chat executed by running the command is added to the sidebar under `Chats`.\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:175-188","content":"export function contextItemMentionNodeDisplayText(contextItem: SerializedContextItem): string {\n    // A displayed range of `foo.txt:2-4` means \"include all of lines 2, 3, and 4\", which means the\n    // range needs to go to the start (0th character) of line 5. Also, `RangeData` is 0-indexed but\n    // display ranges are 1-indexed.\n    const rangeText = contextItem.range ? `:${displayLineRange(contextItem.range)}` : ''\n    if (contextItem.type === 'file') {\n        return `@${displayPath(URI.parse(contextItem.uri))}${rangeText}`\n    }\n    if (contextItem.type === 'symbol') {\n        return `@${displayPath(URI.parse(contextItem.uri))}${rangeText}#${contextItem.symbolName}`\n    }\n    // @ts-ignore\n    throw new Error(`unrecognized context item type ${contextItem.type}`)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/agent/bindings/kotlin/lib/src/main/kotlin/com/sourcegraph/cody/protocol_generated/ContextItem.kt:22-53","content":"\ndata class ContextItemFile(\n  val uri: Uri? = null,\n  val range: RangeData? = null,\n  val content: String? = null,\n  val repoName: String? = null,\n  val revision: String? = null,\n  val title: String? = null,\n  val source: ContextItemSource? = null, // Oneof: embeddings, user, keyword, editor, filename, search, unified, selection, terminal, uri\n  val size: Int? = null,\n  val isTooLarge: Boolean? = null,\n  val type: TypeEnum? = null, // Oneof: file\n) : ContextItem() {\n\n  enum class TypeEnum {\n    @SerializedName(\"file\") File,\n  }\n}\n\ndata class ContextItemSymbol(\n  val uri: Uri? = null,\n  val range: RangeData? = null,\n  val content: String? = null,\n  val repoName: String? = null,\n  val revision: String? = null,\n  val title: String? = null,\n  val source: ContextItemSource? = null, // Oneof: embeddings, user, keyword, editor, filename, search, unified, selection, terminal, uri\n  val size: Int? = null,\n  val isTooLarge: Boolean? = null,\n  val type: TypeEnum? = null, // Oneof: symbol\n  val symbolName: String? = null,\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/chat-atFile.test.ts:352-373","content":"\n    // @-file with the correct line range shows up in the chat view and it opens on click\n    const contextCell = getContextCell(chatPanelFrame)\n    await expectContextCellCounts(contextCell, { files: 1 })\n    await contextCell.hover()\n    await contextCell.click()\n    const chatContext = chatPanelFrame.locator('details').last()\n    await chatContext.getByRole('link', { name: 'buzz.ts:1-15' }).hover()\n    await chatContext.getByRole('link', { name: 'buzz.ts:1-15' }).click()\n    const previewTab = page.getByRole('tab', { name: /buzz.ts, preview, Editor Group/ })\n    await previewTab.hover()\n    await expect(previewTab).toBeVisible()\n})\n\ntest.extend<ExpectedEvents>({\n    expectedEvents: [\n        'CodyVSCodeExtension:addChatContext:clicked',\n        'CodyVSCodeExtension:addChatContext:clicked',\n    ],\n})('add selected code as @-mention with \"Cody Chat: Add context\"', async ({ page, sidebar }) => {\n    await sidebarSignin(page, sidebar)\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:59-73","content":"function convertContextItemMentionElement(domNode: HTMLElement): DOMConversionOutput | null {\n    const data = domNode.getAttribute(DOM_DATA_ATTR)\n    if (data !== null) {\n        try {\n            const contextItem: SerializedContextItem = JSON.parse(data)\n            const node = $createContextItemMentionNode(contextItem)\n            return { node }\n        } catch (error) {\n            console.error(error)\n            return null\n        }\n    }\n\n    return null\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/TESTING.md:0-32","content":"## Checklist\n\n- Commands\n  - [ ] [Explain](#explain)\n  - [ ] [Edit](#edit)\n  - [ ] [Test](#test)\n  - [ ] [Document](#document)\n  - [ ] [Smell](#smell)\n  - [ ] [Code Actions](#code-actions)\n  - [ ] [Custom Commands](#custom-commands)\n- Chat\n  - [ ] [Chat UX](#chat-ux)\n  - [ ] [Chats lefthand panel](#chats-lefthand-panel)\n  - [ ] [Enhanced Context](#enhanced-context)\n  - [ ] [LLM Selection](#llm-selection)\n- [Search](#search)\n- Autocomplete\n  - [ ] [Manual trigger key binding](#manual-trigger-key-binding)\n  - [ ] [Language ignore list](#language-ignore-list)\n  - [ ] [LLM selection](#llm-selection)\n  - [ ] [Multi-line completions](#multi-line-completions)\n  - [ ] [Telemetry and analytics](#telemetry-and-analytics)\n\n## Commands\n\n### Explain\n\n- [ ] Verify that the option to run the `Explain Code` command is available in the following locations:\n  - [ ] Sidebar `Explain Code`\n  - [ ] Context (right-click) menu `Cody > Explain Code`\n  - [ ] Command palette (MetaKey+Shift+p) `Cody Command: Explain Code`\n  - [ ] Cody Command Menu (option+c, `Explain Code`)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/open-tabs.ts:0-42","content":"import { type ContextItem, logError, wrapInActiveSpan } from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\nimport { getContextFileFromUri } from './file-path'\n\n/**\n * Gets context files from the currently open tabs.\n *\n * Iterates through all open tabs, filters to only file tabs in the workspace,\n * and then creates ContextFile objects for each valid tab.\n */\nexport async function getContextFileFromTabs(): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.openTabs', async span => {\n        const contextFiles: ContextItem[] = []\n        try {\n            // Get open tabs from the current editor\n            const tabGroups = vscode.window.tabGroups.all\n            const openTabs = tabGroups.flatMap(group =>\n                group.tabs.map(tab => tab.input)\n            ) as vscode.TabInputText[]\n\n            for (const tab of openTabs) {\n                // Skip non-file items\n                if (tab?.uri?.scheme !== 'file') {\n                    continue\n                }\n\n                // Skip files that are not from the current workspace\n                if (!vscode.workspace.getWorkspaceFolder(tab?.uri)) {\n                    continue\n                }\n\n                // Create context message\n                contextFiles.push(...(await getContextFileFromUri(tab?.uri)))\n            }\n        } catch (error) {\n            logError('getContextFileFromTabs', 'failed', { verbose: error })\n        }\n        // Returns what we have so far\n        return contextFiles\n    })\n}\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:190-199","content":"export function $createContextItemMentionNode(\n    contextItem: ContextItem | SerializedContextItem\n): ContextItemMentionNode {\n    const node = new ContextItemMentionNode(contextItem)\n    node.setMode('token').toggleDirectionless()\n    contextItem.type === 'file' &&\n        contextItem.isTooLarge &&\n        node.setStyle('color: var(--vscode-list-errorForeground)')\n    return $applyNodeReplacement(node)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/commands/types.ts:60-86","content":"    // Shell command to run to get context\n    command?: string\n    // The relative path of a file within your workspace root\n    filePath?: string\n    // The relative path of a directory within your workspace root\n    directoryPath?: string\n\n    // NOTE: Currently not supported\n    // Codebase context from current codebase\n    codebase?: boolean\n}\n\nexport type CodyCommandType = CustomCommandType | DefaultCommandType | 'recently used'\n\nexport enum CustomCommandType {\n    Workspace = 'workspace',\n    User = 'user',\n}\n\ntype DefaultCommandType = 'default' | 'experimental'\n\nexport interface TerminalOutputArguments {\n    name: string\n    selection?: string\n    creationOptions?: { shellPath?: string; shellArgs?: string[] }\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/editor/displayPath.ts:145-170","content":"    // from).\n    const uriPath =\n        isWindows && uri.scheme === 'file'\n            ? uri.path.slice(0, 2).toUpperCase() + uri.path.slice(2)\n            : uri.path\n    const prefixPath =\n        isWindows && prefix.scheme === 'file'\n            ? prefix.path.slice(0, 2).toUpperCase() + prefix.path.slice(2)\n            : prefix.path\n    return (\n        uri.scheme === prefix.scheme &&\n        (uri.authority ?? '') === (prefix.authority ?? '') && // different URI impls treat empty different\n        (uriPath === prefixPath ||\n            uriPath.startsWith(prefixPath.endsWith('/') ? prefixPath : `${prefixPath}/`) ||\n            (prefixPath.endsWith('/') && uriPath === prefixPath.slice(0, -1)))\n    )\n}\n\n/** The information necessary for {@link displayPath} to compute a display path. */\nexport interface DisplayPathEnvInfo {\n    workspaceFolders: URI[]\n    isWindows: boolean\n}\n\nlet envInfo: DisplayPathEnvInfo | null = null\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/unit-test-file.ts:18-51","content":"export async function getContextFilesForUnitTestCommand(file: URI): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.test', async span => {\n        const contextFiles: ContextItem[] = []\n\n        // exclude any files in the path with e2e, integration, node_modules, or dist\n        const excludePattern = '**/*{e2e,integration,node_modules,dist}*/**'\n        // To search for files in the current directory only\n        const searchCurrentDirectoryOnly = true\n        // The max number of files to search for in each workspace search\n        const max = 10\n\n        // Search for a test file that has the same file name first\n        const sameNameTestPattern = getSearchPatternForTestFiles(file, !searchCurrentDirectoryOnly, true)\n        const testWithSameName = await getWorkspaceFilesContext(sameNameTestPattern, excludePattern, 1)\n\n        // Search for test files in the current directory\n        const currentDirPattern = getSearchPatternForTestFiles(file, searchCurrentDirectoryOnly)\n        const currentDirContext = await getWorkspaceFilesContext(currentDirPattern, excludePattern, max)\n\n        contextFiles.push(...testWithSameName, ...currentDirContext)\n\n        // If no test files found in the current directory, search the entire workspace\n        if (!contextFiles.length) {\n            // Will try to look for half the max number of files in the workspace for faster results\n            const wsTestPattern = getSearchPatternForTestFiles(file, !searchCurrentDirectoryOnly)\n            const codebaseFiles = await getWorkspaceFilesContext(wsTestPattern, excludePattern, max / 2)\n\n            contextFiles.push(...codebaseFiles)\n        }\n\n        // Return valid test files only\n        return contextFiles.filter(f => isValidTestFile(f.uri))\n    })\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/chat-atFile.test.md:0-20","content":"# Expected behaviors for the @-mention feature\n\nCurrently covered by the e2e tests in `chat-atFile.test.ts`:\n\n- Typing '@' in the chat input shows a search box for files. Typing '@#' shows one for symbols instead.\n- Searching for a non-existent file or symbol shows a \"No files/symbols found\" message.\n- Search only matches files in the relative visible path, not full absolute paths.\n- Search includes dotfiles after \".\".\n- Searches match with either forward or backslashes.\n- Can click a file result fom the box to insert it into the chat input.\n- Inserted file context persists when resending a message from history.\n- Can use the Up and Down arrow keys to navigate through suggested file results.\n- Can use the ESC key to close the file selector without modifying the input text.\n- Pressing tab after a full filename inserts the @-mention with a trailing space.\n- Pressing tab after a partial filename completes to an existing @-mention.\n- Can @-mention files mid-sentence.\n- Don't show the file selector on @-queries that ends with non-alphanumeric char (e.g. @foo/bar?) without results.\n- Input box is cleared on submit, with @-mentions removed and selector closed.\n- Explicitly @-mentioned files show up in the file context list below the message.\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/nodes/ContextItemMentionNode.ts:77-173","content":"export class ContextItemMentionNode extends TextNode {\n    static getType(): string {\n        return 'contextItemMention'\n    }\n\n    static clone(node: ContextItemMentionNode): ContextItemMentionNode {\n        return new ContextItemMentionNode(node.contextItem, node.__text, node.__key)\n    }\n    static importJSON(serializedNode: SerializedContextItemMentionNode): ContextItemMentionNode {\n        const node = $createContextItemMentionNode(serializedNode.contextItem)\n        node.setTextContent(serializedNode.text)\n        node.setFormat(serializedNode.format)\n        node.setDetail(serializedNode.detail)\n        node.setMode(serializedNode.mode)\n        node.setStyle(serializedNode.style)\n        return node\n    }\n\n    private contextItem: SerializedContextItem\n\n    constructor(\n        contextItemWithAllFields: ContextItem | SerializedContextItem,\n        text?: string,\n        key?: NodeKey\n    ) {\n        // Make sure we only bring over the fields on the context item that we need, or else we\n        // could accidentally include tons of data (including the entire contents of files).\n        const contextItem = serializeContextItem(contextItemWithAllFields)\n\n        super(text ?? contextItemMentionNodeDisplayText(contextItem), key)\n\n        this.contextItem = contextItem\n    }\n\n    exportJSON(): SerializedContextItemMentionNode {\n        return {\n            ...super.exportJSON(),\n            contextItem: this.contextItem,\n            type: ContextItemMentionNode.getType(),\n            version: 1,\n        }\n    }\n\n    private static CLASS_NAMES = `context-item-mention-node ${styles.contextItemMentionNode}`\n\n    createDOM(config: EditorConfig): HTMLElement {\n        const element = super.createDOM(config)\n        element.className = ContextItemMentionNode.CLASS_NAMES\n        return element\n    }\n\n    exportDOM(): DOMExportOutput {\n        const element = document.createElement('span')\n        element.setAttribute(DOM_DATA_ATTR, JSON.stringify(this.contextItem))\n        element.className = ContextItemMentionNode.CLASS_NAMES\n\n        const link = document.createElement('a')\n        const { href, target } = webviewOpenURIForContextItem({\n            uri: URI.parse(this.contextItem.uri),\n            range: this.contextItem.range,\n        })\n        link.href = href\n        if (target) {\n            link.target = target\n        }\n        link.textContent = this.__text\n        element.appendChild(link)\n\n        return { element }\n    }\n\n    static importDOM(): DOMConversionMap | null {\n        return {\n            span: (domNode: HTMLElement) => {\n                if (!domNode.hasAttribute(DOM_DATA_ATTR)) {\n                    return null\n                }\n                return {\n                    conversion: convertContextItemMentionElement,\n                    priority: 1,\n                }\n            },\n        }\n    }\n\n    isTextEntity(): true {\n        return true\n    }\n\n    canInsertTextBefore(): boolean {\n        return false\n    }\n\n    canInsertTextAfter(): boolean {\n        return false\n    }\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/mentions/query.ts:64-94","content":"\n/**\n * The location and content of a mention in free-form user text input.\n */\nexport interface MentionTrigger {\n    /** The number of characters from the start of the text to the mention trigger (`@`). */\n    leadOffset: number\n\n    /**\n     * The string that is used to query for the context item to mention (to be passed to\n     * {@link parseMentionQuery}).\n     */\n    matchingString: string\n\n    /**\n     * Equal to `@` + {@link matchingString}. The entire string that should be replaced with the\n     * context item when the at-mention reference is chosen.\n     */\n    replaceableString: string\n}\n\n/**\n * Scans free-form user text input (in a chat message editor, for example) for possible mentions\n * with the `@` trigger character.\n *\n * The {@link textBeforeCursor} is all of the text in the input field before the text insertion\n * point cursor. For example, if the input field looks like `hello\n * @foo█bar`, then {@link textBeforeCursor} should be `hello @foo`.\n */\nexport function scanForMentionTriggerInUserTextInput(textBeforeCursor: string): MentionTrigger | null {\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/test/e2e/cody-ignore.test.ts:46-69","content":"\n    // Start new chat\n    const [chatPanel, chatInput] = await createEmptyChatPanel(page)\n\n    /* TEST: Chat Context - Ignored file do not show up with context */\n    await chatInput.focus()\n    await chatInput.fill('Ignore me')\n    await chatInput.press('Enter')\n    // Assistant should response to your chat question,\n    // but the current file is excluded (ignoredByCody.css) and not on the context list\n    await expect(chatPanel.getByText('hello from the assistant')).toBeVisible()\n    const contextCell = getContextCell(chatPanel)\n    await expect(contextCell).not.toBeVisible()\n\n    /* TEST: At-file - Ignored file does not show up as context when using @-mention */\n    await chatInput.focus()\n    await chatInput.clear()\n    await chatInput.fill('@ignoredByCody')\n    await expect(chatPanel.getByRole('heading', { name: 'No files found' })).toBeVisible()\n    await chatInput.clear()\n    await chatInput.fill('@ignore')\n    await expect(\n        chatPanel.getByRole('option', { name: withPlatformSlashes('ignore .cody') })\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/editor/utils/editor-context.ts:49-112","content":"export async function getFileContextFiles(\n    query: string,\n    maxResults: number\n): Promise<ContextItemFile[]> {\n    if (!query.trim()) {\n        return []\n    }\n\n    const uris = await throttledFindFiles()\n    if (!uris) {\n        return []\n    }\n\n    if (isWindows()) {\n        // On Windows, if the user has typed forward slashes, map them to backslashes before\n        // running the search so they match the real paths.\n        query = query.replaceAll('/', '\\\\')\n    }\n\n    // Add on the relative URIs for search, so we only search the visible part\n    // of the path and not the full FS path.\n    const urisWithRelative = uris.map(uri => ({ uri, relative: displayPath(uri) }))\n    const results = fuzzysort.go(query, urisWithRelative, {\n        key: 'relative',\n        limit: maxResults,\n        // We add a threshold for performance as per fuzzysort’s\n        // recommendations. Testing with sg/sg path strings, somewhere over 10k\n        // threshold is where it seems to return results that make no sense. VS\n        // Code’s own fuzzy finder seems to cap out much higher. To be safer and\n        // to account for longer paths from even deeper source trees we use\n        // 100k. We may want to revisit this number if we get reports of missing\n        // file results from very large repos.\n        threshold: -100000,\n    })\n\n    // Apply a penalty for segments that are in the low scoring list.\n    const adjustedResults = [...results].map(result => {\n        const segments = result.obj.uri.path.split(/[\\/\\\\]/).filter(segment => segment !== '')\n        for (const lowScoringPathSegment of lowScoringPathSegments) {\n            if (segments.includes(lowScoringPathSegment) && !query.includes(lowScoringPathSegment)) {\n                return {\n                    ...result,\n                    score: result.score - 100000,\n                }\n            }\n        }\n        return result\n    })\n    // fuzzysort can return results in different order for the same query if\n    // they have the same score :( So we do this hacky post-limit sorting (first\n    // by score, then by path) to ensure the order stays the same.\n    const sortedResults = adjustedResults\n        .sort((a, b) => {\n            return (\n                b.score - a.score ||\n                new Intl.Collator(undefined, { numeric: true }).compare(a.obj.uri.path, b.obj.uri.path)\n            )\n        })\n        .flatMap(result => createContextFileFromUri(result.obj.uri, ContextItemSource.User, 'file'))\n\n    // TODO(toolmantim): Add fuzzysort.highlight data to the result so we can show it in the UI\n\n    return await filterContextItemFiles(sortedResults)\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/promptEditor/fixtures.ts:52-78","content":"                        },\n                        {\n                            detail: 1,\n                            format: 0,\n                            mode: 'token',\n                            style: '',\n                            text: '@dir/dir/file-a-1.py',\n                            type: 'contextItemMention',\n                            version: 1,\n                            contextItem: {\n                                type: 'file',\n                                uri: 'file:///dir/dir/file-a-1.py',\n                            },\n                        },\n                        {\n                            detail: 0,\n                            format: 0,\n                            mode: 'normal',\n                            style: '',\n                            text: ' do? Also use ',\n                            type: 'text',\n                            version: 1,\n                        },\n                        {\n                            detail: 1,\n                            format: 0,\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/file-path.ts:13-41","content":"export async function getContextFileFromUri(file: URI, range?: vscode.Range): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.filePath', async span => {\n        try {\n            const doc = await vscode.workspace.openTextDocument(file)\n            const content = doc?.getText(range).trim()\n            if (!content) {\n                throw new Error('No file content')\n            }\n\n            const startLine = range?.start?.line ?? 0\n            range = new vscode.Range(startLine, 0, startLine + content.split('\\n').length, 0)\n            const size = TokenCounter.countTokens(content)\n\n            return [\n                {\n                    type: 'file',\n                    content,\n                    uri: file,\n                    source: ContextItemSource.Editor,\n                    range,\n                    size,\n                },\n            ] satisfies ContextItem[]\n        } catch (error) {\n            logError('getContextFileFromUri', 'failed', { verbose: error })\n            return []\n        }\n    })\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/edit/input/utils.ts:0-30","content":"import { type ContextItem, displayLineRange, displayPath } from '@sourcegraph/cody-shared'\nimport * as vscode from 'vscode'\nimport {\n    QUICK_PICK_ITEM_CHECKED_PREFIX,\n    QUICK_PICK_ITEM_EMPTY_INDENT_PREFIX,\n} from '../../chat/context/constants'\n\n/**\n * Removes the string after the last '@' character in the given string.\n * Returns the original string if '@' is not found.\n */\nexport function removeAfterLastAt(str: string): string {\n    const lastIndex = str.lastIndexOf('@')\n    if (lastIndex === -1) {\n        // Return the original string if \"@\" is not found\n        return str\n    }\n    return str.slice(0, lastIndex)\n}\n\n/**\n * Returns a string representation of the given ContextItem for use in UI labels.\n * Includes the file path and an optional range or symbol specifier.\n */\nexport function getLabelForContextItem(item: ContextItem): string {\n    const isFileType = item.type === 'file'\n    if (isFileType && item.title) {\n        return `Add context from: ${item.title}`\n    }\n    const rangeLabel = item.range ? `:${displayLineRange(item.range)}` : ''\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/current-file.ts:10-48","content":"export async function getContextFileFromCurrentFile(): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.file', async span => {\n        try {\n            const editor = getEditor()\n            const document = editor?.active?.document\n            if (!document) {\n                throw new Error('No active editor')\n            }\n\n            const selection = new vscode.Selection(\n                0,\n                0,\n                document.lineCount - 1,\n                document.lineAt(document.lineCount - 1).text.length\n            )\n\n            const content = document.getText(selection)\n            const size = TokenCounter.countTokens(content)\n\n            if (!content.trim()) {\n                throw new Error('No content')\n            }\n\n            return [\n                {\n                    type: 'file',\n                    uri: document.uri,\n                    content,\n                    source: ContextItemSource.Editor,\n                    range: selection,\n                    size,\n                } satisfies ContextItem,\n            ]\n        } catch (error) {\n            logError('getContextFileFromCurrentFile', 'failed', { verbose: error })\n            return []\n        }\n    })\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/mentions/query.ts:0-26","content":"/**\n * The parsed representation of a user's (partial or complete) input of an @-mention query.\n */\nexport interface MentionQuery {\n    /**\n     * The type of context item to search for.\n     */\n    type: 'file' | 'symbol' | 'url' | 'empty'\n\n    /**\n     * The user's text input, to be interpreted as a fuzzy-matched query. It is stripped of any\n     * prefix characters that indicate the {@link MentionQuery.type}, such as `#` for symbols.\n     */\n    text: string\n}\n\n/**\n * Parse an @-mention query. The {@link query} value is whatever the UI determines is the query\n * based on the current text input; it is not the full value of a message that may or may not\n * contain an @-mention.\n *\n * The {@link query} MUST be stripped of the trigger character (usually `@`). The only valid case\n * where {@link query} may begin with `@` is if the user is searching for context items that contain\n * `@`, such as if the user typed `@@foo` to mention a file that is literally named `@foo.js`.\n */\nexport function parseMentionQuery(query: string): MentionQuery {\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/utils/create-context-file.ts:0-23","content":"import { type ContextItem, ContextItemSource, TokenCounter } from '@sourcegraph/cody-shared'\n\nimport * as vscode from 'vscode'\nimport type { URI } from 'vscode-uri'\n\nexport async function createContextFile(file: URI, content: string): Promise<ContextItem | undefined> {\n    try {\n        const range = new vscode.Range(0, 0, content.split('\\n').length, 0)\n        const size = TokenCounter.countTokens(content)\n\n        return {\n            type: 'file',\n            uri: file,\n            content,\n            source: ContextItemSource.Editor,\n            range,\n            size,\n        } satisfies ContextItem\n    } catch (error) {\n        console.error(error)\n    }\n    return undefined\n}\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/lib/shared/src/codebase-context/messages.ts:88-121","content":"\n/**\n * A file (or a subset of a file given by a range) that is included as context in a chat message.\n */\nexport interface ContextItemFile extends ContextItemCommon {\n    type: 'file'\n}\n\n/**\n * A symbol (which is a range within a file) that is included as context in a chat message.\n */\nexport interface ContextItemSymbol extends ContextItemCommon {\n    type: 'symbol'\n\n    /** The name of the symbol, used for presentation only (not semantically meaningful). */\n    symbolName: string\n\n    /** The kind of symbol, used for presentation only (not semantically meaningful). */\n    kind: SymbolKind\n}\n\n/** The valid kinds of a symbol. */\nexport type SymbolKind = 'class' | 'function' | 'method'\n\n/** {@link ContextItem} with the `content` field set to the content. */\nexport type ContextItemWithContent = ContextItem & Required<Pick<ContextItem, 'content'>>\n\n/**\n * A system chat message that adds a context item to the conversation.\n */\nexport interface ContextMessage extends Required<Message> {\n    /**\n     * Context messages are always \"from\" the human. (In the future, this could be from \"system\" for\n"},{"source":"search","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/src/commands/context/unit-test-case.ts:8-47","content":"export async function getContextFilesForAddingUnitTestCases(testFile: URI): Promise<ContextItem[]> {\n    return wrapInActiveSpan('commands.context.testCase', async span => {\n        // Get the context from the current directory\n        // and then find the original file of the test file in the returned context\n        // If the original file is found, return it\n        // e.g. if the test file is src/foo/bar.spec.ts, look for src/foo/bar.ts\n        const directoryContext = await getContextFileFromDirectory()\n        const originalFileContext = directoryContext.find(f => isTestFileForOriginal(f.uri, testFile))\n        if (originalFileContext) {\n            return [originalFileContext]\n        }\n\n        // TODO (bee) improves context search\n        const contextFiles: ContextItem[] = []\n        // exclude any files in the path with e2e, integration, node_modules, or dist\n        const excludePattern = '**/*{e2e,integration,node_modules,dist}*/**'\n        // To search for files in the current directory only\n        const searchInCurrentDirectoryOnly = true\n        // The max number of files to search for in each workspace search\n        const max = 10\n\n        // Search for test files in the current directory first\n        const curerntDirPattern = getSearchPatternForTestFiles(testFile, searchInCurrentDirectoryOnly)\n        const currentDirContext = await getWorkspaceFilesContext(curerntDirPattern, excludePattern, max)\n\n        contextFiles.push(...currentDirContext)\n\n        // If no test files found in the current directory, search the entire workspace\n        if (!contextFiles.length) {\n            const wsTestPattern = getSearchPatternForTestFiles(testFile, !searchInCurrentDirectoryOnly)\n            // Will try to look for half the max number of files in the workspace for faster results\n            const codebaseFiles = await getWorkspaceFilesContext(wsTestPattern, excludePattern, max / 2)\n\n            contextFiles.push(...codebaseFiles)\n        }\n\n        // Return valid test files only\n        return contextFiles.filter(f => isValidTestFile(f.uri))\n    })\n"},{"source":"embeddings","file":"/Users/jan/repos/cody-leaderboard/input/chat-context/cody_test/vscode/webviews/chat/fixtures.ts:74-101","content":"    explainCode2: [\n        {\n            speaker: 'human',\n            text: ps`What does @#Symbol1 in @dir/dir/file-a-1.py do? Also use @README.md:2-8.`,\n            editorState: FILE_MENTION_EDITOR_STATE_FIXTURE,\n            contextFiles: [\n                {\n                    type: 'symbol',\n                    uri: URI.file('dir/dir/file-a-1.py'),\n                    symbolName: 'Symbol1',\n                    kind: 'function',\n                    range: { start: { line: 1, character: 0 }, end: { line: 8, character: 0 } },\n                },\n                { type: 'file', uri: URI.file('dir/dir/file-a-1.py') },\n                {\n                    type: 'file',\n                    uri: URI.file('README.md'),\n                    range: { start: { line: 1, character: 0 }, end: { line: 8, character: 0 } },\n                },\n            ],\n        },\n        {\n            speaker: 'assistant',\n            text: ps`This code is very cool.`,\n        },\n    ],\n}\n"}]

 class: Find logic
